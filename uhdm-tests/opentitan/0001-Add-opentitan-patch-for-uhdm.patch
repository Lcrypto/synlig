diff --git a/hw/ip/aes/rtl/aes_pkg.sv b/hw/ip/aes/rtl/aes_pkg.sv
index ddc3b7992..1880c397e 100644
--- a/hw/ip/aes/rtl/aes_pkg.sv
+++ b/hw/ip/aes/rtl/aes_pkg.sv
@@ -109,12 +109,7 @@ typedef struct packed {
   logic      manual_operation;
 } ctrl_reg_t;
 
-parameter ctrl_reg_t CTRL_RESET = '{
-  operation:        AES_ENC,
-  mode:             AES_NONE,
-  key_len:          AES_128,
-  manual_operation: '0
-};
+parameter ctrl_reg_t CTRL_RESET = 40'b0000000000000000000000000000000000110000;
 
 // Multiplication by {02} (i.e. x) on GF(2^8)
 // with field generating polynomial {01}{1b} (9'h11b)
diff --git a/hw/ip/alert_handler/rtl/alert_handler.sv b/hw/ip/alert_handler/rtl/alert_handler.sv
index 65035ad0b..b0911d650 100644
--- a/hw/ip/alert_handler/rtl/alert_handler.sv
+++ b/hw/ip/alert_handler/rtl/alert_handler.sv
@@ -26,7 +26,7 @@ module alert_handler
   output logic                    intr_classc_o,
   output logic                    intr_classd_o,
   // State information for HW crashdump
-  output alert_crashdump_t        crashdump_o,
+  output wire [212:0] crashdump_o,
   // Entropy Input from TRNG
   input                           entropy_i,
   // Alert Sources
@@ -42,8 +42,8 @@ module alert_handler
   //////////////////////////////////
 
   logic [N_CLASSES-1:0] irq;
-  hw2reg_wrap_t hw2reg_wrap;
-  reg2hw_wrap_t reg2hw_wrap;
+  wire [220:0] hw2reg_wrap;
+  wire [811:0] reg2hw_wrap;
 
   // TODO: make this fully parametric at some point
   assign {intr_classd_o,
@@ -79,9 +79,9 @@ module alert_handler
     .entropy_i,
     // we enable ping testing as soon as the config
     // regs have been locked
-    .en_i               ( reg2hw_wrap.config_locked    ),
-    .alert_en_i         ( reg2hw_wrap.alert_en         ),
-    .ping_timeout_cyc_i ( reg2hw_wrap.ping_timeout_cyc ),
+    .en_i(reg2hw_wrap[811]),
+    .alert_en_i(reg2hw_wrap[774-:5]),
+    .ping_timeout_cyc_i(reg2hw_wrap[810-:24]),
     // this determines the range of the randomly generated
     // wait period between ping. maximum mask width is PING_CNT_DW.
     .wait_cyc_mask_i    ( PING_CNT_DW'(24'hFFFFFF)     ),
@@ -116,7 +116,7 @@ module alert_handler
     );
   end
 
-  assign loc_alert_trig[2] = |(reg2hw_wrap.alert_en & alert_integfail);
+  assign loc_alert_trig[2] = |(reg2hw_wrap[774-:5] & alert_integfail);
 
   ///////////////////////////////////////
   // Set alert cause bits and classify //
@@ -125,13 +125,13 @@ module alert_handler
   alert_handler_class i_class (
     .alert_trig_i      ( alert_trig                  ),
     .loc_alert_trig_i  ( loc_alert_trig              ),
-    .alert_en_i        ( reg2hw_wrap.alert_en        ),
-    .loc_alert_en_i    ( reg2hw_wrap.loc_alert_en    ),
-    .alert_class_i     ( reg2hw_wrap.alert_class     ),
-    .loc_alert_class_i ( reg2hw_wrap.loc_alert_class ),
-    .alert_cause_o     ( hw2reg_wrap.alert_cause     ),
-    .loc_alert_cause_o ( hw2reg_wrap.loc_alert_cause ),
-    .class_trig_o      ( hw2reg_wrap.class_trig      )
+    .alert_en_i(reg2hw_wrap[774-:5]),
+    .loc_alert_en_i(reg2hw_wrap[786-:4]),
+    .alert_class_i(reg2hw_wrap[769-:10]),
+    .loc_alert_class_i(reg2hw_wrap[782-:8]),
+    .alert_cause_o(hw2reg_wrap[220-:5]),
+    .loc_alert_cause_o(hw2reg_wrap[215-:4]),
+    .class_trig_o(hw2reg_wrap[211-:4])
   );
 
   ////////////////////////////////////
@@ -145,30 +145,30 @@ module alert_handler
     alert_handler_accu i_accu (
       .clk_i,
       .rst_ni,
-      .class_en_i   ( reg2hw_wrap.class_en[k]           ),
-      .clr_i        ( reg2hw_wrap.class_clr[k]          ),
-      .class_trig_i ( hw2reg_wrap.class_trig[k]         ),
-      .thresh_i     ( reg2hw_wrap.class_accum_thresh[k] ),
-      .accu_cnt_o   ( hw2reg_wrap.class_accum_cnt[k]    ),
+      .class_en_i(reg2hw_wrap[756 + k]),
+      .clr_i(reg2hw_wrap[752 + k]),
+      .class_trig_i(hw2reg_wrap[208 + k]),
+      .thresh_i(reg2hw_wrap[688 + (k * AccuCntDw)+:AccuCntDw]),
+      .accu_cnt_o(hw2reg_wrap[140 + (k * AccuCntDw)+:AccuCntDw]),
       .accu_trig_o  ( class_accum_trig[k]               )
     );
 
     alert_handler_esc_timer i_esc_timer (
       .clk_i,
       .rst_ni,
-      .en_i             ( reg2hw_wrap.class_en[k]          ),
+      .en_i(reg2hw_wrap[756 + k]),
       // this clear does not apply to interrupts
-      .clr_i            ( reg2hw_wrap.class_clr[k]         ),
+      .clr_i(reg2hw_wrap[752 + k]),
       // an interrupt enables the timeout
       .timeout_en_i     ( irq[k]                           ),
       .accum_trig_i     ( class_accum_trig[k]              ),
-      .timeout_cyc_i    ( reg2hw_wrap.class_timeout_cyc[k] ),
-      .esc_en_i         ( reg2hw_wrap.class_esc_en[k]      ),
-      .esc_map_i        ( reg2hw_wrap.class_esc_map[k]     ),
-      .phase_cyc_i      ( reg2hw_wrap.class_phase_cyc[k]   ),
-      .esc_trig_o       ( hw2reg_wrap.class_esc_trig[k]    ),
-      .esc_cnt_o        ( hw2reg_wrap.class_esc_cnt[k]     ),
-      .esc_state_o      ( hw2reg_wrap.class_esc_state[k]   ),
+      .timeout_cyc_i(reg2hw_wrap[560 + (k * EscCntDw)+:EscCntDw]),
+      .esc_en_i(reg2hw_wrap[32 + (k * N_ESC_SEV)+:N_ESC_SEV]),
+      .esc_map_i(reg2hw_wrap[k]),
+      .phase_cyc_i(reg2hw_wrap[48 + k]),
+      .esc_trig_o(hw2reg_wrap[204 + k]),
+      .esc_cnt_o(hw2reg_wrap[12 + (k * EscCntDw)+:EscCntDw]),
+      .esc_state_o(hw2reg_wrap[k * 3+:3]),
       .esc_sig_en_o     ( class_esc_sig_en[k]              )
     );
   end
diff --git a/hw/ip/alert_handler/rtl/alert_handler_reg_wrap.sv b/hw/ip/alert_handler/rtl/alert_handler_reg_wrap.sv
index f6dbddef4..14f7722f6 100644
--- a/hw/ip/alert_handler/rtl/alert_handler_reg_wrap.sv
+++ b/hw/ip/alert_handler/rtl/alert_handler_reg_wrap.sv
@@ -13,11 +13,11 @@ module alert_handler_reg_wrap import alert_pkg::*; (
   // interrupt
   output logic [N_CLASSES-1:0] irq_o,
   // State information for HW crashdump
-  output alert_crashdump_t     crashdump_o,
+  output wire [212:0] crashdump_o,
   // hw2reg
-  input  hw2reg_wrap_t         hw2reg_wrap,
+  input wire [220:0] hw2reg_wrap,
   // reg2hw
-  output reg2hw_wrap_t         reg2hw_wrap
+  output wire [811:0] reg2hw_wrap
 );
 
 
@@ -26,8 +26,8 @@ module alert_handler_reg_wrap import alert_pkg::*; (
   //////////////////
 
   logic [N_CLASSES-1:0] class_autolock_en;
-  alert_handler_reg_pkg::alert_handler_reg2hw_t reg2hw;
-  alert_handler_reg_pkg::alert_handler_hw2reg_t hw2reg;
+  wire [844:0] reg2hw;
+  wire [237:0] hw2reg;
 
   alert_handler_reg_top u_reg (
     .clk_i,
@@ -45,53 +45,53 @@ module alert_handler_reg_wrap import alert_pkg::*; (
 
     prim_intr_hw #(
       .Width(1)
-    ) i_irq_classa (
-      .event_intr_i           ( hw2reg_wrap.class_trig[0]    ),
-      .reg2hw_intr_enable_q_i ( reg2hw.intr_enable.classa.q  ),
-      .reg2hw_intr_test_q_i   ( reg2hw.intr_test.classa.q    ),
-      .reg2hw_intr_test_qe_i  ( reg2hw.intr_test.classa.qe   ),
-      .reg2hw_intr_state_q_i  ( reg2hw.intr_state.classa.q   ),
-      .hw2reg_intr_state_de_o ( hw2reg.intr_state.classa.de  ),
-      .hw2reg_intr_state_d_o  ( hw2reg.intr_state.classa.d   ),
+    ) i_irq_classa(
+      .event_intr_i           ( hw2reg_wrap[208]             ),
+      .reg2hw_intr_enable_q_i ( reg2hw[840]                  ),
+      .reg2hw_intr_test_q_i   ( reg2hw[836]                  ),
+      .reg2hw_intr_test_qe_i  ( reg2hw[835]                  ),
+      .reg2hw_intr_state_q_i  ( reg2hw[844]                  ),
+      .hw2reg_intr_state_de_o ( hw2reg[236]                  ),
+      .hw2reg_intr_state_d_o  ( hw2reg[237]                  ),
       .intr_o                 ( irq_o[0]                     )
     );
 
     prim_intr_hw #(
       .Width(1)
-    ) i_irq_classb (
-      .event_intr_i           ( hw2reg_wrap.class_trig[1]    ),
-      .reg2hw_intr_enable_q_i ( reg2hw.intr_enable.classb.q  ),
-      .reg2hw_intr_test_q_i   ( reg2hw.intr_test.classb.q    ),
-      .reg2hw_intr_test_qe_i  ( reg2hw.intr_test.classb.qe   ),
-      .reg2hw_intr_state_q_i  ( reg2hw.intr_state.classb.q   ),
-      .hw2reg_intr_state_de_o ( hw2reg.intr_state.classb.de  ),
-      .hw2reg_intr_state_d_o  ( hw2reg.intr_state.classb.d   ),
+    ) i_irq_classb(
+      .event_intr_i           ( hw2reg_wrap[209]             ),
+      .reg2hw_intr_enable_q_i ( reg2hw[839]                  ),
+      .reg2hw_intr_test_q_i   ( reg2hw[834]                  ),
+      .reg2hw_intr_test_qe_i  ( reg2hw[833]                  ),
+      .reg2hw_intr_state_q_i  ( reg2hw[843]                  ),
+      .hw2reg_intr_state_de_o ( hw2reg[234]                  ),
+      .hw2reg_intr_state_d_o  ( hw2reg[235]                  ),
       .intr_o                 ( irq_o[1]                     )
     );
 
     prim_intr_hw #(
       .Width(1)
-    ) i_irq_classc (
-      .event_intr_i           ( hw2reg_wrap.class_trig[2]    ),
-      .reg2hw_intr_enable_q_i ( reg2hw.intr_enable.classc.q  ),
-      .reg2hw_intr_test_q_i   ( reg2hw.intr_test.classc.q    ),
-      .reg2hw_intr_test_qe_i  ( reg2hw.intr_test.classc.qe   ),
-      .reg2hw_intr_state_q_i  ( reg2hw.intr_state.classc.q   ),
-      .hw2reg_intr_state_de_o ( hw2reg.intr_state.classc.de  ),
-      .hw2reg_intr_state_d_o  ( hw2reg.intr_state.classc.d   ),
+    ) i_irq_classc(
+      .event_intr_i           ( hw2reg_wrap[210]             ),
+      .reg2hw_intr_enable_q_i ( reg2hw[838]                  ),
+      .reg2hw_intr_test_q_i   ( reg2hw[832]                  ),
+      .reg2hw_intr_test_qe_i  ( reg2hw[831]                  ),
+      .reg2hw_intr_state_q_i  ( reg2hw[842]                  ),
+      .hw2reg_intr_state_de_o ( hw2reg[232]                  ),
+      .hw2reg_intr_state_d_o  ( hw2reg[233]                  ),
       .intr_o                 ( irq_o[2]                     )
     );
 
     prim_intr_hw #(
       .Width(1)
-    ) i_irq_classd (
-      .event_intr_i           ( hw2reg_wrap.class_trig[3]    ),
-      .reg2hw_intr_enable_q_i ( reg2hw.intr_enable.classd.q  ),
-      .reg2hw_intr_test_q_i   ( reg2hw.intr_test.classd.q    ),
-      .reg2hw_intr_test_qe_i  ( reg2hw.intr_test.classd.qe   ),
-      .reg2hw_intr_state_q_i  ( reg2hw.intr_state.classd.q   ),
-      .hw2reg_intr_state_de_o ( hw2reg.intr_state.classd.de  ),
-      .hw2reg_intr_state_d_o  ( hw2reg.intr_state.classd.d   ),
+    ) i_irq_classd(
+      .event_intr_i           ( hw2reg_wrap[211]             ),
+      .reg2hw_intr_enable_q_i ( reg2hw[837]                  ),
+      .reg2hw_intr_test_q_i   ( reg2hw[830]                  ),
+      .reg2hw_intr_test_qe_i  ( reg2hw[829]                  ),
+      .reg2hw_intr_state_q_i  ( reg2hw[841]                  ),
+      .hw2reg_intr_state_de_o ( hw2reg[230]                  ),
+      .hw2reg_intr_state_d_o  ( hw2reg[231]                  ),
       .intr_o                 ( irq_o[3]                     )
     );
 
@@ -102,185 +102,62 @@ module alert_handler_reg_wrap import alert_pkg::*; (
   // if an alert is enabled and it fires,
   // we have to set the corresponding cause bit
   for (genvar k = 0; k < NAlerts; k++) begin : gen_alert_cause
-    assign hw2reg.alert_cause[k].d  = 1'b1;
-    assign hw2reg.alert_cause[k].de = reg2hw.alert_cause[k].q |
-                                      hw2reg_wrap.alert_cause[k];
+    assign hw2reg[220 + ((k * 2) + 1)] = 1'b1;
+    assign hw2reg[220 + (k * 2)] = reg2hw[784 + k] | hw2reg_wrap[216 + k];
   end
 
   // if a local alert is enabled and it fires,
   // we have to set the corresponding cause bit
   for (genvar k = 0; k < N_LOC_ALERT; k++) begin : gen_loc_alert_cause
-    assign hw2reg.loc_alert_cause[k].d  = 1'b1;
-    assign hw2reg.loc_alert_cause[k].de = reg2hw.loc_alert_cause[k].q |
-                                          hw2reg_wrap.loc_alert_cause[k];
+    assign hw2reg[212 + ((k * 2) + 1)] = 1'b1;
+    assign hw2reg[212 + (k * 2)] = reg2hw[768 + k] | hw2reg_wrap[212 + k];
   end
 
   // ping timeout in cycles
   // autolock can clear these regs automatically upon entering escalation
   // note: the class must be activated for this to occur
-  assign { hw2reg.classd_clren.d,
-           hw2reg.classc_clren.d,
-           hw2reg.classb_clren.d,
-           hw2reg.classa_clren.d } = '0;
-
-  assign { hw2reg.classd_clren.de,
-           hw2reg.classc_clren.de,
-           hw2reg.classb_clren.de,
-           hw2reg.classa_clren.de } = hw2reg_wrap.class_esc_trig    &
-                                      class_autolock_en             &
-                                      reg2hw_wrap.class_en;
-
-  // current accumulator counts
-  assign { hw2reg.classd_accum_cnt.d,
-           hw2reg.classc_accum_cnt.d,
-           hw2reg.classb_accum_cnt.d,
-           hw2reg.classa_accum_cnt.d } = hw2reg_wrap.class_accum_cnt;
-
-  // current accumulator counts
-  assign { hw2reg.classd_esc_cnt.d,
-           hw2reg.classc_esc_cnt.d,
-           hw2reg.classb_esc_cnt.d,
-           hw2reg.classa_esc_cnt.d } = hw2reg_wrap.class_esc_cnt;
-
-  // current accumulator counts
-  assign { hw2reg.classd_state.d,
-           hw2reg.classc_state.d,
-           hw2reg.classb_state.d,
-           hw2reg.classa_state.d } = hw2reg_wrap.class_esc_state;
-
+  assign {hw2reg[52], hw2reg[105], hw2reg[158], hw2reg[211]} = {4 {1'b0}};
+  assign {hw2reg[51], hw2reg[104], hw2reg[157], hw2reg[210]} = (hw2reg_wrap[207-:4] & class_autolock_en) & reg2hw_wrap[759-:4];
+  assign hw2reg[209-:16] = hw2reg_wrap[203-:16];
+  assign hw2reg[156-:16] = hw2reg_wrap[187-:16];
+  assign hw2reg[103-:16] = hw2reg_wrap[171-:16];
+  assign hw2reg[50-:16] = hw2reg_wrap[155-:16];
+  assign hw2reg[193-:32] = hw2reg_wrap[139-:32];
+  assign hw2reg[140-:32] = hw2reg_wrap[107-:32];
+  assign hw2reg[87-:32] = hw2reg_wrap[75-:32];
+  assign hw2reg[34-:32] = hw2reg_wrap[43-:32];
+  assign hw2reg[161-:3] = hw2reg_wrap[11-:3];
+  assign hw2reg[108-:3] = hw2reg_wrap[8-:3];
+  assign hw2reg[55-:3] = hw2reg_wrap[5-:3];
+  assign hw2reg[2-:3] = hw2reg_wrap[2-:3];
   /////////////////////
   // reg2hw mappings //
   /////////////////////
 
   // config register lock
-  assign reg2hw_wrap.config_locked = ~reg2hw.regen.q;
+  assign reg2hw_wrap[811] = ~reg2hw[828];
 
   // alert enable and class assignments
   for (genvar k = 0; k < NAlerts; k++) begin : gen_alert_en_class
-    assign reg2hw_wrap.alert_en[k]    = reg2hw.alert_en[k].q;
-    assign reg2hw_wrap.alert_class[k] = reg2hw.alert_class[k].q;
+    assign reg2hw_wrap[770 + k] = reg2hw[799 + k];
+    assign reg2hw_wrap[760 + (k * CLASS_DW)+:CLASS_DW] = reg2hw[789 + ((k * 2) + 1)-:2];
   end
 
   // local alert enable and class assignments
   for (genvar k = 0; k < N_LOC_ALERT; k++) begin : gen_loc_alert_en_class
-    assign reg2hw_wrap.loc_alert_en[k]    = reg2hw.loc_alert_en[k].q;
-    assign reg2hw_wrap.loc_alert_class[k] = reg2hw.loc_alert_class[k].q;
+    assign reg2hw_wrap[783 + k] = reg2hw[780 + k];
+    assign reg2hw_wrap[775 + (k * CLASS_DW)+:CLASS_DW] = reg2hw[772 + ((k * 2) + 1)-:2];
   end
 
-  assign reg2hw_wrap.ping_timeout_cyc = reg2hw.ping_timeout_cyc.q;
-
-  // class enable
-  // we require that at least one of the enable signals is
-  // set for a class to be enabled
-  assign reg2hw_wrap.class_en = { reg2hw.classd_ctrl.en & ( reg2hw.classd_ctrl.en_e3 |
-                                                            reg2hw.classd_ctrl.en_e2 |
-                                                            reg2hw.classd_ctrl.en_e1 |
-                                                            reg2hw.classd_ctrl.en_e0 ),
-                                  //
-                                  reg2hw.classc_ctrl.en & ( reg2hw.classc_ctrl.en_e3 |
-                                                            reg2hw.classc_ctrl.en_e2 |
-                                                            reg2hw.classc_ctrl.en_e1 |
-                                                            reg2hw.classc_ctrl.en_e0 ),
-                                  //
-                                  reg2hw.classb_ctrl.en & ( reg2hw.classb_ctrl.en_e3 |
-                                                            reg2hw.classb_ctrl.en_e2 |
-                                                            reg2hw.classb_ctrl.en_e1 |
-                                                            reg2hw.classb_ctrl.en_e0 ),
-                                  //
-                                  reg2hw.classa_ctrl.en & ( reg2hw.classa_ctrl.en_e3 |
-                                                            reg2hw.classa_ctrl.en_e2 |
-                                                            reg2hw.classa_ctrl.en_e1 |
-                                                            reg2hw.classa_ctrl.en_e0 ) };
-
-
-  // autolock enable
-  assign class_autolock_en = { reg2hw.classd_ctrl.lock,
-                               reg2hw.classc_ctrl.lock,
-                               reg2hw.classb_ctrl.lock,
-                               reg2hw.classa_ctrl.lock };
-
-  // escalation signal enable
-  assign reg2hw_wrap.class_esc_en = { reg2hw.classd_ctrl.en_e3,
-                                      reg2hw.classd_ctrl.en_e2,
-                                      reg2hw.classd_ctrl.en_e1,
-                                      reg2hw.classd_ctrl.en_e0,
-                                      //
-                                      reg2hw.classc_ctrl.en_e3,
-                                      reg2hw.classc_ctrl.en_e2,
-                                      reg2hw.classc_ctrl.en_e1,
-                                      reg2hw.classc_ctrl.en_e0,
-                                      //
-                                      reg2hw.classb_ctrl.en_e3,
-                                      reg2hw.classb_ctrl.en_e2,
-                                      reg2hw.classb_ctrl.en_e1,
-                                      reg2hw.classb_ctrl.en_e0,
-                                      //
-                                      reg2hw.classa_ctrl.en_e3,
-                                      reg2hw.classa_ctrl.en_e2,
-                                      reg2hw.classa_ctrl.en_e1,
-                                      reg2hw.classa_ctrl.en_e0 };
-
-
-  // escalation phase to escalation signal mapping
-  assign reg2hw_wrap.class_esc_map = { reg2hw.classd_ctrl.map_e3,
-                                       reg2hw.classd_ctrl.map_e2,
-                                       reg2hw.classd_ctrl.map_e1,
-                                       reg2hw.classd_ctrl.map_e0,
-                                       //
-                                       reg2hw.classc_ctrl.map_e3,
-                                       reg2hw.classc_ctrl.map_e2,
-                                       reg2hw.classc_ctrl.map_e1,
-                                       reg2hw.classc_ctrl.map_e0,
-                                       //
-                                       reg2hw.classb_ctrl.map_e3,
-                                       reg2hw.classb_ctrl.map_e2,
-                                       reg2hw.classb_ctrl.map_e1,
-                                       reg2hw.classb_ctrl.map_e0,
-                                       //
-                                       reg2hw.classa_ctrl.map_e3,
-                                       reg2hw.classa_ctrl.map_e2,
-                                       reg2hw.classa_ctrl.map_e1,
-                                       reg2hw.classa_ctrl.map_e0 };
-
-  // TODO: check whether this is correctly locked inside the regfile
-  // writing 1b1 to a class clr register clears the accumulator and
-  // escalation state if autolock is not asserted
-  assign reg2hw_wrap.class_clr = { reg2hw.classd_clr.q & reg2hw.classd_clr.qe,
-                                   reg2hw.classc_clr.q & reg2hw.classc_clr.qe,
-                                   reg2hw.classb_clr.q & reg2hw.classb_clr.qe,
-                                   reg2hw.classa_clr.q & reg2hw.classa_clr.qe };
-
-  // accumulator thresholds
-  assign reg2hw_wrap.class_accum_thresh = { reg2hw.classd_accum_thresh.q,
-                                            reg2hw.classc_accum_thresh.q,
-                                            reg2hw.classb_accum_thresh.q,
-                                            reg2hw.classa_accum_thresh.q };
-
-  // interrupt timeout lengths
-  assign reg2hw_wrap.class_timeout_cyc = { reg2hw.classd_timeout_cyc.q,
-                                           reg2hw.classc_timeout_cyc.q,
-                                           reg2hw.classb_timeout_cyc.q,
-                                           reg2hw.classa_timeout_cyc.q };
-  // escalation phase lengths
-  assign reg2hw_wrap.class_phase_cyc = { reg2hw.classd_phase3_cyc.q,
-                                         reg2hw.classd_phase2_cyc.q,
-                                         reg2hw.classd_phase1_cyc.q,
-                                         reg2hw.classd_phase0_cyc.q,
-                                         //
-                                         reg2hw.classc_phase3_cyc.q,
-                                         reg2hw.classc_phase2_cyc.q,
-                                         reg2hw.classc_phase1_cyc.q,
-                                         reg2hw.classc_phase0_cyc.q,
-                                         //
-                                         reg2hw.classb_phase3_cyc.q,
-                                         reg2hw.classb_phase2_cyc.q,
-                                         reg2hw.classb_phase1_cyc.q,
-                                         reg2hw.classb_phase0_cyc.q,
-                                         //
-                                         reg2hw.classa_phase3_cyc.q,
-                                         reg2hw.classa_phase2_cyc.q,
-                                         reg2hw.classa_phase1_cyc.q,
-                                         reg2hw.classa_phase0_cyc.q};
+  assign reg2hw_wrap[810-:24] = reg2hw[827-:24];
+  assign reg2hw_wrap[759-:4] = {reg2hw[191] & (((reg2hw[186] | reg2hw[187]) | reg2hw[188]) | reg2hw[189]), reg2hw[383] & (((reg2hw[378] | reg2hw[379]) | reg2hw[380]) | reg2hw[381]), reg2hw[575] & (((reg2hw[570] | reg2hw[571]) | reg2hw[572]) | reg2hw[573]), reg2hw[767] & (((reg2hw[762] | reg2hw[763]) | reg2hw[764]) | reg2hw[765])};
+  assign class_autolock_en = {reg2hw[190], reg2hw[382], reg2hw[574], reg2hw[766]};
+  assign reg2hw_wrap[47-:16] = {reg2hw[186], reg2hw[187], reg2hw[188], reg2hw[189], reg2hw[378], reg2hw[379], reg2hw[380], reg2hw[381], reg2hw[570], reg2hw[571], reg2hw[572], reg2hw[573], reg2hw[762], reg2hw[763], reg2hw[764], reg2hw[765]};
+  assign reg2hw_wrap[31-:32] = {reg2hw[179-:2], reg2hw[181-:2], reg2hw[183-:2], reg2hw[185-:2], reg2hw[371-:2], reg2hw[373-:2], reg2hw[375-:2], reg2hw[377-:2], reg2hw[563-:2], reg2hw[565-:2], reg2hw[567-:2], reg2hw[569-:2], reg2hw[755-:2], reg2hw[757-:2], reg2hw[759-:2], reg2hw[761-:2]};
+  assign reg2hw_wrap[755-:4] = {reg2hw[177] & reg2hw[176], reg2hw[369] & reg2hw[368], reg2hw[561] & reg2hw[560], reg2hw[753] & reg2hw[752]};
+  assign reg2hw_wrap[751-:64] = {reg2hw[175-:16], reg2hw[367-:16], reg2hw[559-:16], reg2hw[751-:16]};
+  assign reg2hw_wrap[687-:128] = {reg2hw[159-:32], reg2hw[351-:32], reg2hw[543-:32], reg2hw[735-:32]};
+  assign reg2hw_wrap[559-:512] = {reg2hw[31-:32], reg2hw[63-:32], reg2hw[95-:32], reg2hw[127-:32], reg2hw[223-:32], reg2hw[255-:32], reg2hw[287-:32], reg2hw[319-:32], reg2hw[415-:32], reg2hw[447-:32], reg2hw[479-:32], reg2hw[511-:32], reg2hw[607-:32], reg2hw[639-:32], reg2hw[671-:32], reg2hw[703-:32]};
 
   //////////////////////
   // crashdump output //
@@ -288,17 +165,17 @@ module alert_handler_reg_wrap import alert_pkg::*; (
 
   // alert cause output
   for (genvar k = 0; k < NAlerts; k++) begin : gen_alert_cause_dump
-    assign crashdump_o.alert_cause[k]  = reg2hw.alert_cause[k].q;
+    assign crashdump_o[208 + k] = reg2hw[784 + k];
   end
 
   // local alert cause register output
   for (genvar k = 0; k < N_LOC_ALERT; k++) begin : gen_loc_alert_cause_dump
-    assign crashdump_o.loc_alert_cause[k]  = reg2hw.loc_alert_cause[k].q;
+    assign crashdump_o[204 + k] = reg2hw[768 + k];
   end
 
-  assign crashdump_o.class_accum_cnt = hw2reg_wrap.class_accum_cnt;
-  assign crashdump_o.class_esc_cnt   = hw2reg_wrap.class_esc_cnt;
-  assign crashdump_o.class_esc_state = hw2reg_wrap.class_esc_state;
+  assign crashdump_o[203-:64] = hw2reg_wrap[203-:64];
+  assign crashdump_o[139-:128] = hw2reg_wrap[139-:128];
+  assign crashdump_o[11-:12] = hw2reg_wrap[11-:12];
 
 endmodule : alert_handler_reg_wrap
 
diff --git a/hw/ip/alert_handler/rtl/alert_pkg.sv b/hw/ip/alert_handler/rtl/alert_pkg.sv
index 5324b4978..a1a858232 100644
--- a/hw/ip/alert_handler/rtl/alert_pkg.sv
+++ b/hw/ip/alert_handler/rtl/alert_pkg.sv
@@ -68,9 +68,9 @@ package alert_pkg;
     logic [N_CLASSES-1:0]                              class_clr;          // clears esc/accu
     logic [N_CLASSES-1:0][AccuCntDw-1:0]               class_accum_thresh; // accum esc threshold
     logic [N_CLASSES-1:0][EscCntDw-1:0]                class_timeout_cyc;  // interrupt timeout
-    logic [N_CLASSES-1:0][N_PHASES-1:0][EscCntDw-1:0]  class_phase_cyc;    // length of phases 0..3
+    logic [511:0]  class_phase_cyc;    // length of phases 0..3
     logic [N_CLASSES-1:0][N_ESC_SEV-1:0]               class_esc_en;       // esc signal enables
-    logic [N_CLASSES-1:0][N_ESC_SEV-1:0][PHASE_DW-1:0] class_esc_map;      // esc signal/phase map
+    logic [31:0] class_esc_map;      // esc signal/phase map
   } reg2hw_wrap_t;
 
 endpackage : alert_pkg
diff --git a/hw/ip/flash_ctrl/rtl/flash_ctrl.sv b/hw/ip/flash_ctrl/rtl/flash_ctrl.sv
index 6b573e1b7..6a4f5b30e 100644
--- a/hw/ip/flash_ctrl/rtl/flash_ctrl.sv
+++ b/hw/ip/flash_ctrl/rtl/flash_ctrl.sv
@@ -309,20 +309,20 @@ module flash_ctrl import flash_ctrl_pkg::*; (
   end
 
   // extra region is the default region
-  flash_ctrl_reg2hw_mp_region_cfg_mreg_t [MpRegions:0] region_cfgs;
+  logic [MpRegions*24:0] region_cfgs;
 
-  assign region_cfgs[MpRegions-1:0] = reg2hw.mp_region_cfg[MpRegions-1:0];
+  assign region_cfgs[(MpRegions - 1)*24-1:0] = reg2hw.mp_region_cfg[MpRegions*24-1:0];
 
   //default region
-  assign region_cfgs[MpRegions].base.q = '0;
-  assign region_cfgs[MpRegions].size.q = NumBanks * PagesPerBank;
-  assign region_cfgs[MpRegions].en.q = 1'b1;
-  assign region_cfgs[MpRegions].rd_en.q = reg2hw.default_region.rd_en.q;
-  assign region_cfgs[MpRegions].prog_en.q = reg2hw.default_region.prog_en.q;
-  assign region_cfgs[MpRegions].erase_en.q = reg2hw.default_region.erase_en.q;
+  assign region_cfgs[(MpRegions - 1)*24+19:(MpRegions - 1)*24+11] = '0;
+  assign region_cfgs[(MpRegions - 1)*24+10:(MpRegions - 1)*24+1] = NumBanks * PagesPerBank;
+  assign region_cfgs[(MpRegions - 1)*24+23] = 1'b1;
+  assign region_cfgs[(MpRegions - 1)*24+22] = reg2hw.default_region.rd_en.q;
+  assign region_cfgs[(MpRegions - 1)*24+21] = reg2hw.default_region.prog_en.q;
+  assign region_cfgs[(MpRegions - 1)*24+20] = reg2hw.default_region.erase_en.q;
   // we are allowed to set default accessibility of data partitions
   // however info partitions default to inaccessible
-  assign region_cfgs[MpRegions].partition.q = FlashPartData;
+  assign region_cfgs[(MpRegions - 1)*24+0] = FlashPartData;
 
   flash_part_e flash_part_sel;
   assign flash_part_sel = flash_part_e'(reg2hw.control.partition_sel.q);
diff --git a/hw/ip/flash_ctrl/rtl/flash_ctrl_pkg.sv b/hw/ip/flash_ctrl/rtl/flash_ctrl_pkg.sv
index bef591e8e..5ba3fae40 100644
--- a/hw/ip/flash_ctrl/rtl/flash_ctrl_pkg.sv
+++ b/hw/ip/flash_ctrl/rtl/flash_ctrl_pkg.sv
@@ -84,20 +84,7 @@ package flash_ctrl_pkg;
   } flash_req_t;
 
   // default value of flash_req_t (for dangling ports)
-  parameter flash_req_t FLASH_REQ_DEFAULT = '{
-    req:       1'b0,
-    rd:        1'b0,
-    prog:      1'b0,
-    pg_erase:  1'b0,
-    bk_erase:  1'b0,
-    part:      FlashPartData,
-    addr:      '0,
-    prog_data: '0,
-    prog_last: '0,
-    scramble_en: '0,
-    addr_key:  128'hDEADBEEFBEEFFACEDEADBEEF5A5AA5A5,
-    data_key:  128'hDEADBEEF5A5AA5A5DEADBEEFBEEFFACE
-  };
+  parameter flash_req_t FLASH_REQ_DEFAULT = 390'b110111101010110110111110111011110101101001011010101001011010010111011110101011011011111011101111101111101110111111111010110011101101111010101101101111101110111110111110111011111111101011001110110111101010110110111110111011110101101001011010101001011010010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
 
   // memory to flash controller
   typedef struct packed {
@@ -109,13 +96,7 @@ package flash_ctrl_pkg;
   } flash_rsp_t;
 
   // default value of flash_rsp_t (for dangling ports)
-  parameter flash_rsp_t FLASH_RSP_DEFAULT = '{
-    rd_done:    1'b0,
-    prog_done:  1'b0,
-    erase_done: 1'b0,
-    rd_data:    '0,
-    init_busy:  1'b0
-  };
+  parameter flash_rsp_t FLASH_RSP_DEFAULT = 36'b000000000000000000000000000000000000;
 
   ////////////////////////////
   // The following inter-module should be moved to OTP
@@ -128,10 +109,7 @@ package flash_ctrl_pkg;
   } otp_flash_t;
 
   // default value of otp_flash_t
-  parameter otp_flash_t OTP_FLASH_DEFAULT = '{
-    addr_key: 128'hDEADBEEFBEEFFACEDEADBEEF5A5AA5A5,
-    data_key: 128'hDEADBEEF5A5AA5A5DEADBEEFBEEFFACE
-  };
+  parameter otp_flash_t OTP_FLASH_DEFAULT = 256'b1101111010101101101111101110111101011010010110101010010110100101110111101010110110111110111011111011111011101111111110101100111011011110101011011011111011101111101111101110111111111010110011101101111010101101101111101110111101011010010110101010010110100101;
 
 
 
diff --git a/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_pkg.sv b/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_pkg.sv
index 4c7081ef9..6e318128d 100644
--- a/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_pkg.sv
+++ b/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_pkg.sv
@@ -250,9 +250,9 @@ package flash_ctrl_reg_pkg;
     flash_ctrl_reg2hw_control_reg_t control; // [289:273]
     flash_ctrl_reg2hw_addr_reg_t addr; // [272:241]
     flash_ctrl_reg2hw_scramble_en_reg_t scramble_en; // [240:240]
-    flash_ctrl_reg2hw_mp_region_cfg_mreg_t [7:0] mp_region_cfg; // [239:48]
+    logic [191:0] mp_region_cfg; // [239:48]
     flash_ctrl_reg2hw_default_region_reg_t default_region; // [47:45]
-    flash_ctrl_reg2hw_mp_bank_cfg_mreg_t [1:0] mp_bank_cfg; // [44:43]
+    logic [1:0] mp_bank_cfg; // [44:43]
     flash_ctrl_reg2hw_scratch_reg_t scratch; // [42:11]
     flash_ctrl_reg2hw_fifo_lvl_reg_t fifo_lvl; // [10:1]
     flash_ctrl_reg2hw_fifo_rst_reg_t fifo_rst; // [0:0]
diff --git a/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_top.sv b/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_top.sv
index 07945937c..518462c7d 100644
--- a/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_top.sv
+++ b/hw/ip/flash_ctrl/rtl/flash_ctrl_reg_top.sv
@@ -1075,7 +1075,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].en.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_en0_qs)
@@ -1101,7 +1101,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_rd_en0_qs)
@@ -1127,7 +1127,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_prog_en0_qs)
@@ -1153,7 +1153,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_erase_en0_qs)
@@ -1179,7 +1179,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].base.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+19:0*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_base0_qs)
@@ -1205,7 +1205,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].size.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+10:0*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_size0_qs)
@@ -1231,7 +1231,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[0].partition.q ),
+    .q      (reg2hw.mp_region_cfg[0*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg0_partition0_qs)
@@ -1260,7 +1260,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].en.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_en1_qs)
@@ -1286,7 +1286,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_rd_en1_qs)
@@ -1312,7 +1312,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_prog_en1_qs)
@@ -1338,7 +1338,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_erase_en1_qs)
@@ -1364,7 +1364,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].base.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+19:1*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_base1_qs)
@@ -1390,7 +1390,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].size.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+10:1*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_size1_qs)
@@ -1416,7 +1416,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[1].partition.q ),
+    .q      (reg2hw.mp_region_cfg[1*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg1_partition1_qs)
@@ -1445,7 +1445,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].en.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_en2_qs)
@@ -1471,7 +1471,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_rd_en2_qs)
@@ -1497,7 +1497,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_prog_en2_qs)
@@ -1523,7 +1523,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_erase_en2_qs)
@@ -1549,7 +1549,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].base.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+19:2*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_base2_qs)
@@ -1575,7 +1575,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].size.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+10:2*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_size2_qs)
@@ -1601,7 +1601,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[2].partition.q ),
+    .q      (reg2hw.mp_region_cfg[2*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg2_partition2_qs)
@@ -1630,7 +1630,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].en.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_en3_qs)
@@ -1656,7 +1656,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_rd_en3_qs)
@@ -1682,7 +1682,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_prog_en3_qs)
@@ -1708,7 +1708,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_erase_en3_qs)
@@ -1734,7 +1734,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].base.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+19:3*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_base3_qs)
@@ -1760,7 +1760,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].size.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+10:3*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_size3_qs)
@@ -1786,7 +1786,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[3].partition.q ),
+    .q      (reg2hw.mp_region_cfg[3*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg3_partition3_qs)
@@ -1815,7 +1815,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].en.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_en4_qs)
@@ -1841,7 +1841,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_rd_en4_qs)
@@ -1867,7 +1867,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_prog_en4_qs)
@@ -1893,7 +1893,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_erase_en4_qs)
@@ -1919,7 +1919,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].base.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+19:4*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_base4_qs)
@@ -1945,7 +1945,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].size.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+10:4*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_size4_qs)
@@ -1971,7 +1971,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[4].partition.q ),
+    .q      (reg2hw.mp_region_cfg[4*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg4_partition4_qs)
@@ -2000,7 +2000,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].en.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_en5_qs)
@@ -2026,7 +2026,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_rd_en5_qs)
@@ -2052,7 +2052,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_prog_en5_qs)
@@ -2078,7 +2078,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_erase_en5_qs)
@@ -2104,7 +2104,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].base.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+19:5*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_base5_qs)
@@ -2130,7 +2130,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].size.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+10:5*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_size5_qs)
@@ -2156,7 +2156,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[5].partition.q ),
+    .q      (reg2hw.mp_region_cfg[5*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg5_partition5_qs)
@@ -2185,7 +2185,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].en.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_en6_qs)
@@ -2211,7 +2211,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_rd_en6_qs)
@@ -2237,7 +2237,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_prog_en6_qs)
@@ -2263,7 +2263,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_erase_en6_qs)
@@ -2289,7 +2289,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].base.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+19:6*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_base6_qs)
@@ -2315,7 +2315,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].size.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+10:6*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_size6_qs)
@@ -2341,7 +2341,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[6].partition.q ),
+    .q      (reg2hw.mp_region_cfg[6*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg6_partition6_qs)
@@ -2370,7 +2370,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].en.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+23] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_en7_qs)
@@ -2396,7 +2396,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].rd_en.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+22] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_rd_en7_qs)
@@ -2422,7 +2422,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].prog_en.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+21] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_prog_en7_qs)
@@ -2448,7 +2448,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].erase_en.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+20] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_erase_en7_qs)
@@ -2474,7 +2474,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].base.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+19:7*24+11] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_base7_qs)
@@ -2500,7 +2500,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].size.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+10:7*24+1] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_size7_qs)
@@ -2526,7 +2526,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_region_cfg[7].partition.q ),
+    .q      (reg2hw.mp_region_cfg[7*24+0] ),
 
     // to register interface (read)
     .qs     (mp_region_cfg7_partition7_qs)
@@ -2664,7 +2664,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_bank_cfg[0].q ),
+    .q      (reg2hw.mp_bank_cfg[0] ),
 
     // to register interface (read)
     .qs     (mp_bank_cfg_erase_en0_qs)
@@ -2690,7 +2690,7 @@ module flash_ctrl_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.mp_bank_cfg[1].q ),
+    .q      (reg2hw.mp_bank_cfg[1] ),
 
     // to register interface (read)
     .qs     (mp_bank_cfg_erase_en1_qs)
diff --git a/hw/ip/hmac/rtl/hmac.sv b/hw/ip/hmac/rtl/hmac.sv
index 043829d21..1fde3a8f5 100644
--- a/hw/ip/hmac/rtl/hmac.sv
+++ b/hw/ip/hmac/rtl/hmac.sv
@@ -33,8 +33,8 @@ module hmac
   hmac_reg2hw_t reg2hw;
   hmac_hw2reg_t hw2reg;
 
-  tlul_pkg::tl_h2d_t  tl_win_h2d[1];
-  tlul_pkg::tl_d2h_t  tl_win_d2h[1];
+  tlul_pkg::tl_h2d_t  tl_win_h2d;
+  tlul_pkg::tl_d2h_t  tl_win_d2h;
 
   logic [255:0] secret_key;
 
@@ -97,7 +97,7 @@ module hmac
   err_code_e   err_code;
   logic        err_valid;
 
-  sha_word_t [7:0] digest;
+  wire [255:0] digest;
 
   hmac_reg2hw_cfg_reg_t cfg_reg;
   logic                 cfg_block;  // Prevent changing config
@@ -132,7 +132,7 @@ module hmac
   for (genvar i = 0; i < 8; i++) begin : gen_key_digest
     assign hw2reg.key[7-i].d      = '0;
     // digest
-    assign hw2reg.digest[i].d = conv_endian(digest[i], digest_swap);
+    assign hw2reg.digest[i].d = conv_endian(digest[i * 32+:32], digest_swap);
   end
 
   logic [3:0] unused_cfg_qe;
@@ -173,7 +173,7 @@ module hmac
   // Hold the configuration during the process
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      cfg_reg <= '{endian_swap: '{q: 1'b1, qe: 1'b0}, default:'0};
+      cfg_reg <= 8'b00001000;
     end else if (!cfg_block && reg2hw.cfg.hmac_en.qe) begin
       cfg_reg <= reg2hw.cfg ;
     end
@@ -247,15 +247,13 @@ module hmac
   assign msg_fifo_gnt    = msg_fifo_req & ~hmac_fifo_wsel & packer_ready;
 
   // FIFO control
-  sha_fifo_t reg_fifo_wentry;
-  assign reg_fifo_wentry.data = conv_endian(reg_fifo_wdata, 1'b1); // always convert
-  assign reg_fifo_wentry.mask = {reg_fifo_wmask[0],  reg_fifo_wmask[8],
-                                 reg_fifo_wmask[16], reg_fifo_wmask[24]};
+  wire [35:0] reg_fifo_wentry;
+  assign reg_fifo_wentry[35-:32] = conv_endian(reg_fifo_wdata, 1'b1);
+  assign reg_fifo_wentry[3-:4] = {reg_fifo_wmask[0], reg_fifo_wmask[8], reg_fifo_wmask[16], reg_fifo_wmask[24]};
   assign fifo_full   = ~fifo_wready;
   assign fifo_empty  = ~fifo_rvalid;
   assign fifo_wvalid = (hmac_fifo_wsel && fifo_wready) ? hmac_fifo_wvalid : reg_fifo_wvalid;
-  assign fifo_wdata  = (hmac_fifo_wsel) ? '{data: digest[hmac_fifo_wdata_sel], mask: '1}
-                                       : reg_fifo_wentry;
+  assign fifo_wdata = (hmac_fifo_wsel ? {digest[hmac_fifo_wdata_sel * 32+:32], {4{1'b1}}} : reg_fifo_wentry);
 
   prim_fifo_sync #(
     .Width   ($bits(sha_fifo_t)),
@@ -287,8 +285,8 @@ module hmac
   ) u_tlul_adapter (
     .clk_i,
     .rst_ni,
-    .tl_i   (tl_win_h2d[0]),
-    .tl_o   (tl_win_d2h[0]),
+    .tl_i   (tl_win_h2d),
+    .tl_o   (tl_win_d2h),
 
     .req_o    (msg_fifo_req   ),
     .gnt_i    (msg_fifo_gnt   ),
diff --git a/hw/ip/hmac/rtl/hmac_core.sv b/hw/ip/hmac/rtl/hmac_core.sv
index a1c9515db..445ca9f1f 100644
--- a/hw/ip/hmac/rtl/hmac_core.sv
+++ b/hw/ip/hmac/rtl/hmac_core.sv
@@ -111,12 +111,17 @@ module hmac_core import hmac_pkg::*; (
   assign fifo_rready  = (hmac_en) ? (st_q == StMsg) & sha_rready : sha_rready ;
   // sha_rvalid is controlled by State Machine below.
   assign sha_rvalid = (!hmac_en) ? fifo_rvalid : hmac_sha_rvalid ;
-  assign sha_rdata =
-    (!hmac_en)             ? fifo_rdata                                               :
-    (sel_rdata == SelIPad) ? '{data: i_pad[(BlockSize-1)-32*pad_index-:32], mask: '1} :
-    (sel_rdata == SelOPad) ? '{data: o_pad[(BlockSize-1)-32*pad_index-:32], mask: '1} :
-    (sel_rdata == SelFifo) ? fifo_rdata                                               :
-    '{default: '0};
+  if (!hmac_en) begin
+    assign sha_rdata = fifo_rdata;
+  end else if (sel_rdata == SelIPad) begin
+    assign sha_rdata.data = i_pad[(BlockSize-1)-32*pad_index-:32];
+    assign sha_rdata.mask = '1;
+  end else if (sel_rdata == SelOPad) begin
+    assign sha_rdata.data = o_pad[(BlockSize-1)-32*pad_index-:32];
+    assign sha_rdata.mask = '1;
+  end else begin
+    assign sha_rdata = '0;
+  end
 
   assign sha_message_length = (!hmac_en)                 ? message_length             :
                               (sel_msglen == SelIPadMsg) ? message_length + BlockSize :
diff --git a/hw/ip/otbn/rtl/otbn_reg_top.sv b/hw/ip/otbn/rtl/otbn_reg_top.sv
index 052cb2f5a..b62227975 100644
--- a/hw/ip/otbn/rtl/otbn_reg_top.sv
+++ b/hw/ip/otbn/rtl/otbn_reg_top.sv
@@ -54,13 +54,13 @@ module otbn_reg_top (
   logic [1:0] reg_steer;
 
   // socket_1n connection
-  assign tl_reg_h2d = tl_socket_h2d[2];
-  assign tl_socket_d2h[2] = tl_reg_d2h;
+  assign tl_reg_h2d = tl_socket_h2d[0];
 
-  assign tl_win_o[0] = tl_socket_h2d[0];
-  assign tl_socket_d2h[0] = tl_win_i[0];
-  assign tl_win_o[1] = tl_socket_h2d[1];
-  assign tl_socket_d2h[1] = tl_win_i[1];
+  assign tl_win_o[0] = tl_socket_h2d[1];
+  assign tl_win_o[1] = tl_socket_h2d[2];
+  assign tl_socket_d2h[0] = tl_reg_d2h;
+  assign tl_socket_d2h[1] = tl_win_i[0];
+  assign tl_socket_d2h[2] = tl_win_i[1];
 
   // Create Socket_1n
   tlul_socket_1n #(
diff --git a/hw/ip/padctrl/rtl/padring.sv b/hw/ip/padctrl/rtl/padring.sv
index fc8b3d183..2b94b0d67 100644
--- a/hw/ip/padctrl/rtl/padring.sv
+++ b/hw/ip/padctrl/rtl/padring.sv
@@ -59,45 +59,6 @@ module padring import padctrl_reg_pkg::*; #(
   assign clk_usb_48mhz = clk_usb_48mhz_pad_i;
   assign rst_n         = rst_pad_ni;
 
-  prim_pad_wrapper #(
-    .AttrDw  ( AttrDw ),
-    .Variant ( 1      ) // input-only
-  ) i_clk_pad (
-    .inout_io ( clk   ),
-    .in_o     ( clk_o ),
-    .ie_i     ( 1'b1  ),
-    .out_i    ( 1'b0  ),
-    .oe_i     ( 1'b0  ),
-    .attr_i   (   '0  ),
-    .warl_o   (       )
-  );
-
-  prim_pad_wrapper #(
-    .AttrDw  ( AttrDw ),
-    .Variant ( 1      ) // input-only
-  ) i_clk_usb_48mhz_pad (
-    .inout_io ( clk_usb_48mhz   ),
-    .in_o     ( clk_usb_48mhz_o ),
-    .ie_i     ( 1'b1  ),
-    .out_i    ( 1'b0  ),
-    .oe_i     ( 1'b0  ),
-    .attr_i   (   '0  ),
-    .warl_o   (       )
-  );
-
-  prim_pad_wrapper #(
-    .AttrDw  ( AttrDw ),
-    .Variant ( 1      ) // input-only
-  ) i_rst_pad (
-    .inout_io ( rst_n  ),
-    .in_o     ( rst_no ),
-    .ie_i     ( 1'b1  ),
-    .out_i    ( 1'b0  ),
-    .oe_i     ( 1'b0  ),
-    .attr_i   (   '0  ),
-    .warl_o   (       )
-  );
-
   //////////////
   // MIO Pads //
   //////////////
diff --git a/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv b/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
index 962d3b559..9d5a10c8c 100644
--- a/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
+++ b/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
@@ -75,16 +75,9 @@ module prim_generic_pad_wrapper #(
     // received data driver
     assign in_o     = (ie_i) ? in  : 1'bz;
 `else
-    // different driver types
-    assign (strong0, strong1) inout_io = (oe && drv != DRIVE_00) ? out : 1'bz;
-    assign (pull0, pull1)     inout_io = (oe && drv == DRIVE_00) ? out : 1'bz;
-    // pullup / pulldown termination
-    assign (highz0, weak1)    inout_io = pe & ps;  // enabled and select = 1
-    assign (weak0, highz1)    inout_io = pe & ~ps; // enabled and select = 0
-    // fake trireg emulation
-    assign (weak0, weak1)     inout_io = (kp) ? inout_io : 1'bz;
+    assign inout_io = out;
     // received data driver
-    assign in_o     = (ie_i) ? in  : 1'bz;
+    assign in_o     = in;
 `endif
   end
 
diff --git a/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv b/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv
index a5669d597..4f39a8b53 100644
--- a/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv
+++ b/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv
@@ -35,19 +35,9 @@ package pwrmgr_pkg;
   } pwr_ast_rsp_t;
 
   // default value of pwr_ast_rsp (for dangling ports)
-  parameter pwr_ast_rsp_t PWR_AST_RSP_DEFAULT = '{
-    slow_clk_val: 2'b10,
-    core_clk_val: 2'b10,
-    io_clk_val: 2'b10,
-    main_pok: 1'b1
-  };
-
-  parameter pwr_ast_rsp_t PWR_AST_RSP_SYNC_DEFAULT = '{
-    slow_clk_val: 2'b01,
-    core_clk_val: 2'b01,
-    io_clk_val: 2'b10,
-    main_pok: 1'b0
-  };
+  parameter pwr_ast_rsp_t PWR_AST_RSP_DEFAULT = 7'b1010101;
+
+  parameter pwr_ast_rsp_t PWR_AST_RSP_SYNC_DEFAULT = 7'b0101100;
 
   // reasons for pwrmgr reset reset
   typedef enum logic [1:0] {
@@ -71,10 +61,7 @@ package pwrmgr_pkg;
   } pwr_rst_rsp_t;
 
   // default value (for dangling ports)
-  parameter pwr_rst_rsp_t PWR_RST_RSP_DEFAULT = '{
-    rst_lc_src_n: {PowerDomains{1'b1}},
-    rst_sys_src_n: {PowerDomains{1'b1}}
-  };
+  parameter pwr_rst_rsp_t PWR_RST_RSP_DEFAULT = 4'b1111;
 
   // pwrmgr to clkmgr
   typedef struct packed {
@@ -98,10 +85,7 @@ package pwrmgr_pkg;
   } pwr_otp_rsp_t;
 
   // default value (for dangling ports)
-  parameter pwr_otp_rsp_t PWR_OTP_RSP_DEFAULT = '{
-    otp_done: 1'b1,
-    otp_idle: 1'b1
-  };
+  parameter pwr_otp_rsp_t PWR_OTP_RSP_DEFAULT = 2'b11;
 
   // pwrmgr to lifecycle
   typedef struct packed {
@@ -115,10 +99,7 @@ package pwrmgr_pkg;
   } pwr_lc_rsp_t;
 
   // default value (for dangling ports)
-  parameter pwr_lc_rsp_t PWR_LC_RSP_DEFAULT = '{
-    lc_done: 1'b1,
-    lc_idle: 1'b1
-  };
+  parameter pwr_lc_rsp_t PWR_LC_RSP_DEFAULT = 2'b11;
 
   // flash to pwrmgr
   typedef struct packed {
@@ -126,9 +107,7 @@ package pwrmgr_pkg;
   } pwr_flash_t;
 
   // default value (for dangling ports)
-  parameter pwr_flash_t PWR_FLASH_DEFAULT = '{
-    flash_idle: 1'b1
-  };
+  parameter pwr_flash_t PWR_FLASH_DEFAULT = 1'b1;
 
   // processor to pwrmgr
   typedef struct packed {
@@ -136,13 +115,11 @@ package pwrmgr_pkg;
   } pwr_cpu_t;
 
   // default value (for dangling ports)
-  parameter pwr_cpu_t PWR_CPU_DEFAULT = '{
-    core_sleeping: 1'b0
-  };
+  parameter pwr_cpu_t PWR_CPU_DEFAULT = 1'b0;
 
   // default value (for dangling ports)
-  parameter int WAKEUPS_DEFAULT = '0;
-  parameter int RSTREQS_DEFAULT = '0;
+  parameter int WAKEUPS_DEFAULT = 0;
+  parameter int RSTREQS_DEFAULT = 0;
 
   // peripherals to pwrmgr
   typedef struct packed {
diff --git a/hw/ip/rstmgr/rtl/rstmgr_pkg.sv b/hw/ip/rstmgr/rtl/rstmgr_pkg.sv
index a07fcce61..ba1597049 100644
--- a/hw/ip/rstmgr/rtl/rstmgr_pkg.sv
+++ b/hw/ip/rstmgr/rtl/rstmgr_pkg.sv
@@ -24,10 +24,7 @@ package rstmgr_pkg;
   } rstmgr_ast_t;
 
   // default value for rstmgr_ast_rsp_t (for dangling ports)
-  parameter rstmgr_ast_t RSTMGR_AST_DEFAULT = '{
-    vcc_pok: 1'b1,
-    alw_pok: 1'b1
-  };
+  parameter rstmgr_ast_t RSTMGR_AST_DEFAULT = 2'b11;
 
   // resets generated and broadcast
   // This should be templatized and generated
@@ -51,10 +48,7 @@ package rstmgr_pkg;
   } rstmgr_cpu_t;
 
   // default value for rstmgr_ast_rsp_t (for dangling ports)
-  parameter rstmgr_cpu_t RSTMGR_CPU_DEFAULT = '{
-    rst_cpu_n: 1'b1,
-    ndmreset_req: '0
-  };
+  parameter rstmgr_cpu_t RSTMGR_CPU_DEFAULT = 2'b10;
 
   // peripherals reset requests
   typedef struct packed {
@@ -62,9 +56,7 @@ package rstmgr_pkg;
   } rstmgr_peri_t;
 
   // default value for rstmgr_ast_rsp_t (for dangling ports)
-  parameter rstmgr_peri_t RSTMGR_PERI_DEFAULT = '{
-    rst_reqs: '0
-  };
+  parameter rstmgr_peri_t RSTMGR_PERI_DEFAULT = 32'b00000000000000000000000000000000;
 
 
 endpackage // rstmgr_pkg
diff --git a/hw/ip/rv_timer/rtl/rv_timer.sv b/hw/ip/rv_timer/rtl/rv_timer.sv
index 9b939eedd..a4c91c238 100644
--- a/hw/ip/rv_timer/rtl/rv_timer.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer.sv
@@ -31,10 +31,10 @@ module rv_timer (
 
   logic [N_HARTS-1:0] tick;
 
-  logic [63:0] mtime_d  [N_HARTS];
-  logic [63:0] mtime    [N_HARTS];
-  logic [63:0] mtimecmp [N_HARTS][N_TIMERS]; // Only [harts][0] is connected to mtimecmp CSRs
-  logic        mtimecmp_update [N_HARTS][N_TIMERS];
+  logic [63:0] mtime_d  ;
+  logic [63:0] mtime    ;
+  logic [63:0] mtimecmp; // Only [harts][0] is connected to mtimecmp CSRs
+  logic        mtimecmp_update;
 
   logic [N_HARTS*N_TIMERS-1:0] intr_timer_set;
   logic [N_HARTS*N_TIMERS-1:0] intr_timer_en;
@@ -52,25 +52,25 @@ module rv_timer (
 
   // Once reggen supports nested multireg, the following can be automated. For the moment, it must
   // be connected manually.
-  assign active[0]  = reg2hw.ctrl[0].q;
+  assign active[0]  = reg2hw.ctrl.q;
   assign prescaler = '{reg2hw.cfg0.prescale.q};
   assign step      = '{reg2hw.cfg0.step.q};
 
   assign hw2reg.timer_v_upper0.de = tick[0];
   assign hw2reg.timer_v_lower0.de = tick[0];
-  assign hw2reg.timer_v_upper0.d = mtime_d[0][63:32];
-  assign hw2reg.timer_v_lower0.d = mtime_d[0][31: 0];
-  assign mtime[0] = {reg2hw.timer_v_upper0.q, reg2hw.timer_v_lower0.q};
+  assign hw2reg.timer_v_upper0.d = mtime_d[63:32];
+  assign hw2reg.timer_v_lower0.d = mtime_d[31: 0];
+  assign mtime = {reg2hw.timer_v_upper0.q, reg2hw.timer_v_lower0.q};
   assign mtimecmp = '{'{{reg2hw.compare_upper0_0.q,reg2hw.compare_lower0_0.q}}};
-  assign mtimecmp_update[0][0] = reg2hw.compare_upper0_0.qe | reg2hw.compare_lower0_0.qe;
+  assign mtimecmp_update = reg2hw.compare_upper0_0.qe | reg2hw.compare_lower0_0.qe;
 
   assign intr_timer_expired_0_0_o = intr_out[0];
-  assign intr_timer_en            = reg2hw.intr_enable0[0].q;
-  assign intr_timer_state_q       = reg2hw.intr_state0[0].q;
-  assign intr_timer_test_q        = reg2hw.intr_test0[0].q;
-  assign intr_timer_test_qe       = reg2hw.intr_test0[0].qe;
-  assign hw2reg.intr_state0[0].de = intr_timer_state_de | mtimecmp_update[0][0];
-  assign hw2reg.intr_state0[0].d  = intr_timer_state_d & ~mtimecmp_update[0][0];
+  assign intr_timer_en            = reg2hw.intr_enable0.q;
+  assign intr_timer_state_q       = reg2hw.intr_state0.q;
+  assign intr_timer_test_q        = reg2hw.intr_test0.q;
+  assign intr_timer_test_qe       = reg2hw.intr_test0.qe;
+  assign hw2reg.intr_state0.de = intr_timer_state_de | mtimecmp_update;
+  assign hw2reg.intr_state0.d  = intr_timer_state_d & ~mtimecmp_update;
 
 
   for (genvar h = 0 ; h < N_HARTS ; h++) begin : gen_harts
@@ -96,14 +96,14 @@ module rv_timer (
       .rst_ni,
 
       .active    (active[h]),
-      .prescaler (prescaler[h]),
-      .step      (step[h]),
+      .prescaler (prescaler),
+      .step      (step),
 
       .tick      (tick[h]),
 
-      .mtime_d   (mtime_d[h]),
-      .mtime     (mtime[h]),
-      .mtimecmp  (mtimecmp[h]),
+      .mtime_d   (mtime_d),
+      .mtime     (mtime),
+      .mtimecmp  (mtimecmp),
 
       .intr      (intr_timer_set[h*N_TIMERS+:N_TIMERS])
     );
diff --git a/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv b/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
index 2addad698..37e6d79c4 100644
--- a/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
@@ -78,15 +78,15 @@ package rv_timer_reg_pkg;
   // Register to internal design logic //
   ///////////////////////////////////////
   typedef struct packed {
-    rv_timer_reg2hw_ctrl_mreg_t [0:0] ctrl; // [154:154]
+    rv_timer_reg2hw_ctrl_mreg_t ctrl; // [154:154]
     rv_timer_reg2hw_cfg0_reg_t cfg0; // [153:134]
     rv_timer_reg2hw_timer_v_lower0_reg_t timer_v_lower0; // [133:102]
     rv_timer_reg2hw_timer_v_upper0_reg_t timer_v_upper0; // [101:70]
     rv_timer_reg2hw_compare_lower0_0_reg_t compare_lower0_0; // [69:37]
     rv_timer_reg2hw_compare_upper0_0_reg_t compare_upper0_0; // [36:4]
-    rv_timer_reg2hw_intr_enable0_mreg_t [0:0] intr_enable0; // [3:3]
-    rv_timer_reg2hw_intr_state0_mreg_t [0:0] intr_state0; // [2:2]
-    rv_timer_reg2hw_intr_test0_mreg_t [0:0] intr_test0; // [1:0]
+    rv_timer_reg2hw_intr_enable0_mreg_t intr_enable0; // [3:3]
+    rv_timer_reg2hw_intr_state0_mreg_t intr_state0; // [2:2]
+    rv_timer_reg2hw_intr_test0_mreg_t intr_test0; // [1:0]
   } rv_timer_reg2hw_t;
 
   ///////////////////////////////////////
@@ -95,7 +95,7 @@ package rv_timer_reg_pkg;
   typedef struct packed {
     rv_timer_hw2reg_timer_v_lower0_reg_t timer_v_lower0; // [67:36]
     rv_timer_hw2reg_timer_v_upper0_reg_t timer_v_upper0; // [35:4]
-    rv_timer_hw2reg_intr_state0_mreg_t [0:0] intr_state0; // [3:2]
+    rv_timer_hw2reg_intr_state0_mreg_t intr_state0; // [3:2]
   } rv_timer_hw2reg_t;
 
   // Register Address
diff --git a/hw/ip/tlul/rtl/tlul_adapter_sram.sv b/hw/ip/tlul/rtl/tlul_adapter_sram.sv
index 6e2f33191..2820baadd 100644
--- a/hw/ip/tlul/rtl/tlul_adapter_sram.sv
+++ b/hw/ip/tlul/rtl/tlul_adapter_sram.sv
@@ -134,20 +134,17 @@ module tlul_adapter_sram #(
     end
   end
 
-  assign tl_o = '{
-      d_valid  : d_valid ,
-      d_opcode : (d_valid && reqfifo_rdata.op != OpRead) ? AccessAck : AccessAckData,
-      d_param  : '0,
-      d_size   : (d_valid) ? reqfifo_rdata.size : '0,
-      d_source : (d_valid) ? reqfifo_rdata.source : '0,
-      d_sink   : 1'b0,
-      d_data   : (d_valid && rspfifo_rvalid && reqfifo_rdata.op == OpRead)
-                 ? rspfifo_rdata.data : '0,
-      d_user   : '0,
-      d_error  : d_valid && d_error,
-
-      a_ready  : (gnt_i | error_internal) & reqfifo_wready & sramreqfifo_wready
-  };
+  assign tl_o.d_valid   = d_valid;
+  assign tl_o.d_opcode  = (d_valid && reqfifo_rdata.op != OpRead) ? AccessAck : AccessAckData;
+  assign tl_o.d_param   = '0;
+  assign tl_o.d_size    = (d_valid) ? reqfifo_rdata.size : '0;
+  assign tl_o.d_source  = (d_valid) ? reqfifo_rdata.source : '0;
+  assign tl_o.d_sink    = 1'b0;
+  assign tl_o.d_data    = (d_valid && rspfifo_rvalid && reqfifo_rdata.op == OpRead) ? rspfifo_rdata.data : '0;
+  assign tl_o.d_user    = '0;
+  assign tl_o.d_error   = d_valid && d_error;
+
+  assign tl_o.a_ready   = (gnt_i | error_internal) & reqfifo_wready & sramreqfifo_wready;
 
   // a_ready depends on the FIFO full condition and grant from SRAM (or SRAM arbiter)
   // assemble response, including read response, write response, and error for unsupported stuff
@@ -171,8 +168,8 @@ module tlul_adapter_sram #(
   end
 
   // Convert byte mask to SRAM bit mask for writes, and only forward valid data
-  logic [WidthMult-1:0][top_pkg::TL_DW-1:0] wmask_int;
-  logic [WidthMult-1:0][top_pkg::TL_DW-1:0] wdata_int;
+  logic [(WidthMult * top_pkg::TL_DW) - 1:0] wmask_int;
+  logic [(WidthMult * top_pkg::TL_DW) - 1:0] wdata_int;
 
   always_comb begin
     wmask_int = '0;
@@ -180,8 +177,8 @@ module tlul_adapter_sram #(
 
     if (tl_i.a_valid) begin
       for (int i = 0 ; i < top_pkg::TL_DW/8 ; i++) begin
-        wmask_int[woffset][8*i +: 8] = {8{tl_i.a_mask[i]}};
-        wdata_int[woffset][8*i +: 8] = (tl_i.a_mask[i] && we_o) ? tl_i.a_data[8*i+:8] : '0;
+        wmask_int[(woffset * top_pkg::TL_DW) + (8 * i) +: 8] = {8{tl_i.a_mask[i]}};
+        wdata_int[(woffset * top_pkg::TL_DW) + (8 * i) +: 8] = (tl_i.a_mask[i] && we_o) ? tl_i.a_data[8*i+:8] : '0;
       end
     end
   end
@@ -221,19 +218,15 @@ module tlul_adapter_sram #(
   // End: Request Error Detection
 
   assign reqfifo_wvalid = a_ack ; // Push to FIFO only when granted
-  assign reqfifo_wdata  = '{
-    op:     (tl_i.a_opcode != Get) ? OpWrite : OpRead, // To return AccessAck for opcode error
-    error:  error_internal,
-    size:   tl_i.a_size,
-    source: tl_i.a_source
-  }; // Store the request only. Doesn't have to store data
+  assign reqfifo_wdata.op      = (tl_i.a_opcode != Get) ? OpWrite : OpRead; // To return AccessAck for opcode error
+  assign reqfifo_wdata.error   = error_internal;
+  assign reqfifo_wdata.size    = tl_i.a_size;
+  assign reqfifo_wdata.source  = tl_i.a_source;
   assign reqfifo_rready = d_ack ;
 
   // push together with ReqFIFO, pop upon returning read
-  assign sramreqfifo_wdata = '{
-    mask    : tl_i.a_mask,
-    woffset : woffset
-  };
+  assign sramreqfifo_wdata.mask     = tl_i.a_mask;
+  assign sramreqfifo_wdata.woffset  = woffset;
   assign sramreqfifo_wvalid = sram_ack & ~we_o;
   assign sramreqfifo_rready = rspfifo_wvalid;
 
@@ -241,26 +234,23 @@ module tlul_adapter_sram #(
 
   // Make sure only requested bytes are forwarded
   logic [SramDw-1:0] rdata;
-  logic [WidthMult-1:0][top_pkg::TL_DW-1:0] rmask;
+  logic [(WidthMult * top_pkg::TL_DW) - 1:0] rmask;
   //logic [SramDw-1:0] rmask;
   logic [top_pkg::TL_DW-1:0] rdata_tlword;
 
   always_comb begin
     rmask = '0;
     for (int i = 0 ; i < top_pkg::TL_DW/8 ; i++) begin
-      rmask[sramreqfifo_rdata.woffset][8*i +: 8] = {8{sramreqfifo_rdata.mask[i]}};
+      rmask[(sramreqfifo_rdata.woffset * top_pkg::TL_DW) + (8 * i) +: 8] = {8{sramreqfifo_rdata.mask[i]}};
     end
   end
 
   assign rdata = rdata_i & rmask;
   assign rdata_tlword = rdata[sramreqfifo_rdata.woffset * top_pkg::TL_DW +: top_pkg::TL_DW];
 
-  assign rspfifo_wdata  = '{
-    data : rdata_tlword,
-    error: rerror_i[1] // Only care for Uncorrectable error
-  };
-  assign rspfifo_rready = (reqfifo_rdata.op == OpRead & ~reqfifo_rdata.error)
-                        ? reqfifo_rready : 1'b0 ;
+  assign rspfifo_wdata.data   = rdata_tlword;
+  assign rspfifo_wdata.error  = rerror_i[1]; // Only care for Uncorrectable error
+  assign rspfifo_rready = (reqfifo_rdata.op == OpRead & ~reqfifo_rdata.error) ? reqfifo_rready : 1'b0 ;
 
   // FIFO instance: REQ, RSP
 
diff --git a/hw/ip/tlul/rtl/tlul_socket_m1.sv b/hw/ip/tlul/rtl/tlul_socket_m1.sv
index 8637ad221..a3c29e293 100644
--- a/hw/ip/tlul/rtl/tlul_socket_m1.sv
+++ b/hw/ip/tlul/rtl/tlul_socket_m1.sv
@@ -105,18 +105,16 @@ module tlul_socket_m1 #(
     assign unused_tl_h_source = tl_h_i[i].a_source[IDW-1 -: STIDW];
 
     // Put shifted ID
-    assign hreq_fifo_i = '{
-      a_valid:    tl_h_i[i].a_valid,
-      a_opcode:   tl_h_i[i].a_opcode,
-      a_param:    tl_h_i[i].a_param,
-      a_size:     tl_h_i[i].a_size,
-      a_source:   shifted_id,
-      a_address:  tl_h_i[i].a_address,
-      a_mask:     tl_h_i[i].a_mask,
-      a_data:     tl_h_i[i].a_data,
-      a_user:     tl_h_i[i].a_user,
-      d_ready:    tl_h_i[i].d_ready
-    };
+    assign hreq_fifo_i.a_valid = tl_h_i[i].a_valid;
+    assign hreq_fifo_i.a_opcode = tl_h_i[i].a_opcode;
+    assign hreq_fifo_i.a_param = tl_h_i[i].a_param;
+    assign hreq_fifo_i.a_size = tl_h_i[i].a_size;
+    assign hreq_fifo_i.a_source = shifted_id;
+    assign hreq_fifo_i.a_address = tl_h_i[i].a_address;
+    assign hreq_fifo_i.a_mask = tl_h_i[i].a_mask;
+    assign hreq_fifo_i.a_data = tl_h_i[i].a_data;
+    assign hreq_fifo_i.a_user = tl_h_i[i].a_user;
+    assign hreq_fifo_i.d_ready = tl_h_i[i].d_ready;
 
     tlul_fifo_sync #(
       .ReqPass    (HReqPass[i]),
@@ -237,18 +235,16 @@ module tlul_socket_m1 #(
                                (drsp_fifo_o.d_source[0+:STIDW] == i) &
                               drsp_fifo_o.d_valid;
 
-    assign hrsp_fifo_i[i] = '{
-      d_valid:  hfifo_rspvalid[i],
-      d_opcode: drsp_fifo_o.d_opcode,
-      d_param:  drsp_fifo_o.d_param,
-      d_size:   drsp_fifo_o.d_size,
-      d_source: hfifo_rspid,
-      d_sink:   drsp_fifo_o.d_sink,
-      d_data:   drsp_fifo_o.d_data,
-      d_user:   drsp_fifo_o.d_user,
-      d_error:  drsp_fifo_o.d_error,
-      a_ready:  hgrant[i]
-    };
+    assign hrsp_fifo_i[i].d_valid = hfifo_rspvalid[i];
+    assign hrsp_fifo_i[i].d_opcode = drsp_fifo_o.d_opcode;
+    assign hrsp_fifo_i[i].d_param = drsp_fifo_o.d_param;
+    assign hrsp_fifo_i[i].d_size = drsp_fifo_o.d_size;
+    assign hrsp_fifo_i[i].d_source = hfifo_rspid;
+    assign hrsp_fifo_i[i].d_sink = drsp_fifo_o.d_sink;
+    assign hrsp_fifo_i[i].d_data = drsp_fifo_o.d_data;
+    assign hrsp_fifo_i[i].d_user = drsp_fifo_o.d_user;
+    assign hrsp_fifo_i[i].d_error = drsp_fifo_o.d_error;
+    assign hrsp_fifo_i[i].a_ready = hgrant[i];
   end
 
   // this assertion fails when rspid[0+:STIDW] not in [0..M-1]
diff --git a/hw/top_earlgrey/ip/alert_handler/rtl/autogen/alert_handler_reg_top.sv b/hw/top_earlgrey/ip/alert_handler/rtl/autogen/alert_handler_reg_top.sv
index e6d74c618..11fdb8248 100644
--- a/hw/top_earlgrey/ip/alert_handler/rtl/autogen/alert_handler_reg_top.sv
+++ b/hw/top_earlgrey/ip/alert_handler/rtl/autogen/alert_handler_reg_top.sv
@@ -14,8 +14,8 @@ module alert_handler_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output alert_handler_reg_pkg::alert_handler_reg2hw_t reg2hw, // Write
-  input  alert_handler_reg_pkg::alert_handler_hw2reg_t hw2reg, // Read
+  output wire [844:0] reg2hw,
+  input wire [237:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -427,3169 +427,1803 @@ module alert_handler_reg_top (
   logic [2:0] classd_state_qs;
   logic classd_state_re;
 
-  // Register instances
-  // R[intr_state]: V(False)
-
-  //   F[classa]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_classa (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_classa_we),
-    .wd     (intr_state_classa_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.classa.de),
-    .d      (hw2reg.intr_state.classa.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.classa.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_classa_qs)
-  );
-
-
-  //   F[classb]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_classb (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_classb_we),
-    .wd     (intr_state_classb_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.classb.de),
-    .d      (hw2reg.intr_state.classb.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.classb.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_classb_qs)
-  );
-
-
-  //   F[classc]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_classc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_classc_we),
-    .wd     (intr_state_classc_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.classc.de),
-    .d      (hw2reg.intr_state.classc.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.classc.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_classc_qs)
-  );
-
-
-  //   F[classd]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_classd (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_classd_we),
-    .wd     (intr_state_classd_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.classd.de),
-    .d      (hw2reg.intr_state.classd.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.classd.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_classd_qs)
-  );
-
-
-  // R[intr_enable]: V(False)
-
-  //   F[classa]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_classa (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_classa_we),
-    .wd     (intr_enable_classa_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.classa.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_classa_qs)
-  );
-
-
-  //   F[classb]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_classb (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_classb_we),
-    .wd     (intr_enable_classb_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.classb.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_classb_qs)
-  );
-
-
-  //   F[classc]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_classc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_classc_we),
-    .wd     (intr_enable_classc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.classc.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_classc_qs)
-  );
-
-
-  //   F[classd]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_classd (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_classd_we),
-    .wd     (intr_enable_classd_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.classd.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_classd_qs)
-  );
-
-
-  // R[intr_test]: V(True)
-
-  //   F[classa]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_classa (
-    .re     (1'b0),
-    .we     (intr_test_classa_we),
-    .wd     (intr_test_classa_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.classa.qe),
-    .q      (reg2hw.intr_test.classa.q ),
-    .qs     ()
-  );
-
-
-  //   F[classb]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_classb (
-    .re     (1'b0),
-    .we     (intr_test_classb_we),
-    .wd     (intr_test_classb_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.classb.qe),
-    .q      (reg2hw.intr_test.classb.q ),
-    .qs     ()
-  );
-
-
-  //   F[classc]: 2:2
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_classc (
-    .re     (1'b0),
-    .we     (intr_test_classc_we),
-    .wd     (intr_test_classc_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.classc.qe),
-    .q      (reg2hw.intr_test.classc.q ),
-    .qs     ()
-  );
-
-
-  //   F[classd]: 3:3
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_classd (
-    .re     (1'b0),
-    .we     (intr_test_classd_we),
-    .wd     (intr_test_classd_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.classd.qe),
-    .q      (reg2hw.intr_test.classd.q ),
-    .qs     ()
-  );
-
-
-  // R[regen]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h1)
-  ) u_regen (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (regen_we),
-    .wd     (regen_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.regen.q ),
-
-    // to register interface (read)
-    .qs     (regen_qs)
-  );
-
-
-  // R[ping_timeout_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (24),
-    .SWACCESS("RW"),
-    .RESVAL  (24'h20)
-  ) u_ping_timeout_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (ping_timeout_cyc_we & regen_qs),
-    .wd     (ping_timeout_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ping_timeout_cyc.q ),
-
-    // to register interface (read)
-    .qs     (ping_timeout_cyc_qs)
-  );
-
-
-
-  // Subregister 0 of Multireg alert_en
-  // R[alert_en]: V(False)
-
-  // F[en_a0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_alert_en_en_a0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_en_en_a0_we & regen_qs),
-    .wd     (alert_en_en_a0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_en[0].q ),
-
-    // to register interface (read)
-    .qs     (alert_en_en_a0_qs)
-  );
-
-
-  // F[en_a1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_alert_en_en_a1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_en_en_a1_we & regen_qs),
-    .wd     (alert_en_en_a1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_en[1].q ),
-
-    // to register interface (read)
-    .qs     (alert_en_en_a1_qs)
-  );
-
-
-  // F[en_a2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_alert_en_en_a2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_en_en_a2_we & regen_qs),
-    .wd     (alert_en_en_a2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_en[2].q ),
-
-    // to register interface (read)
-    .qs     (alert_en_en_a2_qs)
-  );
-
-
-  // F[en_a3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_alert_en_en_a3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_en_en_a3_we & regen_qs),
-    .wd     (alert_en_en_a3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_en[3].q ),
-
-    // to register interface (read)
-    .qs     (alert_en_en_a3_qs)
-  );
-
-
-  // F[en_a4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_alert_en_en_a4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_en_en_a4_we & regen_qs),
-    .wd     (alert_en_en_a4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_en[4].q ),
-
-    // to register interface (read)
-    .qs     (alert_en_en_a4_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg alert_class
-  // R[alert_class]: V(False)
-
-  // F[class_a0]: 1:0
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_alert_class_class_a0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_class_class_a0_we & regen_qs),
-    .wd     (alert_class_class_a0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_class[0].q ),
-
-    // to register interface (read)
-    .qs     (alert_class_class_a0_qs)
-  );
-
-
-  // F[class_a1]: 3:2
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_alert_class_class_a1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_class_class_a1_we & regen_qs),
-    .wd     (alert_class_class_a1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_class[1].q ),
-
-    // to register interface (read)
-    .qs     (alert_class_class_a1_qs)
-  );
-
-
-  // F[class_a2]: 5:4
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_alert_class_class_a2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_class_class_a2_we & regen_qs),
-    .wd     (alert_class_class_a2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_class[2].q ),
-
-    // to register interface (read)
-    .qs     (alert_class_class_a2_qs)
-  );
-
-
-  // F[class_a3]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_alert_class_class_a3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_class_class_a3_we & regen_qs),
-    .wd     (alert_class_class_a3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_class[3].q ),
-
-    // to register interface (read)
-    .qs     (alert_class_class_a3_qs)
-  );
-
-
-  // F[class_a4]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_alert_class_class_a4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (alert_class_class_a4_we & regen_qs),
-    .wd     (alert_class_class_a4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_class[4].q ),
-
-    // to register interface (read)
-    .qs     (alert_class_class_a4_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg alert_cause
-  // R[alert_cause]: V(False)
-
-  // F[a0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_alert_cause_a0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (alert_cause_a0_we),
-    .wd     (alert_cause_a0_wd),
-
-    // from internal hardware
-    .de     (hw2reg.alert_cause[0].de),
-    .d      (hw2reg.alert_cause[0].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_cause[0].q ),
-
-    // to register interface (read)
-    .qs     (alert_cause_a0_qs)
-  );
-
-
-  // F[a1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_alert_cause_a1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (alert_cause_a1_we),
-    .wd     (alert_cause_a1_wd),
-
-    // from internal hardware
-    .de     (hw2reg.alert_cause[1].de),
-    .d      (hw2reg.alert_cause[1].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_cause[1].q ),
-
-    // to register interface (read)
-    .qs     (alert_cause_a1_qs)
-  );
-
-
-  // F[a2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_alert_cause_a2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (alert_cause_a2_we),
-    .wd     (alert_cause_a2_wd),
-
-    // from internal hardware
-    .de     (hw2reg.alert_cause[2].de),
-    .d      (hw2reg.alert_cause[2].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_cause[2].q ),
-
-    // to register interface (read)
-    .qs     (alert_cause_a2_qs)
-  );
-
-
-  // F[a3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_alert_cause_a3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (alert_cause_a3_we),
-    .wd     (alert_cause_a3_wd),
-
-    // from internal hardware
-    .de     (hw2reg.alert_cause[3].de),
-    .d      (hw2reg.alert_cause[3].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_cause[3].q ),
-
-    // to register interface (read)
-    .qs     (alert_cause_a3_qs)
-  );
-
-
-  // F[a4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_alert_cause_a4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (alert_cause_a4_we),
-    .wd     (alert_cause_a4_wd),
-
-    // from internal hardware
-    .de     (hw2reg.alert_cause[4].de),
-    .d      (hw2reg.alert_cause[4].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.alert_cause[4].q ),
-
-    // to register interface (read)
-    .qs     (alert_cause_a4_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg loc_alert_en
-  // R[loc_alert_en]: V(False)
-
-  // F[en_la0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_en_en_la0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_en_en_la0_we & regen_qs),
-    .wd     (loc_alert_en_en_la0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_en[0].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_en_en_la0_qs)
-  );
-
-
-  // F[en_la1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_en_en_la1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_en_en_la1_we & regen_qs),
-    .wd     (loc_alert_en_en_la1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_en[1].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_en_en_la1_qs)
-  );
-
-
-  // F[en_la2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_en_en_la2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_en_en_la2_we & regen_qs),
-    .wd     (loc_alert_en_en_la2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_en[2].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_en_en_la2_qs)
-  );
-
-
-  // F[en_la3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_en_en_la3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_en_en_la3_we & regen_qs),
-    .wd     (loc_alert_en_en_la3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_en[3].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_en_en_la3_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg loc_alert_class
-  // R[loc_alert_class]: V(False)
-
-  // F[class_la0]: 1:0
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_loc_alert_class_class_la0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_class_class_la0_we & regen_qs),
-    .wd     (loc_alert_class_class_la0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_class[0].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_class_class_la0_qs)
-  );
-
-
-  // F[class_la1]: 3:2
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_loc_alert_class_class_la1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_class_class_la1_we & regen_qs),
-    .wd     (loc_alert_class_class_la1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_class[1].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_class_class_la1_qs)
-  );
-
-
-  // F[class_la2]: 5:4
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_loc_alert_class_class_la2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_class_class_la2_we & regen_qs),
-    .wd     (loc_alert_class_class_la2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_class[2].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_class_class_la2_qs)
-  );
-
-
-  // F[class_la3]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_loc_alert_class_class_la3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (loc_alert_class_class_la3_we & regen_qs),
-    .wd     (loc_alert_class_class_la3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_class[3].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_class_class_la3_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg loc_alert_cause
-  // R[loc_alert_cause]: V(False)
-
-  // F[la0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_cause_la0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (loc_alert_cause_la0_we),
-    .wd     (loc_alert_cause_la0_wd),
-
-    // from internal hardware
-    .de     (hw2reg.loc_alert_cause[0].de),
-    .d      (hw2reg.loc_alert_cause[0].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_cause[0].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_cause_la0_qs)
-  );
-
-
-  // F[la1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_cause_la1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (loc_alert_cause_la1_we),
-    .wd     (loc_alert_cause_la1_wd),
-
-    // from internal hardware
-    .de     (hw2reg.loc_alert_cause[1].de),
-    .d      (hw2reg.loc_alert_cause[1].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_cause[1].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_cause_la1_qs)
-  );
-
-
-  // F[la2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_cause_la2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (loc_alert_cause_la2_we),
-    .wd     (loc_alert_cause_la2_wd),
-
-    // from internal hardware
-    .de     (hw2reg.loc_alert_cause[2].de),
-    .d      (hw2reg.loc_alert_cause[2].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_cause[2].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_cause_la2_qs)
-  );
-
-
-  // F[la3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_loc_alert_cause_la3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (loc_alert_cause_la3_we),
-    .wd     (loc_alert_cause_la3_wd),
-
-    // from internal hardware
-    .de     (hw2reg.loc_alert_cause[3].de),
-    .d      (hw2reg.loc_alert_cause[3].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.loc_alert_cause[3].q ),
-
-    // to register interface (read)
-    .qs     (loc_alert_cause_la3_qs)
-  );
-
-
-
-  // R[classa_ctrl]: V(False)
-
-  //   F[en]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classa_ctrl_en (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_en_we & regen_qs),
-    .wd     (classa_ctrl_en_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.en.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_en_qs)
-  );
-
-
-  //   F[lock]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classa_ctrl_lock (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_lock_we & regen_qs),
-    .wd     (classa_ctrl_lock_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.lock.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_lock_qs)
-  );
-
-
-  //   F[en_e0]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classa_ctrl_en_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_en_e0_we & regen_qs),
-    .wd     (classa_ctrl_en_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.en_e0.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_en_e0_qs)
-  );
-
-
-  //   F[en_e1]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classa_ctrl_en_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_en_e1_we & regen_qs),
-    .wd     (classa_ctrl_en_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.en_e1.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_en_e1_qs)
-  );
-
-
-  //   F[en_e2]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classa_ctrl_en_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_en_e2_we & regen_qs),
-    .wd     (classa_ctrl_en_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.en_e2.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_en_e2_qs)
-  );
-
-
-  //   F[en_e3]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classa_ctrl_en_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_en_e3_we & regen_qs),
-    .wd     (classa_ctrl_en_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.en_e3.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_en_e3_qs)
-  );
-
-
-  //   F[map_e0]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_classa_ctrl_map_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_map_e0_we & regen_qs),
-    .wd     (classa_ctrl_map_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.map_e0.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_map_e0_qs)
-  );
-
-
-  //   F[map_e1]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h1)
-  ) u_classa_ctrl_map_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_map_e1_we & regen_qs),
-    .wd     (classa_ctrl_map_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.map_e1.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_map_e1_qs)
-  );
-
-
-  //   F[map_e2]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_classa_ctrl_map_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_map_e2_we & regen_qs),
-    .wd     (classa_ctrl_map_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.map_e2.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_map_e2_qs)
-  );
-
-
-  //   F[map_e3]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h3)
-  ) u_classa_ctrl_map_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_ctrl_map_e3_we & regen_qs),
-    .wd     (classa_ctrl_map_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_ctrl.map_e3.q ),
-
-    // to register interface (read)
-    .qs     (classa_ctrl_map_e3_qs)
-  );
-
-
-  // R[classa_clren]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h1)
-  ) u_classa_clren (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (classa_clren_we),
-    .wd     (classa_clren_wd),
-
-    // from internal hardware
-    .de     (hw2reg.classa_clren.de),
-    .d      (hw2reg.classa_clren.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (classa_clren_qs)
-  );
-
-
-  // R[classa_clr]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_classa_clr (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_clr_we & classa_clren_qs),
-    .wd     (classa_clr_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.classa_clr.qe),
-    .q      (reg2hw.classa_clr.q ),
-
-    .qs     ()
-  );
-
-
-  // R[classa_accum_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (16)
-  ) u_classa_accum_cnt (
-    .re     (classa_accum_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classa_accum_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classa_accum_cnt_qs)
-  );
-
-
-  // R[classa_accum_thresh]: V(False)
-
-  prim_subreg #(
-    .DW      (16),
-    .SWACCESS("RW"),
-    .RESVAL  (16'h0)
-  ) u_classa_accum_thresh (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_accum_thresh_we & regen_qs),
-    .wd     (classa_accum_thresh_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_accum_thresh.q ),
-
-    // to register interface (read)
-    .qs     (classa_accum_thresh_qs)
-  );
-
-
-  // R[classa_timeout_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classa_timeout_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_timeout_cyc_we & regen_qs),
-    .wd     (classa_timeout_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_timeout_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classa_timeout_cyc_qs)
-  );
-
-
-  // R[classa_phase0_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classa_phase0_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_phase0_cyc_we & regen_qs),
-    .wd     (classa_phase0_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_phase0_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classa_phase0_cyc_qs)
-  );
-
-
-  // R[classa_phase1_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classa_phase1_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_phase1_cyc_we & regen_qs),
-    .wd     (classa_phase1_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_phase1_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classa_phase1_cyc_qs)
-  );
-
-
-  // R[classa_phase2_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classa_phase2_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_phase2_cyc_we & regen_qs),
-    .wd     (classa_phase2_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_phase2_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classa_phase2_cyc_qs)
-  );
-
-
-  // R[classa_phase3_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classa_phase3_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classa_phase3_cyc_we & regen_qs),
-    .wd     (classa_phase3_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classa_phase3_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classa_phase3_cyc_qs)
-  );
-
-
-  // R[classa_esc_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_classa_esc_cnt (
-    .re     (classa_esc_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classa_esc_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classa_esc_cnt_qs)
-  );
-
-
-  // R[classa_state]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_classa_state (
-    .re     (classa_state_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classa_state.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classa_state_qs)
-  );
-
-
-  // R[classb_ctrl]: V(False)
-
-  //   F[en]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classb_ctrl_en (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_en_we & regen_qs),
-    .wd     (classb_ctrl_en_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.en.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_en_qs)
-  );
-
-
-  //   F[lock]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classb_ctrl_lock (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_lock_we & regen_qs),
-    .wd     (classb_ctrl_lock_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.lock.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_lock_qs)
-  );
-
-
-  //   F[en_e0]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classb_ctrl_en_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_en_e0_we & regen_qs),
-    .wd     (classb_ctrl_en_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.en_e0.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_en_e0_qs)
-  );
-
-
-  //   F[en_e1]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classb_ctrl_en_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_en_e1_we & regen_qs),
-    .wd     (classb_ctrl_en_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.en_e1.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_en_e1_qs)
-  );
-
-
-  //   F[en_e2]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classb_ctrl_en_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_en_e2_we & regen_qs),
-    .wd     (classb_ctrl_en_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.en_e2.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_en_e2_qs)
-  );
-
-
-  //   F[en_e3]: 5:5
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classb_ctrl_en_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_en_e3_we & regen_qs),
-    .wd     (classb_ctrl_en_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.en_e3.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_en_e3_qs)
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_intr_state_classa(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_state_classa_we),
+      .wd(intr_state_classa_wd),
+      .de(hw2reg[236]),
+      .d(hw2reg[237]),
+      .qe(),
+      .q(reg2hw[844]),
+      .qs(intr_state_classa_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_intr_state_classb(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_state_classb_we),
+      .wd(intr_state_classb_wd),
+      .de(hw2reg[234]),
+      .d(hw2reg[235]),
+      .qe(),
+      .q(reg2hw[843]),
+      .qs(intr_state_classb_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_intr_state_classc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_state_classc_we),
+      .wd(intr_state_classc_wd),
+      .de(hw2reg[232]),
+      .d(hw2reg[233]),
+      .qe(),
+      .q(reg2hw[842]),
+      .qs(intr_state_classc_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_intr_state_classd(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_state_classd_we),
+      .wd(intr_state_classd_wd),
+      .de(hw2reg[230]),
+      .d(hw2reg[231]),
+      .qe(),
+      .q(reg2hw[841]),
+      .qs(intr_state_classd_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_intr_enable_classa(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_enable_classa_we),
+      .wd(intr_enable_classa_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[840]),
+      .qs(intr_enable_classa_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_intr_enable_classb(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_enable_classb_we),
+      .wd(intr_enable_classb_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[839]),
+      .qs(intr_enable_classb_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_intr_enable_classc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_enable_classc_we),
+      .wd(intr_enable_classc_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[838]),
+      .qs(intr_enable_classc_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_intr_enable_classd(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(intr_enable_classd_we),
+      .wd(intr_enable_classd_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[837]),
+      .qs(intr_enable_classd_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_classa(
+      .re(1'b0),
+      .we(intr_test_classa_we),
+      .wd(intr_test_classa_wd),
+      .d(1'b0),
+      .qre(),
+      .qe(reg2hw[835]),
+      .q(reg2hw[836]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_classb(
+      .re(1'b0),
+      .we(intr_test_classb_we),
+      .wd(intr_test_classb_wd),
+      .d(1'b0),
+      .qre(),
+      .qe(reg2hw[833]),
+      .q(reg2hw[834]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_classc(
+      .re(1'b0),
+      .we(intr_test_classc_we),
+      .wd(intr_test_classc_wd),
+      .d(1'b0),
+      .qre(),
+      .qe(reg2hw[831]),
+      .q(reg2hw[832]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_classd(
+      .re(1'b0),
+      .we(intr_test_classd_we),
+      .wd(intr_test_classd_wd),
+      .d(1'b0),
+      .qre(),
+      .qe(reg2hw[829]),
+      .q(reg2hw[830]),
+      .qs()
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h1)
+  ) u_regen(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(regen_we),
+      .wd(regen_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[828]),
+      .qs(regen_qs)
+  );
+  prim_subreg #(
+      .DW(24),
+      .SWACCESS("RW"),
+      .RESVAL(24'h000020)
+  ) u_ping_timeout_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(ping_timeout_cyc_we & regen_qs),
+      .wd(ping_timeout_cyc_wd),
+      .de(1'b0),
+      .d({24 {1'b0}}),
+      .qe(),
+      .q(reg2hw[827-:24]),
+      .qs(ping_timeout_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_alert_en_en_a0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_en_en_a0_we & regen_qs),
+      .wd(alert_en_en_a0_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[799]),
+      .qs(alert_en_en_a0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_alert_en_en_a1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_en_en_a1_we & regen_qs),
+      .wd(alert_en_en_a1_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[800]),
+      .qs(alert_en_en_a1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_alert_en_en_a2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_en_en_a2_we & regen_qs),
+      .wd(alert_en_en_a2_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[801]),
+      .qs(alert_en_en_a2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_alert_en_en_a3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_en_en_a3_we & regen_qs),
+      .wd(alert_en_en_a3_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[802]),
+      .qs(alert_en_en_a3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_alert_en_en_a4(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_en_en_a4_we & regen_qs),
+      .wd(alert_en_en_a4_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[803]),
+      .qs(alert_en_en_a4_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_alert_class_class_a0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_class_class_a0_we & regen_qs),
+      .wd(alert_class_class_a0_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[790-:2]),
+      .qs(alert_class_class_a0_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_alert_class_class_a1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_class_class_a1_we & regen_qs),
+      .wd(alert_class_class_a1_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[792-:2]),
+      .qs(alert_class_class_a1_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_alert_class_class_a2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_class_class_a2_we & regen_qs),
+      .wd(alert_class_class_a2_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[794-:2]),
+      .qs(alert_class_class_a2_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_alert_class_class_a3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_class_class_a3_we & regen_qs),
+      .wd(alert_class_class_a3_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[796-:2]),
+      .qs(alert_class_class_a3_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_alert_class_class_a4(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_class_class_a4_we & regen_qs),
+      .wd(alert_class_class_a4_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[798-:2]),
+      .qs(alert_class_class_a4_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_alert_cause_a0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_cause_a0_we),
+      .wd(alert_cause_a0_wd),
+      .de(hw2reg[220]),
+      .d(hw2reg[221]),
+      .qe(),
+      .q(reg2hw[784]),
+      .qs(alert_cause_a0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_alert_cause_a1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_cause_a1_we),
+      .wd(alert_cause_a1_wd),
+      .de(hw2reg[222]),
+      .d(hw2reg[223]),
+      .qe(),
+      .q(reg2hw[785]),
+      .qs(alert_cause_a1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_alert_cause_a2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_cause_a2_we),
+      .wd(alert_cause_a2_wd),
+      .de(hw2reg[224]),
+      .d(hw2reg[225]),
+      .qe(),
+      .q(reg2hw[786]),
+      .qs(alert_cause_a2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_alert_cause_a3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_cause_a3_we),
+      .wd(alert_cause_a3_wd),
+      .de(hw2reg[226]),
+      .d(hw2reg[227]),
+      .qe(),
+      .q(reg2hw[787]),
+      .qs(alert_cause_a3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_alert_cause_a4(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(alert_cause_a4_we),
+      .wd(alert_cause_a4_wd),
+      .de(hw2reg[228]),
+      .d(hw2reg[229]),
+      .qe(),
+      .q(reg2hw[788]),
+      .qs(alert_cause_a4_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_en_en_la0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_en_en_la0_we & regen_qs),
+      .wd(loc_alert_en_en_la0_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[780]),
+      .qs(loc_alert_en_en_la0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_en_en_la1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_en_en_la1_we & regen_qs),
+      .wd(loc_alert_en_en_la1_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[781]),
+      .qs(loc_alert_en_en_la1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_en_en_la2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_en_en_la2_we & regen_qs),
+      .wd(loc_alert_en_en_la2_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[782]),
+      .qs(loc_alert_en_en_la2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_en_en_la3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_en_en_la3_we & regen_qs),
+      .wd(loc_alert_en_en_la3_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[783]),
+      .qs(loc_alert_en_en_la3_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_loc_alert_class_class_la0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_class_class_la0_we & regen_qs),
+      .wd(loc_alert_class_class_la0_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[773-:2]),
+      .qs(loc_alert_class_class_la0_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_loc_alert_class_class_la1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_class_class_la1_we & regen_qs),
+      .wd(loc_alert_class_class_la1_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[775-:2]),
+      .qs(loc_alert_class_class_la1_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_loc_alert_class_class_la2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_class_class_la2_we & regen_qs),
+      .wd(loc_alert_class_class_la2_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[777-:2]),
+      .qs(loc_alert_class_class_la2_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_loc_alert_class_class_la3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_class_class_la3_we & regen_qs),
+      .wd(loc_alert_class_class_la3_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[779-:2]),
+      .qs(loc_alert_class_class_la3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_cause_la0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_cause_la0_we),
+      .wd(loc_alert_cause_la0_wd),
+      .de(hw2reg[212]),
+      .d(hw2reg[213]),
+      .qe(),
+      .q(reg2hw[768]),
+      .qs(loc_alert_cause_la0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_cause_la1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_cause_la1_we),
+      .wd(loc_alert_cause_la1_wd),
+      .de(hw2reg[214]),
+      .d(hw2reg[215]),
+      .qe(),
+      .q(reg2hw[769]),
+      .qs(loc_alert_cause_la1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_cause_la2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_cause_la2_we),
+      .wd(loc_alert_cause_la2_wd),
+      .de(hw2reg[216]),
+      .d(hw2reg[217]),
+      .qe(),
+      .q(reg2hw[770]),
+      .qs(loc_alert_cause_la2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h0)
+  ) u_loc_alert_cause_la3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(loc_alert_cause_la3_we),
+      .wd(loc_alert_cause_la3_wd),
+      .de(hw2reg[218]),
+      .d(hw2reg[219]),
+      .qe(),
+      .q(reg2hw[771]),
+      .qs(loc_alert_cause_la3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classa_ctrl_en(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_en_we & regen_qs),
+      .wd(classa_ctrl_en_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[767]),
+      .qs(classa_ctrl_en_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classa_ctrl_lock(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_lock_we & regen_qs),
+      .wd(classa_ctrl_lock_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[766]),
+      .qs(classa_ctrl_lock_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classa_ctrl_en_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_en_e0_we & regen_qs),
+      .wd(classa_ctrl_en_e0_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[765]),
+      .qs(classa_ctrl_en_e0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classa_ctrl_en_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_en_e1_we & regen_qs),
+      .wd(classa_ctrl_en_e1_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[764]),
+      .qs(classa_ctrl_en_e1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classa_ctrl_en_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_en_e2_we & regen_qs),
+      .wd(classa_ctrl_en_e2_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[763]),
+      .qs(classa_ctrl_en_e2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classa_ctrl_en_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_en_e3_we & regen_qs),
+      .wd(classa_ctrl_en_e3_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[762]),
+      .qs(classa_ctrl_en_e3_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_classa_ctrl_map_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_map_e0_we & regen_qs),
+      .wd(classa_ctrl_map_e0_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[761-:2]),
+      .qs(classa_ctrl_map_e0_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h1)
+  ) u_classa_ctrl_map_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_map_e1_we & regen_qs),
+      .wd(classa_ctrl_map_e1_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[759-:2]),
+      .qs(classa_ctrl_map_e1_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h2)
+  ) u_classa_ctrl_map_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_map_e2_we & regen_qs),
+      .wd(classa_ctrl_map_e2_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[757-:2]),
+      .qs(classa_ctrl_map_e2_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h3)
+  ) u_classa_ctrl_map_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_ctrl_map_e3_we & regen_qs),
+      .wd(classa_ctrl_map_e3_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[755-:2]),
+      .qs(classa_ctrl_map_e3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h1)
+  ) u_classa_clren(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_clren_we),
+      .wd(classa_clren_wd),
+      .de(hw2reg[210]),
+      .d(hw2reg[211]),
+      .qe(),
+      .q(),
+      .qs(classa_clren_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("WO"),
+      .RESVAL(1'h0)
+  ) u_classa_clr(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_clr_we & classa_clren_qs),
+      .wd(classa_clr_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(reg2hw[752]),
+      .q(reg2hw[753]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(16)) u_classa_accum_cnt(
+      .re(classa_accum_cnt_re),
+      .we(1'b0),
+      .wd({16 {1'b0}}),
+      .d(hw2reg[209-:16]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classa_accum_cnt_qs)
+  );
+  prim_subreg #(
+      .DW(16),
+      .SWACCESS("RW"),
+      .RESVAL(16'h0000)
+  ) u_classa_accum_thresh(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_accum_thresh_we & regen_qs),
+      .wd(classa_accum_thresh_wd),
+      .de(1'b0),
+      .d({16 {1'b0}}),
+      .qe(),
+      .q(reg2hw[751-:16]),
+      .qs(classa_accum_thresh_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classa_timeout_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_timeout_cyc_we & regen_qs),
+      .wd(classa_timeout_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[735-:32]),
+      .qs(classa_timeout_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classa_phase0_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_phase0_cyc_we & regen_qs),
+      .wd(classa_phase0_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[703-:32]),
+      .qs(classa_phase0_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classa_phase1_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_phase1_cyc_we & regen_qs),
+      .wd(classa_phase1_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[671-:32]),
+      .qs(classa_phase1_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classa_phase2_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_phase2_cyc_we & regen_qs),
+      .wd(classa_phase2_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[639-:32]),
+      .qs(classa_phase2_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classa_phase3_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classa_phase3_cyc_we & regen_qs),
+      .wd(classa_phase3_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[607-:32]),
+      .qs(classa_phase3_cyc_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_classa_esc_cnt(
+      .re(classa_esc_cnt_re),
+      .we(1'b0),
+      .wd({32 {1'b0}}),
+      .d(hw2reg[193-:32]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classa_esc_cnt_qs)
+  );
+  prim_subreg_ext #(.DW(3)) u_classa_state(
+      .re(classa_state_re),
+      .we(1'b0),
+      .wd({3 {1'b0}}),
+      .d(hw2reg[161-:3]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classa_state_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classb_ctrl_en(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_en_we & regen_qs),
+      .wd(classb_ctrl_en_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[575]),
+      .qs(classb_ctrl_en_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classb_ctrl_lock(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_lock_we & regen_qs),
+      .wd(classb_ctrl_lock_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[574]),
+      .qs(classb_ctrl_lock_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classb_ctrl_en_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_en_e0_we & regen_qs),
+      .wd(classb_ctrl_en_e0_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[573]),
+      .qs(classb_ctrl_en_e0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classb_ctrl_en_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_en_e1_we & regen_qs),
+      .wd(classb_ctrl_en_e1_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[572]),
+      .qs(classb_ctrl_en_e1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classb_ctrl_en_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_en_e2_we & regen_qs),
+      .wd(classb_ctrl_en_e2_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[571]),
+      .qs(classb_ctrl_en_e2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classb_ctrl_en_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_en_e3_we & regen_qs),
+      .wd(classb_ctrl_en_e3_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[570]),
+      .qs(classb_ctrl_en_e3_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_classb_ctrl_map_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_map_e0_we & regen_qs),
+      .wd(classb_ctrl_map_e0_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[569-:2]),
+      .qs(classb_ctrl_map_e0_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h1)
+  ) u_classb_ctrl_map_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_map_e1_we & regen_qs),
+      .wd(classb_ctrl_map_e1_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[567-:2]),
+      .qs(classb_ctrl_map_e1_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h2)
+  ) u_classb_ctrl_map_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_map_e2_we & regen_qs),
+      .wd(classb_ctrl_map_e2_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[565-:2]),
+      .qs(classb_ctrl_map_e2_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h3)
+  ) u_classb_ctrl_map_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_ctrl_map_e3_we & regen_qs),
+      .wd(classb_ctrl_map_e3_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[563-:2]),
+      .qs(classb_ctrl_map_e3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h1)
+  ) u_classb_clren(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_clren_we),
+      .wd(classb_clren_wd),
+      .de(hw2reg[157]),
+      .d(hw2reg[158]),
+      .qe(),
+      .q(),
+      .qs(classb_clren_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("WO"),
+      .RESVAL(1'h0)
+  ) u_classb_clr(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_clr_we & classb_clren_qs),
+      .wd(classb_clr_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(reg2hw[560]),
+      .q(reg2hw[561]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(16)) u_classb_accum_cnt(
+      .re(classb_accum_cnt_re),
+      .we(1'b0),
+      .wd({16 {1'b0}}),
+      .d(hw2reg[156-:16]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classb_accum_cnt_qs)
+  );
+  prim_subreg #(
+      .DW(16),
+      .SWACCESS("RW"),
+      .RESVAL(16'h0000)
+  ) u_classb_accum_thresh(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_accum_thresh_we & regen_qs),
+      .wd(classb_accum_thresh_wd),
+      .de(1'b0),
+      .d({16 {1'b0}}),
+      .qe(),
+      .q(reg2hw[559-:16]),
+      .qs(classb_accum_thresh_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classb_timeout_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_timeout_cyc_we & regen_qs),
+      .wd(classb_timeout_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[543-:32]),
+      .qs(classb_timeout_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classb_phase0_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_phase0_cyc_we & regen_qs),
+      .wd(classb_phase0_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[511-:32]),
+      .qs(classb_phase0_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classb_phase1_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_phase1_cyc_we & regen_qs),
+      .wd(classb_phase1_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[479-:32]),
+      .qs(classb_phase1_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classb_phase2_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_phase2_cyc_we & regen_qs),
+      .wd(classb_phase2_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[447-:32]),
+      .qs(classb_phase2_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classb_phase3_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classb_phase3_cyc_we & regen_qs),
+      .wd(classb_phase3_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[415-:32]),
+      .qs(classb_phase3_cyc_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_classb_esc_cnt(
+      .re(classb_esc_cnt_re),
+      .we(1'b0),
+      .wd({32 {1'b0}}),
+      .d(hw2reg[140-:32]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classb_esc_cnt_qs)
+  );
+  prim_subreg_ext #(.DW(3)) u_classb_state(
+      .re(classb_state_re),
+      .we(1'b0),
+      .wd({3 {1'b0}}),
+      .d(hw2reg[108-:3]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classb_state_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classc_ctrl_en(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_en_we & regen_qs),
+      .wd(classc_ctrl_en_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[383]),
+      .qs(classc_ctrl_en_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classc_ctrl_lock(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_lock_we & regen_qs),
+      .wd(classc_ctrl_lock_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[382]),
+      .qs(classc_ctrl_lock_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classc_ctrl_en_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_en_e0_we & regen_qs),
+      .wd(classc_ctrl_en_e0_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[381]),
+      .qs(classc_ctrl_en_e0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classc_ctrl_en_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_en_e1_we & regen_qs),
+      .wd(classc_ctrl_en_e1_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[380]),
+      .qs(classc_ctrl_en_e1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classc_ctrl_en_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_en_e2_we & regen_qs),
+      .wd(classc_ctrl_en_e2_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[379]),
+      .qs(classc_ctrl_en_e2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classc_ctrl_en_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_en_e3_we & regen_qs),
+      .wd(classc_ctrl_en_e3_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[378]),
+      .qs(classc_ctrl_en_e3_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_classc_ctrl_map_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_map_e0_we & regen_qs),
+      .wd(classc_ctrl_map_e0_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[377-:2]),
+      .qs(classc_ctrl_map_e0_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h1)
+  ) u_classc_ctrl_map_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_map_e1_we & regen_qs),
+      .wd(classc_ctrl_map_e1_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[375-:2]),
+      .qs(classc_ctrl_map_e1_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h2)
+  ) u_classc_ctrl_map_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_map_e2_we & regen_qs),
+      .wd(classc_ctrl_map_e2_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[373-:2]),
+      .qs(classc_ctrl_map_e2_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h3)
+  ) u_classc_ctrl_map_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_ctrl_map_e3_we & regen_qs),
+      .wd(classc_ctrl_map_e3_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[371-:2]),
+      .qs(classc_ctrl_map_e3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h1)
+  ) u_classc_clren(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_clren_we),
+      .wd(classc_clren_wd),
+      .de(hw2reg[104]),
+      .d(hw2reg[105]),
+      .qe(),
+      .q(),
+      .qs(classc_clren_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("WO"),
+      .RESVAL(1'h0)
+  ) u_classc_clr(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_clr_we & classc_clren_qs),
+      .wd(classc_clr_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(reg2hw[368]),
+      .q(reg2hw[369]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(16)) u_classc_accum_cnt(
+      .re(classc_accum_cnt_re),
+      .we(1'b0),
+      .wd({16 {1'b0}}),
+      .d(hw2reg[103-:16]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classc_accum_cnt_qs)
+  );
+  prim_subreg #(
+      .DW(16),
+      .SWACCESS("RW"),
+      .RESVAL(16'h0000)
+  ) u_classc_accum_thresh(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_accum_thresh_we & regen_qs),
+      .wd(classc_accum_thresh_wd),
+      .de(1'b0),
+      .d({16 {1'b0}}),
+      .qe(),
+      .q(reg2hw[367-:16]),
+      .qs(classc_accum_thresh_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classc_timeout_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_timeout_cyc_we & regen_qs),
+      .wd(classc_timeout_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[351-:32]),
+      .qs(classc_timeout_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classc_phase0_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_phase0_cyc_we & regen_qs),
+      .wd(classc_phase0_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[319-:32]),
+      .qs(classc_phase0_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classc_phase1_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_phase1_cyc_we & regen_qs),
+      .wd(classc_phase1_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[287-:32]),
+      .qs(classc_phase1_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classc_phase2_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_phase2_cyc_we & regen_qs),
+      .wd(classc_phase2_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[255-:32]),
+      .qs(classc_phase2_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classc_phase3_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classc_phase3_cyc_we & regen_qs),
+      .wd(classc_phase3_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[223-:32]),
+      .qs(classc_phase3_cyc_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_classc_esc_cnt(
+      .re(classc_esc_cnt_re),
+      .we(1'b0),
+      .wd({32 {1'b0}}),
+      .d(hw2reg[87-:32]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classc_esc_cnt_qs)
+  );
+  prim_subreg_ext #(.DW(3)) u_classc_state(
+      .re(classc_state_re),
+      .we(1'b0),
+      .wd({3 {1'b0}}),
+      .d(hw2reg[55-:3]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classc_state_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classd_ctrl_en(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_en_we & regen_qs),
+      .wd(classd_ctrl_en_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[191]),
+      .qs(classd_ctrl_en_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h0)
+  ) u_classd_ctrl_lock(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_lock_we & regen_qs),
+      .wd(classd_ctrl_lock_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[190]),
+      .qs(classd_ctrl_lock_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classd_ctrl_en_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_en_e0_we & regen_qs),
+      .wd(classd_ctrl_en_e0_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[189]),
+      .qs(classd_ctrl_en_e0_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classd_ctrl_en_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_en_e1_we & regen_qs),
+      .wd(classd_ctrl_en_e1_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[188]),
+      .qs(classd_ctrl_en_e1_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classd_ctrl_en_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_en_e2_we & regen_qs),
+      .wd(classd_ctrl_en_e2_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[187]),
+      .qs(classd_ctrl_en_e2_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("RW"),
+      .RESVAL(1'h1)
+  ) u_classd_ctrl_en_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_en_e3_we & regen_qs),
+      .wd(classd_ctrl_en_e3_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(),
+      .q(reg2hw[186]),
+      .qs(classd_ctrl_en_e3_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h0)
+  ) u_classd_ctrl_map_e0(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_map_e0_we & regen_qs),
+      .wd(classd_ctrl_map_e0_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[185-:2]),
+      .qs(classd_ctrl_map_e0_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h1)
+  ) u_classd_ctrl_map_e1(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_map_e1_we & regen_qs),
+      .wd(classd_ctrl_map_e1_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[183-:2]),
+      .qs(classd_ctrl_map_e1_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h2)
+  ) u_classd_ctrl_map_e2(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_map_e2_we & regen_qs),
+      .wd(classd_ctrl_map_e2_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[181-:2]),
+      .qs(classd_ctrl_map_e2_qs)
+  );
+  prim_subreg #(
+      .DW(2),
+      .SWACCESS("RW"),
+      .RESVAL(2'h3)
+  ) u_classd_ctrl_map_e3(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_ctrl_map_e3_we & regen_qs),
+      .wd(classd_ctrl_map_e3_wd),
+      .de(1'b0),
+      .d({2 {1'b0}}),
+      .qe(),
+      .q(reg2hw[179-:2]),
+      .qs(classd_ctrl_map_e3_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("W1C"),
+      .RESVAL(1'h1)
+  ) u_classd_clren(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_clren_we),
+      .wd(classd_clren_wd),
+      .de(hw2reg[51]),
+      .d(hw2reg[52]),
+      .qe(),
+      .q(),
+      .qs(classd_clren_qs)
+  );
+  prim_subreg #(
+      .DW(1),
+      .SWACCESS("WO"),
+      .RESVAL(1'h0)
+  ) u_classd_clr(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_clr_we & classd_clren_qs),
+      .wd(classd_clr_wd),
+      .de(1'b0),
+      .d(1'b0),
+      .qe(reg2hw[176]),
+      .q(reg2hw[177]),
+      .qs()
+  );
+  prim_subreg_ext #(.DW(16)) u_classd_accum_cnt(
+      .re(classd_accum_cnt_re),
+      .we(1'b0),
+      .wd({16 {1'b0}}),
+      .d(hw2reg[50-:16]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classd_accum_cnt_qs)
+  );
+  prim_subreg #(
+      .DW(16),
+      .SWACCESS("RW"),
+      .RESVAL(16'h0000)
+  ) u_classd_accum_thresh(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_accum_thresh_we & regen_qs),
+      .wd(classd_accum_thresh_wd),
+      .de(1'b0),
+      .d({16 {1'b0}}),
+      .qe(),
+      .q(reg2hw[175-:16]),
+      .qs(classd_accum_thresh_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classd_timeout_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_timeout_cyc_we & regen_qs),
+      .wd(classd_timeout_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[159-:32]),
+      .qs(classd_timeout_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classd_phase0_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_phase0_cyc_we & regen_qs),
+      .wd(classd_phase0_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[127-:32]),
+      .qs(classd_phase0_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classd_phase1_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_phase1_cyc_we & regen_qs),
+      .wd(classd_phase1_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[95-:32]),
+      .qs(classd_phase1_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classd_phase2_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_phase2_cyc_we & regen_qs),
+      .wd(classd_phase2_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[63-:32]),
+      .qs(classd_phase2_cyc_qs)
+  );
+  prim_subreg #(
+      .DW(32),
+      .SWACCESS("RW"),
+      .RESVAL(32'h00000000)
+  ) u_classd_phase3_cyc(
+      .clk_i(clk_i),
+      .rst_ni(rst_ni),
+      .we(classd_phase3_cyc_we & regen_qs),
+      .wd(classd_phase3_cyc_wd),
+      .de(1'b0),
+      .d({32 {1'b0}}),
+      .qe(),
+      .q(reg2hw[31-:32]),
+      .qs(classd_phase3_cyc_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_classd_esc_cnt(
+      .re(classd_esc_cnt_re),
+      .we(1'b0),
+      .wd({32 {1'b0}}),
+      .d(hw2reg[34-:32]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classd_esc_cnt_qs)
+  );
+  prim_subreg_ext #(.DW(3)) u_classd_state(
+      .re(classd_state_re),
+      .we(1'b0),
+      .wd({3 {1'b0}}),
+      .d(hw2reg[2-:3]),
+      .qre(),
+      .qe(),
+      .q(),
+      .qs(classd_state_qs)
   );
 
 
-  //   F[map_e0]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_classb_ctrl_map_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_map_e0_we & regen_qs),
-    .wd     (classb_ctrl_map_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.map_e0.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_map_e0_qs)
-  );
-
-
-  //   F[map_e1]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h1)
-  ) u_classb_ctrl_map_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_map_e1_we & regen_qs),
-    .wd     (classb_ctrl_map_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.map_e1.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_map_e1_qs)
-  );
-
-
-  //   F[map_e2]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_classb_ctrl_map_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_map_e2_we & regen_qs),
-    .wd     (classb_ctrl_map_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.map_e2.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_map_e2_qs)
-  );
-
-
-  //   F[map_e3]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h3)
-  ) u_classb_ctrl_map_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_ctrl_map_e3_we & regen_qs),
-    .wd     (classb_ctrl_map_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_ctrl.map_e3.q ),
-
-    // to register interface (read)
-    .qs     (classb_ctrl_map_e3_qs)
-  );
-
-
-  // R[classb_clren]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h1)
-  ) u_classb_clren (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (classb_clren_we),
-    .wd     (classb_clren_wd),
-
-    // from internal hardware
-    .de     (hw2reg.classb_clren.de),
-    .d      (hw2reg.classb_clren.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (classb_clren_qs)
-  );
-
-
-  // R[classb_clr]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_classb_clr (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_clr_we & classb_clren_qs),
-    .wd     (classb_clr_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.classb_clr.qe),
-    .q      (reg2hw.classb_clr.q ),
-
-    .qs     ()
-  );
-
-
-  // R[classb_accum_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (16)
-  ) u_classb_accum_cnt (
-    .re     (classb_accum_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classb_accum_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classb_accum_cnt_qs)
-  );
-
-
-  // R[classb_accum_thresh]: V(False)
-
-  prim_subreg #(
-    .DW      (16),
-    .SWACCESS("RW"),
-    .RESVAL  (16'h0)
-  ) u_classb_accum_thresh (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_accum_thresh_we & regen_qs),
-    .wd     (classb_accum_thresh_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_accum_thresh.q ),
-
-    // to register interface (read)
-    .qs     (classb_accum_thresh_qs)
-  );
-
-
-  // R[classb_timeout_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classb_timeout_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_timeout_cyc_we & regen_qs),
-    .wd     (classb_timeout_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_timeout_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classb_timeout_cyc_qs)
-  );
-
-
-  // R[classb_phase0_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classb_phase0_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_phase0_cyc_we & regen_qs),
-    .wd     (classb_phase0_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_phase0_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classb_phase0_cyc_qs)
-  );
-
-
-  // R[classb_phase1_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classb_phase1_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_phase1_cyc_we & regen_qs),
-    .wd     (classb_phase1_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_phase1_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classb_phase1_cyc_qs)
-  );
-
-
-  // R[classb_phase2_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classb_phase2_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_phase2_cyc_we & regen_qs),
-    .wd     (classb_phase2_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_phase2_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classb_phase2_cyc_qs)
-  );
-
-
-  // R[classb_phase3_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classb_phase3_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classb_phase3_cyc_we & regen_qs),
-    .wd     (classb_phase3_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classb_phase3_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classb_phase3_cyc_qs)
-  );
-
-
-  // R[classb_esc_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_classb_esc_cnt (
-    .re     (classb_esc_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classb_esc_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classb_esc_cnt_qs)
-  );
-
-
-  // R[classb_state]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_classb_state (
-    .re     (classb_state_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classb_state.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classb_state_qs)
-  );
-
-
-  // R[classc_ctrl]: V(False)
-
-  //   F[en]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classc_ctrl_en (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_en_we & regen_qs),
-    .wd     (classc_ctrl_en_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.en.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_en_qs)
-  );
-
-
-  //   F[lock]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classc_ctrl_lock (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_lock_we & regen_qs),
-    .wd     (classc_ctrl_lock_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.lock.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_lock_qs)
-  );
-
-
-  //   F[en_e0]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classc_ctrl_en_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_en_e0_we & regen_qs),
-    .wd     (classc_ctrl_en_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.en_e0.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_en_e0_qs)
-  );
-
-
-  //   F[en_e1]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classc_ctrl_en_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_en_e1_we & regen_qs),
-    .wd     (classc_ctrl_en_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.en_e1.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_en_e1_qs)
-  );
-
-
-  //   F[en_e2]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classc_ctrl_en_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_en_e2_we & regen_qs),
-    .wd     (classc_ctrl_en_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.en_e2.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_en_e2_qs)
-  );
-
-
-  //   F[en_e3]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classc_ctrl_en_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_en_e3_we & regen_qs),
-    .wd     (classc_ctrl_en_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.en_e3.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_en_e3_qs)
-  );
-
-
-  //   F[map_e0]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_classc_ctrl_map_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_map_e0_we & regen_qs),
-    .wd     (classc_ctrl_map_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.map_e0.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_map_e0_qs)
-  );
-
-
-  //   F[map_e1]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h1)
-  ) u_classc_ctrl_map_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_map_e1_we & regen_qs),
-    .wd     (classc_ctrl_map_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.map_e1.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_map_e1_qs)
-  );
-
-
-  //   F[map_e2]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_classc_ctrl_map_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_map_e2_we & regen_qs),
-    .wd     (classc_ctrl_map_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.map_e2.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_map_e2_qs)
-  );
-
-
-  //   F[map_e3]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h3)
-  ) u_classc_ctrl_map_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_ctrl_map_e3_we & regen_qs),
-    .wd     (classc_ctrl_map_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_ctrl.map_e3.q ),
-
-    // to register interface (read)
-    .qs     (classc_ctrl_map_e3_qs)
-  );
-
-
-  // R[classc_clren]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h1)
-  ) u_classc_clren (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (classc_clren_we),
-    .wd     (classc_clren_wd),
-
-    // from internal hardware
-    .de     (hw2reg.classc_clren.de),
-    .d      (hw2reg.classc_clren.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (classc_clren_qs)
-  );
-
-
-  // R[classc_clr]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_classc_clr (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_clr_we & classc_clren_qs),
-    .wd     (classc_clr_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.classc_clr.qe),
-    .q      (reg2hw.classc_clr.q ),
-
-    .qs     ()
-  );
-
-
-  // R[classc_accum_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (16)
-  ) u_classc_accum_cnt (
-    .re     (classc_accum_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classc_accum_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classc_accum_cnt_qs)
-  );
-
-
-  // R[classc_accum_thresh]: V(False)
-
-  prim_subreg #(
-    .DW      (16),
-    .SWACCESS("RW"),
-    .RESVAL  (16'h0)
-  ) u_classc_accum_thresh (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_accum_thresh_we & regen_qs),
-    .wd     (classc_accum_thresh_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_accum_thresh.q ),
-
-    // to register interface (read)
-    .qs     (classc_accum_thresh_qs)
-  );
-
-
-  // R[classc_timeout_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classc_timeout_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_timeout_cyc_we & regen_qs),
-    .wd     (classc_timeout_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_timeout_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classc_timeout_cyc_qs)
-  );
-
-
-  // R[classc_phase0_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classc_phase0_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_phase0_cyc_we & regen_qs),
-    .wd     (classc_phase0_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_phase0_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classc_phase0_cyc_qs)
-  );
-
-
-  // R[classc_phase1_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classc_phase1_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_phase1_cyc_we & regen_qs),
-    .wd     (classc_phase1_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_phase1_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classc_phase1_cyc_qs)
-  );
-
-
-  // R[classc_phase2_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classc_phase2_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_phase2_cyc_we & regen_qs),
-    .wd     (classc_phase2_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_phase2_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classc_phase2_cyc_qs)
-  );
-
-
-  // R[classc_phase3_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classc_phase3_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classc_phase3_cyc_we & regen_qs),
-    .wd     (classc_phase3_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classc_phase3_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classc_phase3_cyc_qs)
-  );
-
-
-  // R[classc_esc_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_classc_esc_cnt (
-    .re     (classc_esc_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classc_esc_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classc_esc_cnt_qs)
-  );
-
-
-  // R[classc_state]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_classc_state (
-    .re     (classc_state_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classc_state.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classc_state_qs)
-  );
-
-
-  // R[classd_ctrl]: V(False)
-
-  //   F[en]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classd_ctrl_en (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_en_we & regen_qs),
-    .wd     (classd_ctrl_en_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.en.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_en_qs)
-  );
-
-
-  //   F[lock]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_classd_ctrl_lock (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_lock_we & regen_qs),
-    .wd     (classd_ctrl_lock_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.lock.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_lock_qs)
-  );
-
-
-  //   F[en_e0]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classd_ctrl_en_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_en_e0_we & regen_qs),
-    .wd     (classd_ctrl_en_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.en_e0.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_en_e0_qs)
-  );
-
-
-  //   F[en_e1]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classd_ctrl_en_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_en_e1_we & regen_qs),
-    .wd     (classd_ctrl_en_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.en_e1.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_en_e1_qs)
-  );
-
-
-  //   F[en_e2]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classd_ctrl_en_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_en_e2_we & regen_qs),
-    .wd     (classd_ctrl_en_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.en_e2.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_en_e2_qs)
-  );
-
-
-  //   F[en_e3]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_classd_ctrl_en_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_en_e3_we & regen_qs),
-    .wd     (classd_ctrl_en_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.en_e3.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_en_e3_qs)
-  );
-
-
-  //   F[map_e0]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_classd_ctrl_map_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_map_e0_we & regen_qs),
-    .wd     (classd_ctrl_map_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.map_e0.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_map_e0_qs)
-  );
-
-
-  //   F[map_e1]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h1)
-  ) u_classd_ctrl_map_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_map_e1_we & regen_qs),
-    .wd     (classd_ctrl_map_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.map_e1.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_map_e1_qs)
-  );
-
-
-  //   F[map_e2]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_classd_ctrl_map_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_map_e2_we & regen_qs),
-    .wd     (classd_ctrl_map_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.map_e2.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_map_e2_qs)
-  );
-
-
-  //   F[map_e3]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h3)
-  ) u_classd_ctrl_map_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_ctrl_map_e3_we & regen_qs),
-    .wd     (classd_ctrl_map_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_ctrl.map_e3.q ),
-
-    // to register interface (read)
-    .qs     (classd_ctrl_map_e3_qs)
-  );
-
-
-  // R[classd_clren]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h1)
-  ) u_classd_clren (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (classd_clren_we),
-    .wd     (classd_clren_wd),
-
-    // from internal hardware
-    .de     (hw2reg.classd_clren.de),
-    .d      (hw2reg.classd_clren.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (classd_clren_qs)
-  );
-
-
-  // R[classd_clr]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_classd_clr (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_clr_we & classd_clren_qs),
-    .wd     (classd_clr_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.classd_clr.qe),
-    .q      (reg2hw.classd_clr.q ),
-
-    .qs     ()
-  );
-
-
-  // R[classd_accum_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (16)
-  ) u_classd_accum_cnt (
-    .re     (classd_accum_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classd_accum_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classd_accum_cnt_qs)
-  );
-
-
-  // R[classd_accum_thresh]: V(False)
-
-  prim_subreg #(
-    .DW      (16),
-    .SWACCESS("RW"),
-    .RESVAL  (16'h0)
-  ) u_classd_accum_thresh (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_accum_thresh_we & regen_qs),
-    .wd     (classd_accum_thresh_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_accum_thresh.q ),
-
-    // to register interface (read)
-    .qs     (classd_accum_thresh_qs)
-  );
-
-
-  // R[classd_timeout_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classd_timeout_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_timeout_cyc_we & regen_qs),
-    .wd     (classd_timeout_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_timeout_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classd_timeout_cyc_qs)
-  );
-
-
-  // R[classd_phase0_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classd_phase0_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_phase0_cyc_we & regen_qs),
-    .wd     (classd_phase0_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_phase0_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classd_phase0_cyc_qs)
-  );
-
-
-  // R[classd_phase1_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classd_phase1_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_phase1_cyc_we & regen_qs),
-    .wd     (classd_phase1_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_phase1_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classd_phase1_cyc_qs)
-  );
-
-
-  // R[classd_phase2_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classd_phase2_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_phase2_cyc_we & regen_qs),
-    .wd     (classd_phase2_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_phase2_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classd_phase2_cyc_qs)
-  );
-
-
-  // R[classd_phase3_cyc]: V(False)
-
-  prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RW"),
-    .RESVAL  (32'h0)
-  ) u_classd_phase3_cyc (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (classd_phase3_cyc_we & regen_qs),
-    .wd     (classd_phase3_cyc_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.classd_phase3_cyc.q ),
-
-    // to register interface (read)
-    .qs     (classd_phase3_cyc_qs)
-  );
-
-
-  // R[classd_esc_cnt]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_classd_esc_cnt (
-    .re     (classd_esc_cnt_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classd_esc_cnt.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classd_esc_cnt_qs)
-  );
-
-
-  // R[classd_state]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_classd_state (
-    .re     (classd_state_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.classd_state.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (classd_state_qs)
-  );
-
-
-
-
   logic [58:0] addr_hit;
   always_comb begin
     addr_hit = '0;
diff --git a/hw/top_earlgrey/ip/clkmgr/rtl/autogen/clkmgr_pkg.sv b/hw/top_earlgrey/ip/clkmgr/rtl/autogen/clkmgr_pkg.sv
index 84a52bba2..1ef9b878c 100644
--- a/hw/top_earlgrey/ip/clkmgr/rtl/autogen/clkmgr_pkg.sv
+++ b/hw/top_earlgrey/ip/clkmgr/rtl/autogen/clkmgr_pkg.sv
@@ -16,9 +16,7 @@ package clkmgr_pkg;
     logic test_en;
   } clk_dft_t;
 
-  parameter clk_dft_t CLK_DFT_DEFAULT = '{
-    test_en: 1'b0
-  };
+  parameter clk_dft_t CLK_DFT_DEFAULT = 1'b0;
 
   typedef struct packed {
   logic clk_io_powerup;
@@ -44,9 +42,7 @@ package clkmgr_pkg;
     logic [3-1:0] idle;
   } clk_hint_status_t;
 
-  parameter clk_hint_status_t CLK_HINT_STATUS_DEFAULT = '{
-    idle: {3{1'b1}}
-  };
+  parameter clk_hint_status_t CLK_HINT_STATUS_DEFAULT = 3'b111;
 
 
 endpackage // clkmgr_pkg
diff --git a/hw/top_earlgrey/ip/padctrl/rtl/autogen/padctrl_reg_top.sv b/hw/top_earlgrey/ip/padctrl/rtl/autogen/padctrl_reg_top.sv
index 30f3ea44f..9f4532108 100644
--- a/hw/top_earlgrey/ip/padctrl/rtl/autogen/padctrl_reg_top.sv
+++ b/hw/top_earlgrey/ip/padctrl/rtl/autogen/padctrl_reg_top.sv
@@ -14,8 +14,8 @@ module padctrl_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output padctrl_reg_pkg::padctrl_reg2hw_t reg2hw, // Write
-  input  padctrl_reg_pkg::padctrl_hw2reg_t hw2reg, // Read
+  output wire [516:0] reg2hw,
+  input wire [469:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -291,811 +291,476 @@ module padctrl_reg_top (
   );
 
 
-
-  // Subregister 0 of Multireg dio_pads
-  // R[dio_pads0]: V(True)
-
-  // F[attr0]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads0_attr0 (
-    .re     (dio_pads0_attr0_re),
-    // qualified with register enable
-    .we     (dio_pads0_attr0_we & regen_qs),
-    .wd     (dio_pads0_attr0_wd),
-    .d      (hw2reg.dio_pads[0].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[0].qe),
-    .q      (reg2hw.dio_pads[0].q ),
-    .qs     (dio_pads0_attr0_qs)
-  );
-
-
-  // F[attr1]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads0_attr1 (
-    .re     (dio_pads0_attr1_re),
-    // qualified with register enable
-    .we     (dio_pads0_attr1_we & regen_qs),
-    .wd     (dio_pads0_attr1_wd),
-    .d      (hw2reg.dio_pads[1].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[1].qe),
-    .q      (reg2hw.dio_pads[1].q ),
-    .qs     (dio_pads0_attr1_qs)
-  );
-
-
-  // F[attr2]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads0_attr2 (
-    .re     (dio_pads0_attr2_re),
-    // qualified with register enable
-    .we     (dio_pads0_attr2_we & regen_qs),
-    .wd     (dio_pads0_attr2_wd),
-    .d      (hw2reg.dio_pads[2].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[2].qe),
-    .q      (reg2hw.dio_pads[2].q ),
-    .qs     (dio_pads0_attr2_qs)
-  );
-
-
-  // Subregister 3 of Multireg dio_pads
-  // R[dio_pads1]: V(True)
-
-  // F[attr3]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads1_attr3 (
-    .re     (dio_pads1_attr3_re),
-    // qualified with register enable
-    .we     (dio_pads1_attr3_we & regen_qs),
-    .wd     (dio_pads1_attr3_wd),
-    .d      (hw2reg.dio_pads[3].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[3].qe),
-    .q      (reg2hw.dio_pads[3].q ),
-    .qs     (dio_pads1_attr3_qs)
-  );
-
-
-  // F[attr4]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads1_attr4 (
-    .re     (dio_pads1_attr4_re),
-    // qualified with register enable
-    .we     (dio_pads1_attr4_we & regen_qs),
-    .wd     (dio_pads1_attr4_wd),
-    .d      (hw2reg.dio_pads[4].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[4].qe),
-    .q      (reg2hw.dio_pads[4].q ),
-    .qs     (dio_pads1_attr4_qs)
-  );
-
-
-  // F[attr5]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads1_attr5 (
-    .re     (dio_pads1_attr5_re),
-    // qualified with register enable
-    .we     (dio_pads1_attr5_we & regen_qs),
-    .wd     (dio_pads1_attr5_wd),
-    .d      (hw2reg.dio_pads[5].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[5].qe),
-    .q      (reg2hw.dio_pads[5].q ),
-    .qs     (dio_pads1_attr5_qs)
-  );
-
-
-  // Subregister 6 of Multireg dio_pads
-  // R[dio_pads2]: V(True)
-
-  // F[attr6]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads2_attr6 (
-    .re     (dio_pads2_attr6_re),
-    // qualified with register enable
-    .we     (dio_pads2_attr6_we & regen_qs),
-    .wd     (dio_pads2_attr6_wd),
-    .d      (hw2reg.dio_pads[6].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[6].qe),
-    .q      (reg2hw.dio_pads[6].q ),
-    .qs     (dio_pads2_attr6_qs)
-  );
-
-
-  // F[attr7]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads2_attr7 (
-    .re     (dio_pads2_attr7_re),
-    // qualified with register enable
-    .we     (dio_pads2_attr7_we & regen_qs),
-    .wd     (dio_pads2_attr7_wd),
-    .d      (hw2reg.dio_pads[7].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[7].qe),
-    .q      (reg2hw.dio_pads[7].q ),
-    .qs     (dio_pads2_attr7_qs)
-  );
-
-
-  // F[attr8]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads2_attr8 (
-    .re     (dio_pads2_attr8_re),
-    // qualified with register enable
-    .we     (dio_pads2_attr8_we & regen_qs),
-    .wd     (dio_pads2_attr8_wd),
-    .d      (hw2reg.dio_pads[8].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[8].qe),
-    .q      (reg2hw.dio_pads[8].q ),
-    .qs     (dio_pads2_attr8_qs)
-  );
-
-
-  // Subregister 9 of Multireg dio_pads
-  // R[dio_pads3]: V(True)
-
-  // F[attr9]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads3_attr9 (
-    .re     (dio_pads3_attr9_re),
-    // qualified with register enable
-    .we     (dio_pads3_attr9_we & regen_qs),
-    .wd     (dio_pads3_attr9_wd),
-    .d      (hw2reg.dio_pads[9].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[9].qe),
-    .q      (reg2hw.dio_pads[9].q ),
-    .qs     (dio_pads3_attr9_qs)
-  );
-
-
-  // F[attr10]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads3_attr10 (
-    .re     (dio_pads3_attr10_re),
-    // qualified with register enable
-    .we     (dio_pads3_attr10_we & regen_qs),
-    .wd     (dio_pads3_attr10_wd),
-    .d      (hw2reg.dio_pads[10].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[10].qe),
-    .q      (reg2hw.dio_pads[10].q ),
-    .qs     (dio_pads3_attr10_qs)
-  );
-
-
-  // F[attr11]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads3_attr11 (
-    .re     (dio_pads3_attr11_re),
-    // qualified with register enable
-    .we     (dio_pads3_attr11_we & regen_qs),
-    .wd     (dio_pads3_attr11_wd),
-    .d      (hw2reg.dio_pads[11].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[11].qe),
-    .q      (reg2hw.dio_pads[11].q ),
-    .qs     (dio_pads3_attr11_qs)
-  );
-
-
-  // Subregister 12 of Multireg dio_pads
-  // R[dio_pads4]: V(True)
-
-  // F[attr12]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads4_attr12 (
-    .re     (dio_pads4_attr12_re),
-    // qualified with register enable
-    .we     (dio_pads4_attr12_we & regen_qs),
-    .wd     (dio_pads4_attr12_wd),
-    .d      (hw2reg.dio_pads[12].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[12].qe),
-    .q      (reg2hw.dio_pads[12].q ),
-    .qs     (dio_pads4_attr12_qs)
-  );
-
-
-  // F[attr13]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads4_attr13 (
-    .re     (dio_pads4_attr13_re),
-    // qualified with register enable
-    .we     (dio_pads4_attr13_we & regen_qs),
-    .wd     (dio_pads4_attr13_wd),
-    .d      (hw2reg.dio_pads[13].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[13].qe),
-    .q      (reg2hw.dio_pads[13].q ),
-    .qs     (dio_pads4_attr13_qs)
-  );
-
-
-  // F[attr14]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_dio_pads4_attr14 (
-    .re     (dio_pads4_attr14_re),
-    // qualified with register enable
-    .we     (dio_pads4_attr14_we & regen_qs),
-    .wd     (dio_pads4_attr14_wd),
-    .d      (hw2reg.dio_pads[14].d),
-    .qre    (),
-    .qe     (reg2hw.dio_pads[14].qe),
-    .q      (reg2hw.dio_pads[14].q ),
-    .qs     (dio_pads4_attr14_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg mio_pads
-  // R[mio_pads0]: V(True)
-
-  // F[attr0]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads0_attr0 (
-    .re     (mio_pads0_attr0_re),
-    // qualified with register enable
-    .we     (mio_pads0_attr0_we & regen_qs),
-    .wd     (mio_pads0_attr0_wd),
-    .d      (hw2reg.mio_pads[0].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[0].qe),
-    .q      (reg2hw.mio_pads[0].q ),
-    .qs     (mio_pads0_attr0_qs)
-  );
-
-
-  // F[attr1]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads0_attr1 (
-    .re     (mio_pads0_attr1_re),
-    // qualified with register enable
-    .we     (mio_pads0_attr1_we & regen_qs),
-    .wd     (mio_pads0_attr1_wd),
-    .d      (hw2reg.mio_pads[1].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[1].qe),
-    .q      (reg2hw.mio_pads[1].q ),
-    .qs     (mio_pads0_attr1_qs)
-  );
-
-
-  // F[attr2]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads0_attr2 (
-    .re     (mio_pads0_attr2_re),
-    // qualified with register enable
-    .we     (mio_pads0_attr2_we & regen_qs),
-    .wd     (mio_pads0_attr2_wd),
-    .d      (hw2reg.mio_pads[2].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[2].qe),
-    .q      (reg2hw.mio_pads[2].q ),
-    .qs     (mio_pads0_attr2_qs)
-  );
-
-
-  // Subregister 3 of Multireg mio_pads
-  // R[mio_pads1]: V(True)
-
-  // F[attr3]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads1_attr3 (
-    .re     (mio_pads1_attr3_re),
-    // qualified with register enable
-    .we     (mio_pads1_attr3_we & regen_qs),
-    .wd     (mio_pads1_attr3_wd),
-    .d      (hw2reg.mio_pads[3].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[3].qe),
-    .q      (reg2hw.mio_pads[3].q ),
-    .qs     (mio_pads1_attr3_qs)
-  );
-
-
-  // F[attr4]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads1_attr4 (
-    .re     (mio_pads1_attr4_re),
-    // qualified with register enable
-    .we     (mio_pads1_attr4_we & regen_qs),
-    .wd     (mio_pads1_attr4_wd),
-    .d      (hw2reg.mio_pads[4].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[4].qe),
-    .q      (reg2hw.mio_pads[4].q ),
-    .qs     (mio_pads1_attr4_qs)
-  );
-
-
-  // F[attr5]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads1_attr5 (
-    .re     (mio_pads1_attr5_re),
-    // qualified with register enable
-    .we     (mio_pads1_attr5_we & regen_qs),
-    .wd     (mio_pads1_attr5_wd),
-    .d      (hw2reg.mio_pads[5].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[5].qe),
-    .q      (reg2hw.mio_pads[5].q ),
-    .qs     (mio_pads1_attr5_qs)
-  );
-
-
-  // Subregister 6 of Multireg mio_pads
-  // R[mio_pads2]: V(True)
-
-  // F[attr6]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads2_attr6 (
-    .re     (mio_pads2_attr6_re),
-    // qualified with register enable
-    .we     (mio_pads2_attr6_we & regen_qs),
-    .wd     (mio_pads2_attr6_wd),
-    .d      (hw2reg.mio_pads[6].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[6].qe),
-    .q      (reg2hw.mio_pads[6].q ),
-    .qs     (mio_pads2_attr6_qs)
-  );
-
-
-  // F[attr7]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads2_attr7 (
-    .re     (mio_pads2_attr7_re),
-    // qualified with register enable
-    .we     (mio_pads2_attr7_we & regen_qs),
-    .wd     (mio_pads2_attr7_wd),
-    .d      (hw2reg.mio_pads[7].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[7].qe),
-    .q      (reg2hw.mio_pads[7].q ),
-    .qs     (mio_pads2_attr7_qs)
-  );
-
-
-  // F[attr8]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads2_attr8 (
-    .re     (mio_pads2_attr8_re),
-    // qualified with register enable
-    .we     (mio_pads2_attr8_we & regen_qs),
-    .wd     (mio_pads2_attr8_wd),
-    .d      (hw2reg.mio_pads[8].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[8].qe),
-    .q      (reg2hw.mio_pads[8].q ),
-    .qs     (mio_pads2_attr8_qs)
-  );
-
-
-  // Subregister 9 of Multireg mio_pads
-  // R[mio_pads3]: V(True)
-
-  // F[attr9]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads3_attr9 (
-    .re     (mio_pads3_attr9_re),
-    // qualified with register enable
-    .we     (mio_pads3_attr9_we & regen_qs),
-    .wd     (mio_pads3_attr9_wd),
-    .d      (hw2reg.mio_pads[9].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[9].qe),
-    .q      (reg2hw.mio_pads[9].q ),
-    .qs     (mio_pads3_attr9_qs)
-  );
-
-
-  // F[attr10]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads3_attr10 (
-    .re     (mio_pads3_attr10_re),
-    // qualified with register enable
-    .we     (mio_pads3_attr10_we & regen_qs),
-    .wd     (mio_pads3_attr10_wd),
-    .d      (hw2reg.mio_pads[10].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[10].qe),
-    .q      (reg2hw.mio_pads[10].q ),
-    .qs     (mio_pads3_attr10_qs)
-  );
-
-
-  // F[attr11]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads3_attr11 (
-    .re     (mio_pads3_attr11_re),
-    // qualified with register enable
-    .we     (mio_pads3_attr11_we & regen_qs),
-    .wd     (mio_pads3_attr11_wd),
-    .d      (hw2reg.mio_pads[11].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[11].qe),
-    .q      (reg2hw.mio_pads[11].q ),
-    .qs     (mio_pads3_attr11_qs)
-  );
-
-
-  // Subregister 12 of Multireg mio_pads
-  // R[mio_pads4]: V(True)
-
-  // F[attr12]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads4_attr12 (
-    .re     (mio_pads4_attr12_re),
-    // qualified with register enable
-    .we     (mio_pads4_attr12_we & regen_qs),
-    .wd     (mio_pads4_attr12_wd),
-    .d      (hw2reg.mio_pads[12].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[12].qe),
-    .q      (reg2hw.mio_pads[12].q ),
-    .qs     (mio_pads4_attr12_qs)
-  );
-
-
-  // F[attr13]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads4_attr13 (
-    .re     (mio_pads4_attr13_re),
-    // qualified with register enable
-    .we     (mio_pads4_attr13_we & regen_qs),
-    .wd     (mio_pads4_attr13_wd),
-    .d      (hw2reg.mio_pads[13].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[13].qe),
-    .q      (reg2hw.mio_pads[13].q ),
-    .qs     (mio_pads4_attr13_qs)
-  );
-
-
-  // F[attr14]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads4_attr14 (
-    .re     (mio_pads4_attr14_re),
-    // qualified with register enable
-    .we     (mio_pads4_attr14_we & regen_qs),
-    .wd     (mio_pads4_attr14_wd),
-    .d      (hw2reg.mio_pads[14].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[14].qe),
-    .q      (reg2hw.mio_pads[14].q ),
-    .qs     (mio_pads4_attr14_qs)
-  );
-
-
-  // Subregister 15 of Multireg mio_pads
-  // R[mio_pads5]: V(True)
-
-  // F[attr15]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads5_attr15 (
-    .re     (mio_pads5_attr15_re),
-    // qualified with register enable
-    .we     (mio_pads5_attr15_we & regen_qs),
-    .wd     (mio_pads5_attr15_wd),
-    .d      (hw2reg.mio_pads[15].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[15].qe),
-    .q      (reg2hw.mio_pads[15].q ),
-    .qs     (mio_pads5_attr15_qs)
-  );
-
-
-  // F[attr16]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads5_attr16 (
-    .re     (mio_pads5_attr16_re),
-    // qualified with register enable
-    .we     (mio_pads5_attr16_we & regen_qs),
-    .wd     (mio_pads5_attr16_wd),
-    .d      (hw2reg.mio_pads[16].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[16].qe),
-    .q      (reg2hw.mio_pads[16].q ),
-    .qs     (mio_pads5_attr16_qs)
-  );
-
-
-  // F[attr17]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads5_attr17 (
-    .re     (mio_pads5_attr17_re),
-    // qualified with register enable
-    .we     (mio_pads5_attr17_we & regen_qs),
-    .wd     (mio_pads5_attr17_wd),
-    .d      (hw2reg.mio_pads[17].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[17].qe),
-    .q      (reg2hw.mio_pads[17].q ),
-    .qs     (mio_pads5_attr17_qs)
-  );
-
-
-  // Subregister 18 of Multireg mio_pads
-  // R[mio_pads6]: V(True)
-
-  // F[attr18]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads6_attr18 (
-    .re     (mio_pads6_attr18_re),
-    // qualified with register enable
-    .we     (mio_pads6_attr18_we & regen_qs),
-    .wd     (mio_pads6_attr18_wd),
-    .d      (hw2reg.mio_pads[18].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[18].qe),
-    .q      (reg2hw.mio_pads[18].q ),
-    .qs     (mio_pads6_attr18_qs)
-  );
-
-
-  // F[attr19]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads6_attr19 (
-    .re     (mio_pads6_attr19_re),
-    // qualified with register enable
-    .we     (mio_pads6_attr19_we & regen_qs),
-    .wd     (mio_pads6_attr19_wd),
-    .d      (hw2reg.mio_pads[19].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[19].qe),
-    .q      (reg2hw.mio_pads[19].q ),
-    .qs     (mio_pads6_attr19_qs)
-  );
-
-
-  // F[attr20]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads6_attr20 (
-    .re     (mio_pads6_attr20_re),
-    // qualified with register enable
-    .we     (mio_pads6_attr20_we & regen_qs),
-    .wd     (mio_pads6_attr20_wd),
-    .d      (hw2reg.mio_pads[20].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[20].qe),
-    .q      (reg2hw.mio_pads[20].q ),
-    .qs     (mio_pads6_attr20_qs)
-  );
-
-
-  // Subregister 21 of Multireg mio_pads
-  // R[mio_pads7]: V(True)
-
-  // F[attr21]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads7_attr21 (
-    .re     (mio_pads7_attr21_re),
-    // qualified with register enable
-    .we     (mio_pads7_attr21_we & regen_qs),
-    .wd     (mio_pads7_attr21_wd),
-    .d      (hw2reg.mio_pads[21].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[21].qe),
-    .q      (reg2hw.mio_pads[21].q ),
-    .qs     (mio_pads7_attr21_qs)
-  );
-
-
-  // F[attr22]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads7_attr22 (
-    .re     (mio_pads7_attr22_re),
-    // qualified with register enable
-    .we     (mio_pads7_attr22_we & regen_qs),
-    .wd     (mio_pads7_attr22_wd),
-    .d      (hw2reg.mio_pads[22].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[22].qe),
-    .q      (reg2hw.mio_pads[22].q ),
-    .qs     (mio_pads7_attr22_qs)
-  );
-
-
-  // F[attr23]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads7_attr23 (
-    .re     (mio_pads7_attr23_re),
-    // qualified with register enable
-    .we     (mio_pads7_attr23_we & regen_qs),
-    .wd     (mio_pads7_attr23_wd),
-    .d      (hw2reg.mio_pads[23].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[23].qe),
-    .q      (reg2hw.mio_pads[23].q ),
-    .qs     (mio_pads7_attr23_qs)
-  );
-
-
-  // Subregister 24 of Multireg mio_pads
-  // R[mio_pads8]: V(True)
-
-  // F[attr24]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads8_attr24 (
-    .re     (mio_pads8_attr24_re),
-    // qualified with register enable
-    .we     (mio_pads8_attr24_we & regen_qs),
-    .wd     (mio_pads8_attr24_wd),
-    .d      (hw2reg.mio_pads[24].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[24].qe),
-    .q      (reg2hw.mio_pads[24].q ),
-    .qs     (mio_pads8_attr24_qs)
-  );
-
-
-  // F[attr25]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads8_attr25 (
-    .re     (mio_pads8_attr25_re),
-    // qualified with register enable
-    .we     (mio_pads8_attr25_we & regen_qs),
-    .wd     (mio_pads8_attr25_wd),
-    .d      (hw2reg.mio_pads[25].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[25].qe),
-    .q      (reg2hw.mio_pads[25].q ),
-    .qs     (mio_pads8_attr25_qs)
-  );
-
-
-  // F[attr26]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads8_attr26 (
-    .re     (mio_pads8_attr26_re),
-    // qualified with register enable
-    .we     (mio_pads8_attr26_we & regen_qs),
-    .wd     (mio_pads8_attr26_wd),
-    .d      (hw2reg.mio_pads[26].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[26].qe),
-    .q      (reg2hw.mio_pads[26].q ),
-    .qs     (mio_pads8_attr26_qs)
-  );
-
-
-  // Subregister 27 of Multireg mio_pads
-  // R[mio_pads9]: V(True)
-
-  // F[attr27]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads9_attr27 (
-    .re     (mio_pads9_attr27_re),
-    // qualified with register enable
-    .we     (mio_pads9_attr27_we & regen_qs),
-    .wd     (mio_pads9_attr27_wd),
-    .d      (hw2reg.mio_pads[27].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[27].qe),
-    .q      (reg2hw.mio_pads[27].q ),
-    .qs     (mio_pads9_attr27_qs)
-  );
-
-
-  // F[attr28]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads9_attr28 (
-    .re     (mio_pads9_attr28_re),
-    // qualified with register enable
-    .we     (mio_pads9_attr28_we & regen_qs),
-    .wd     (mio_pads9_attr28_wd),
-    .d      (hw2reg.mio_pads[28].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[28].qe),
-    .q      (reg2hw.mio_pads[28].q ),
-    .qs     (mio_pads9_attr28_qs)
-  );
-
-
-  // F[attr29]: 29:20
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads9_attr29 (
-    .re     (mio_pads9_attr29_re),
-    // qualified with register enable
-    .we     (mio_pads9_attr29_we & regen_qs),
-    .wd     (mio_pads9_attr29_wd),
-    .d      (hw2reg.mio_pads[29].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[29].qe),
-    .q      (reg2hw.mio_pads[29].q ),
-    .qs     (mio_pads9_attr29_qs)
-  );
-
-
-  // Subregister 30 of Multireg mio_pads
-  // R[mio_pads10]: V(True)
-
-  // F[attr30]: 9:0
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads10_attr30 (
-    .re     (mio_pads10_attr30_re),
-    // qualified with register enable
-    .we     (mio_pads10_attr30_we & regen_qs),
-    .wd     (mio_pads10_attr30_wd),
-    .d      (hw2reg.mio_pads[30].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[30].qe),
-    .q      (reg2hw.mio_pads[30].q ),
-    .qs     (mio_pads10_attr30_qs)
-  );
-
-
-  // F[attr31]: 19:10
-  prim_subreg_ext #(
-    .DW    (10)
-  ) u_mio_pads10_attr31 (
-    .re     (mio_pads10_attr31_re),
-    // qualified with register enable
-    .we     (mio_pads10_attr31_we & regen_qs),
-    .wd     (mio_pads10_attr31_wd),
-    .d      (hw2reg.mio_pads[31].d),
-    .qre    (),
-    .qe     (reg2hw.mio_pads[31].qe),
-    .q      (reg2hw.mio_pads[31].q ),
-    .qs     (mio_pads10_attr31_qs)
-  );
-
-
-
-
+	prim_subreg_ext #(.DW(10)) u_dio_pads0_attr0(
+		.re(dio_pads0_attr0_re),
+		.we(dio_pads0_attr0_we & regen_qs),
+		.wd(dio_pads0_attr0_wd),
+		.d(hw2reg[329-:10]),
+		.qre(),
+		.qe(reg2hw[352]),
+		.q(reg2hw[362-:10]),
+		.qs(dio_pads0_attr0_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads0_attr1(
+		.re(dio_pads0_attr1_re),
+		.we(dio_pads0_attr1_we & regen_qs),
+		.wd(dio_pads0_attr1_wd),
+		.d(hw2reg[339-:10]),
+		.qre(),
+		.qe(reg2hw[363]),
+		.q(reg2hw[373-:10]),
+		.qs(dio_pads0_attr1_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads0_attr2(
+		.re(dio_pads0_attr2_re),
+		.we(dio_pads0_attr2_we & regen_qs),
+		.wd(dio_pads0_attr2_wd),
+		.d(hw2reg[349-:10]),
+		.qre(),
+		.qe(reg2hw[374]),
+		.q(reg2hw[384-:10]),
+		.qs(dio_pads0_attr2_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads1_attr3(
+		.re(dio_pads1_attr3_re),
+		.we(dio_pads1_attr3_we & regen_qs),
+		.wd(dio_pads1_attr3_wd),
+		.d(hw2reg[359-:10]),
+		.qre(),
+		.qe(reg2hw[385]),
+		.q(reg2hw[395-:10]),
+		.qs(dio_pads1_attr3_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads1_attr4(
+		.re(dio_pads1_attr4_re),
+		.we(dio_pads1_attr4_we & regen_qs),
+		.wd(dio_pads1_attr4_wd),
+		.d(hw2reg[369-:10]),
+		.qre(),
+		.qe(reg2hw[396]),
+		.q(reg2hw[406-:10]),
+		.qs(dio_pads1_attr4_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads1_attr5(
+		.re(dio_pads1_attr5_re),
+		.we(dio_pads1_attr5_we & regen_qs),
+		.wd(dio_pads1_attr5_wd),
+		.d(hw2reg[379-:10]),
+		.qre(),
+		.qe(reg2hw[407]),
+		.q(reg2hw[417-:10]),
+		.qs(dio_pads1_attr5_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads2_attr6(
+		.re(dio_pads2_attr6_re),
+		.we(dio_pads2_attr6_we & regen_qs),
+		.wd(dio_pads2_attr6_wd),
+		.d(hw2reg[389-:10]),
+		.qre(),
+		.qe(reg2hw[418]),
+		.q(reg2hw[428-:10]),
+		.qs(dio_pads2_attr6_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads2_attr7(
+		.re(dio_pads2_attr7_re),
+		.we(dio_pads2_attr7_we & regen_qs),
+		.wd(dio_pads2_attr7_wd),
+		.d(hw2reg[399-:10]),
+		.qre(),
+		.qe(reg2hw[429]),
+		.q(reg2hw[439-:10]),
+		.qs(dio_pads2_attr7_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads2_attr8(
+		.re(dio_pads2_attr8_re),
+		.we(dio_pads2_attr8_we & regen_qs),
+		.wd(dio_pads2_attr8_wd),
+		.d(hw2reg[409-:10]),
+		.qre(),
+		.qe(reg2hw[440]),
+		.q(reg2hw[450-:10]),
+		.qs(dio_pads2_attr8_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads3_attr9(
+		.re(dio_pads3_attr9_re),
+		.we(dio_pads3_attr9_we & regen_qs),
+		.wd(dio_pads3_attr9_wd),
+		.d(hw2reg[419-:10]),
+		.qre(),
+		.qe(reg2hw[451]),
+		.q(reg2hw[461-:10]),
+		.qs(dio_pads3_attr9_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads3_attr10(
+		.re(dio_pads3_attr10_re),
+		.we(dio_pads3_attr10_we & regen_qs),
+		.wd(dio_pads3_attr10_wd),
+		.d(hw2reg[429-:10]),
+		.qre(),
+		.qe(reg2hw[462]),
+		.q(reg2hw[472-:10]),
+		.qs(dio_pads3_attr10_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads3_attr11(
+		.re(dio_pads3_attr11_re),
+		.we(dio_pads3_attr11_we & regen_qs),
+		.wd(dio_pads3_attr11_wd),
+		.d(hw2reg[439-:10]),
+		.qre(),
+		.qe(reg2hw[473]),
+		.q(reg2hw[483-:10]),
+		.qs(dio_pads3_attr11_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads4_attr12(
+		.re(dio_pads4_attr12_re),
+		.we(dio_pads4_attr12_we & regen_qs),
+		.wd(dio_pads4_attr12_wd),
+		.d(hw2reg[449-:10]),
+		.qre(),
+		.qe(reg2hw[484]),
+		.q(reg2hw[494-:10]),
+		.qs(dio_pads4_attr12_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads4_attr13(
+		.re(dio_pads4_attr13_re),
+		.we(dio_pads4_attr13_we & regen_qs),
+		.wd(dio_pads4_attr13_wd),
+		.d(hw2reg[459-:10]),
+		.qre(),
+		.qe(reg2hw[495]),
+		.q(reg2hw[505-:10]),
+		.qs(dio_pads4_attr13_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_dio_pads4_attr14(
+		.re(dio_pads4_attr14_re),
+		.we(dio_pads4_attr14_we & regen_qs),
+		.wd(dio_pads4_attr14_wd),
+		.d(hw2reg[469-:10]),
+		.qre(),
+		.qe(reg2hw[506]),
+		.q(reg2hw[516-:10]),
+		.qs(dio_pads4_attr14_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads0_attr0(
+		.re(mio_pads0_attr0_re),
+		.we(mio_pads0_attr0_we & regen_qs),
+		.wd(mio_pads0_attr0_wd),
+		.d(hw2reg[9-:10]),
+		.qre(),
+		.qe(reg2hw[0]),
+		.q(reg2hw[10-:10]),
+		.qs(mio_pads0_attr0_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads0_attr1(
+		.re(mio_pads0_attr1_re),
+		.we(mio_pads0_attr1_we & regen_qs),
+		.wd(mio_pads0_attr1_wd),
+		.d(hw2reg[19-:10]),
+		.qre(),
+		.qe(reg2hw[11]),
+		.q(reg2hw[21-:10]),
+		.qs(mio_pads0_attr1_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads0_attr2(
+		.re(mio_pads0_attr2_re),
+		.we(mio_pads0_attr2_we & regen_qs),
+		.wd(mio_pads0_attr2_wd),
+		.d(hw2reg[29-:10]),
+		.qre(),
+		.qe(reg2hw[22]),
+		.q(reg2hw[32-:10]),
+		.qs(mio_pads0_attr2_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads1_attr3(
+		.re(mio_pads1_attr3_re),
+		.we(mio_pads1_attr3_we & regen_qs),
+		.wd(mio_pads1_attr3_wd),
+		.d(hw2reg[39-:10]),
+		.qre(),
+		.qe(reg2hw[33]),
+		.q(reg2hw[43-:10]),
+		.qs(mio_pads1_attr3_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads1_attr4(
+		.re(mio_pads1_attr4_re),
+		.we(mio_pads1_attr4_we & regen_qs),
+		.wd(mio_pads1_attr4_wd),
+		.d(hw2reg[49-:10]),
+		.qre(),
+		.qe(reg2hw[44]),
+		.q(reg2hw[54-:10]),
+		.qs(mio_pads1_attr4_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads1_attr5(
+		.re(mio_pads1_attr5_re),
+		.we(mio_pads1_attr5_we & regen_qs),
+		.wd(mio_pads1_attr5_wd),
+		.d(hw2reg[59-:10]),
+		.qre(),
+		.qe(reg2hw[55]),
+		.q(reg2hw[65-:10]),
+		.qs(mio_pads1_attr5_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads2_attr6(
+		.re(mio_pads2_attr6_re),
+		.we(mio_pads2_attr6_we & regen_qs),
+		.wd(mio_pads2_attr6_wd),
+		.d(hw2reg[69-:10]),
+		.qre(),
+		.qe(reg2hw[66]),
+		.q(reg2hw[76-:10]),
+		.qs(mio_pads2_attr6_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads2_attr7(
+		.re(mio_pads2_attr7_re),
+		.we(mio_pads2_attr7_we & regen_qs),
+		.wd(mio_pads2_attr7_wd),
+		.d(hw2reg[79-:10]),
+		.qre(),
+		.qe(reg2hw[77]),
+		.q(reg2hw[87-:10]),
+		.qs(mio_pads2_attr7_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads2_attr8(
+		.re(mio_pads2_attr8_re),
+		.we(mio_pads2_attr8_we & regen_qs),
+		.wd(mio_pads2_attr8_wd),
+		.d(hw2reg[89-:10]),
+		.qre(),
+		.qe(reg2hw[88]),
+		.q(reg2hw[98-:10]),
+		.qs(mio_pads2_attr8_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads3_attr9(
+		.re(mio_pads3_attr9_re),
+		.we(mio_pads3_attr9_we & regen_qs),
+		.wd(mio_pads3_attr9_wd),
+		.d(hw2reg[99-:10]),
+		.qre(),
+		.qe(reg2hw[99]),
+		.q(reg2hw[109-:10]),
+		.qs(mio_pads3_attr9_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads3_attr10(
+		.re(mio_pads3_attr10_re),
+		.we(mio_pads3_attr10_we & regen_qs),
+		.wd(mio_pads3_attr10_wd),
+		.d(hw2reg[109-:10]),
+		.qre(),
+		.qe(reg2hw[110]),
+		.q(reg2hw[120-:10]),
+		.qs(mio_pads3_attr10_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads3_attr11(
+		.re(mio_pads3_attr11_re),
+		.we(mio_pads3_attr11_we & regen_qs),
+		.wd(mio_pads3_attr11_wd),
+		.d(hw2reg[119-:10]),
+		.qre(),
+		.qe(reg2hw[121]),
+		.q(reg2hw[131-:10]),
+		.qs(mio_pads3_attr11_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads4_attr12(
+		.re(mio_pads4_attr12_re),
+		.we(mio_pads4_attr12_we & regen_qs),
+		.wd(mio_pads4_attr12_wd),
+		.d(hw2reg[129-:10]),
+		.qre(),
+		.qe(reg2hw[132]),
+		.q(reg2hw[142-:10]),
+		.qs(mio_pads4_attr12_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads4_attr13(
+		.re(mio_pads4_attr13_re),
+		.we(mio_pads4_attr13_we & regen_qs),
+		.wd(mio_pads4_attr13_wd),
+		.d(hw2reg[139-:10]),
+		.qre(),
+		.qe(reg2hw[143]),
+		.q(reg2hw[153-:10]),
+		.qs(mio_pads4_attr13_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads4_attr14(
+		.re(mio_pads4_attr14_re),
+		.we(mio_pads4_attr14_we & regen_qs),
+		.wd(mio_pads4_attr14_wd),
+		.d(hw2reg[149-:10]),
+		.qre(),
+		.qe(reg2hw[154]),
+		.q(reg2hw[164-:10]),
+		.qs(mio_pads4_attr14_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads5_attr15(
+		.re(mio_pads5_attr15_re),
+		.we(mio_pads5_attr15_we & regen_qs),
+		.wd(mio_pads5_attr15_wd),
+		.d(hw2reg[159-:10]),
+		.qre(),
+		.qe(reg2hw[165]),
+		.q(reg2hw[175-:10]),
+		.qs(mio_pads5_attr15_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads5_attr16(
+		.re(mio_pads5_attr16_re),
+		.we(mio_pads5_attr16_we & regen_qs),
+		.wd(mio_pads5_attr16_wd),
+		.d(hw2reg[169-:10]),
+		.qre(),
+		.qe(reg2hw[176]),
+		.q(reg2hw[186-:10]),
+		.qs(mio_pads5_attr16_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads5_attr17(
+		.re(mio_pads5_attr17_re),
+		.we(mio_pads5_attr17_we & regen_qs),
+		.wd(mio_pads5_attr17_wd),
+		.d(hw2reg[179-:10]),
+		.qre(),
+		.qe(reg2hw[187]),
+		.q(reg2hw[197-:10]),
+		.qs(mio_pads5_attr17_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads6_attr18(
+		.re(mio_pads6_attr18_re),
+		.we(mio_pads6_attr18_we & regen_qs),
+		.wd(mio_pads6_attr18_wd),
+		.d(hw2reg[189-:10]),
+		.qre(),
+		.qe(reg2hw[198]),
+		.q(reg2hw[208-:10]),
+		.qs(mio_pads6_attr18_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads6_attr19(
+		.re(mio_pads6_attr19_re),
+		.we(mio_pads6_attr19_we & regen_qs),
+		.wd(mio_pads6_attr19_wd),
+		.d(hw2reg[199-:10]),
+		.qre(),
+		.qe(reg2hw[209]),
+		.q(reg2hw[219-:10]),
+		.qs(mio_pads6_attr19_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads6_attr20(
+		.re(mio_pads6_attr20_re),
+		.we(mio_pads6_attr20_we & regen_qs),
+		.wd(mio_pads6_attr20_wd),
+		.d(hw2reg[209-:10]),
+		.qre(),
+		.qe(reg2hw[220]),
+		.q(reg2hw[230-:10]),
+		.qs(mio_pads6_attr20_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads7_attr21(
+		.re(mio_pads7_attr21_re),
+		.we(mio_pads7_attr21_we & regen_qs),
+		.wd(mio_pads7_attr21_wd),
+		.d(hw2reg[219-:10]),
+		.qre(),
+		.qe(reg2hw[231]),
+		.q(reg2hw[241-:10]),
+		.qs(mio_pads7_attr21_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads7_attr22(
+		.re(mio_pads7_attr22_re),
+		.we(mio_pads7_attr22_we & regen_qs),
+		.wd(mio_pads7_attr22_wd),
+		.d(hw2reg[229-:10]),
+		.qre(),
+		.qe(reg2hw[242]),
+		.q(reg2hw[252-:10]),
+		.qs(mio_pads7_attr22_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads7_attr23(
+		.re(mio_pads7_attr23_re),
+		.we(mio_pads7_attr23_we & regen_qs),
+		.wd(mio_pads7_attr23_wd),
+		.d(hw2reg[239-:10]),
+		.qre(),
+		.qe(reg2hw[253]),
+		.q(reg2hw[263-:10]),
+		.qs(mio_pads7_attr23_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads8_attr24(
+		.re(mio_pads8_attr24_re),
+		.we(mio_pads8_attr24_we & regen_qs),
+		.wd(mio_pads8_attr24_wd),
+		.d(hw2reg[249-:10]),
+		.qre(),
+		.qe(reg2hw[264]),
+		.q(reg2hw[274-:10]),
+		.qs(mio_pads8_attr24_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads8_attr25(
+		.re(mio_pads8_attr25_re),
+		.we(mio_pads8_attr25_we & regen_qs),
+		.wd(mio_pads8_attr25_wd),
+		.d(hw2reg[259-:10]),
+		.qre(),
+		.qe(reg2hw[275]),
+		.q(reg2hw[285-:10]),
+		.qs(mio_pads8_attr25_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads8_attr26(
+		.re(mio_pads8_attr26_re),
+		.we(mio_pads8_attr26_we & regen_qs),
+		.wd(mio_pads8_attr26_wd),
+		.d(hw2reg[269-:10]),
+		.qre(),
+		.qe(reg2hw[286]),
+		.q(reg2hw[296-:10]),
+		.qs(mio_pads8_attr26_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads9_attr27(
+		.re(mio_pads9_attr27_re),
+		.we(mio_pads9_attr27_we & regen_qs),
+		.wd(mio_pads9_attr27_wd),
+		.d(hw2reg[279-:10]),
+		.qre(),
+		.qe(reg2hw[297]),
+		.q(reg2hw[307-:10]),
+		.qs(mio_pads9_attr27_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads9_attr28(
+		.re(mio_pads9_attr28_re),
+		.we(mio_pads9_attr28_we & regen_qs),
+		.wd(mio_pads9_attr28_wd),
+		.d(hw2reg[289-:10]),
+		.qre(),
+		.qe(reg2hw[308]),
+		.q(reg2hw[318-:10]),
+		.qs(mio_pads9_attr28_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads9_attr29(
+		.re(mio_pads9_attr29_re),
+		.we(mio_pads9_attr29_we & regen_qs),
+		.wd(mio_pads9_attr29_wd),
+		.d(hw2reg[299-:10]),
+		.qre(),
+		.qe(reg2hw[319]),
+		.q(reg2hw[329-:10]),
+		.qs(mio_pads9_attr29_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads10_attr30(
+		.re(mio_pads10_attr30_re),
+		.we(mio_pads10_attr30_we & regen_qs),
+		.wd(mio_pads10_attr30_wd),
+		.d(hw2reg[309-:10]),
+		.qre(),
+		.qe(reg2hw[330]),
+		.q(reg2hw[340-:10]),
+		.qs(mio_pads10_attr30_qs)
+	);
+	prim_subreg_ext #(.DW(10)) u_mio_pads10_attr31(
+		.re(mio_pads10_attr31_re),
+		.we(mio_pads10_attr31_we & regen_qs),
+		.wd(mio_pads10_attr31_wd),
+		.d(hw2reg[319-:10]),
+		.qre(),
+		.qe(reg2hw[341]),
+		.q(reg2hw[351-:10]),
+		.qs(mio_pads10_attr31_qs)
+	);
 
   logic [16:0] addr_hit;
   always_comb begin
diff --git a/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv b/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv
index bf3bc9fc3..c857dccd5 100644
--- a/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv
+++ b/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv
@@ -14,8 +14,8 @@ module pinmux_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output pinmux_reg_pkg::pinmux_reg2hw_t reg2hw, // Write
-  input  pinmux_reg_pkg::pinmux_hw2reg_t hw2reg, // Read
+  output wire [660:0] reg2hw,
+  input wire [37:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -628,4224 +628,2395 @@ module pinmux_reg_top (
 
 
 
-  // Subregister 0 of Multireg periph_insel
-  // R[periph_insel0]: V(False)
-
-  // F[in0]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in0_we & regen_qs),
-    .wd     (periph_insel0_in0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[0].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in0_qs)
-  );
-
-
-  // F[in1]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in1_we & regen_qs),
-    .wd     (periph_insel0_in1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[1].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in1_qs)
-  );
-
-
-  // F[in2]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in2_we & regen_qs),
-    .wd     (periph_insel0_in2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[2].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in2_qs)
-  );
-
-
-  // F[in3]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in3_we & regen_qs),
-    .wd     (periph_insel0_in3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[3].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in3_qs)
-  );
-
-
-  // F[in4]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in4_we & regen_qs),
-    .wd     (periph_insel0_in4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[4].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in4_qs)
-  );
-
-
-  // Subregister 5 of Multireg periph_insel
-  // R[periph_insel1]: V(False)
-
-  // F[in5]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in5_we & regen_qs),
-    .wd     (periph_insel1_in5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[5].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in5_qs)
-  );
-
-
-  // F[in6]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in6_we & regen_qs),
-    .wd     (periph_insel1_in6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[6].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in6_qs)
-  );
-
-
-  // F[in7]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in7_we & regen_qs),
-    .wd     (periph_insel1_in7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[7].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in7_qs)
-  );
-
-
-  // F[in8]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in8_we & regen_qs),
-    .wd     (periph_insel1_in8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[8].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in8_qs)
-  );
-
-
-  // F[in9]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in9_we & regen_qs),
-    .wd     (periph_insel1_in9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[9].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in9_qs)
-  );
-
-
-  // Subregister 10 of Multireg periph_insel
-  // R[periph_insel2]: V(False)
-
-  // F[in10]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in10_we & regen_qs),
-    .wd     (periph_insel2_in10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[10].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in10_qs)
-  );
-
-
-  // F[in11]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in11_we & regen_qs),
-    .wd     (periph_insel2_in11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[11].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in11_qs)
-  );
-
-
-  // F[in12]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in12_we & regen_qs),
-    .wd     (periph_insel2_in12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[12].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in12_qs)
-  );
-
-
-  // F[in13]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in13_we & regen_qs),
-    .wd     (periph_insel2_in13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[13].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in13_qs)
-  );
-
-
-  // F[in14]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in14_we & regen_qs),
-    .wd     (periph_insel2_in14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[14].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in14_qs)
-  );
-
-
-  // Subregister 15 of Multireg periph_insel
-  // R[periph_insel3]: V(False)
-
-  // F[in15]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in15_we & regen_qs),
-    .wd     (periph_insel3_in15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[15].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in15_qs)
-  );
-
-
-  // F[in16]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in16_we & regen_qs),
-    .wd     (periph_insel3_in16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[16].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in16_qs)
-  );
-
-
-  // F[in17]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in17_we & regen_qs),
-    .wd     (periph_insel3_in17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[17].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in17_qs)
-  );
-
-
-  // F[in18]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in18_we & regen_qs),
-    .wd     (periph_insel3_in18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[18].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in18_qs)
-  );
-
-
-  // F[in19]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in19_we & regen_qs),
-    .wd     (periph_insel3_in19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[19].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in19_qs)
-  );
-
-
-  // Subregister 20 of Multireg periph_insel
-  // R[periph_insel4]: V(False)
-
-  // F[in20]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in20_we & regen_qs),
-    .wd     (periph_insel4_in20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[20].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in20_qs)
-  );
-
-
-  // F[in21]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in21_we & regen_qs),
-    .wd     (periph_insel4_in21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[21].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in21_qs)
-  );
-
-
-  // F[in22]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in22_we & regen_qs),
-    .wd     (periph_insel4_in22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[22].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in22_qs)
-  );
-
-
-  // F[in23]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in23_we & regen_qs),
-    .wd     (periph_insel4_in23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[23].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in23_qs)
-  );
-
-
-  // F[in24]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in24_we & regen_qs),
-    .wd     (periph_insel4_in24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[24].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in24_qs)
-  );
-
-
-  // Subregister 25 of Multireg periph_insel
-  // R[periph_insel5]: V(False)
-
-  // F[in25]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in25_we & regen_qs),
-    .wd     (periph_insel5_in25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[25].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in25_qs)
-  );
-
-
-  // F[in26]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in26_we & regen_qs),
-    .wd     (periph_insel5_in26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[26].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in26_qs)
-  );
-
-
-  // F[in27]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in27_we & regen_qs),
-    .wd     (periph_insel5_in27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[27].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in27_qs)
-  );
-
-
-  // F[in28]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in28_we & regen_qs),
-    .wd     (periph_insel5_in28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[28].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in28_qs)
-  );
-
-
-  // F[in29]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in29_we & regen_qs),
-    .wd     (periph_insel5_in29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[29].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in29_qs)
-  );
-
-
-  // Subregister 30 of Multireg periph_insel
-  // R[periph_insel6]: V(False)
-
-  // F[in30]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel6_in30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel6_in30_we & regen_qs),
-    .wd     (periph_insel6_in30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[30].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel6_in30_qs)
-  );
-
-
-  // F[in31]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel6_in31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel6_in31_we & regen_qs),
-    .wd     (periph_insel6_in31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[31].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel6_in31_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg mio_outsel
-  // R[mio_outsel0]: V(False)
-
-  // F[out0]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out0_we & regen_qs),
-    .wd     (mio_outsel0_out0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[0].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out0_qs)
-  );
-
-
-  // F[out1]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out1_we & regen_qs),
-    .wd     (mio_outsel0_out1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[1].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out1_qs)
-  );
-
-
-  // F[out2]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out2_we & regen_qs),
-    .wd     (mio_outsel0_out2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[2].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out2_qs)
-  );
-
-
-  // F[out3]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out3_we & regen_qs),
-    .wd     (mio_outsel0_out3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[3].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out3_qs)
-  );
-
-
-  // F[out4]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out4_we & regen_qs),
-    .wd     (mio_outsel0_out4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[4].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out4_qs)
-  );
-
-
-  // Subregister 5 of Multireg mio_outsel
-  // R[mio_outsel1]: V(False)
-
-  // F[out5]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out5_we & regen_qs),
-    .wd     (mio_outsel1_out5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[5].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out5_qs)
-  );
-
-
-  // F[out6]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out6_we & regen_qs),
-    .wd     (mio_outsel1_out6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[6].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out6_qs)
-  );
-
-
-  // F[out7]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out7_we & regen_qs),
-    .wd     (mio_outsel1_out7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[7].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out7_qs)
-  );
-
-
-  // F[out8]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out8_we & regen_qs),
-    .wd     (mio_outsel1_out8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[8].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out8_qs)
-  );
-
-
-  // F[out9]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out9_we & regen_qs),
-    .wd     (mio_outsel1_out9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[9].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out9_qs)
-  );
-
-
-  // Subregister 10 of Multireg mio_outsel
-  // R[mio_outsel2]: V(False)
-
-  // F[out10]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out10_we & regen_qs),
-    .wd     (mio_outsel2_out10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[10].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out10_qs)
-  );
-
-
-  // F[out11]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out11_we & regen_qs),
-    .wd     (mio_outsel2_out11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[11].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out11_qs)
-  );
-
-
-  // F[out12]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out12_we & regen_qs),
-    .wd     (mio_outsel2_out12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[12].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out12_qs)
-  );
-
-
-  // F[out13]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out13_we & regen_qs),
-    .wd     (mio_outsel2_out13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[13].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out13_qs)
-  );
-
-
-  // F[out14]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out14_we & regen_qs),
-    .wd     (mio_outsel2_out14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[14].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out14_qs)
-  );
-
-
-  // Subregister 15 of Multireg mio_outsel
-  // R[mio_outsel3]: V(False)
-
-  // F[out15]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out15_we & regen_qs),
-    .wd     (mio_outsel3_out15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[15].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out15_qs)
-  );
-
-
-  // F[out16]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out16_we & regen_qs),
-    .wd     (mio_outsel3_out16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[16].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out16_qs)
-  );
-
-
-  // F[out17]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out17_we & regen_qs),
-    .wd     (mio_outsel3_out17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[17].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out17_qs)
-  );
-
-
-  // F[out18]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out18_we & regen_qs),
-    .wd     (mio_outsel3_out18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[18].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out18_qs)
-  );
-
-
-  // F[out19]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out19_we & regen_qs),
-    .wd     (mio_outsel3_out19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[19].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out19_qs)
-  );
-
-
-  // Subregister 20 of Multireg mio_outsel
-  // R[mio_outsel4]: V(False)
-
-  // F[out20]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out20_we & regen_qs),
-    .wd     (mio_outsel4_out20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[20].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out20_qs)
-  );
-
-
-  // F[out21]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out21_we & regen_qs),
-    .wd     (mio_outsel4_out21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[21].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out21_qs)
-  );
-
-
-  // F[out22]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out22_we & regen_qs),
-    .wd     (mio_outsel4_out22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[22].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out22_qs)
-  );
-
-
-  // F[out23]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out23_we & regen_qs),
-    .wd     (mio_outsel4_out23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[23].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out23_qs)
-  );
-
-
-  // F[out24]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out24_we & regen_qs),
-    .wd     (mio_outsel4_out24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[24].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out24_qs)
-  );
-
-
-  // Subregister 25 of Multireg mio_outsel
-  // R[mio_outsel5]: V(False)
-
-  // F[out25]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out25_we & regen_qs),
-    .wd     (mio_outsel5_out25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[25].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out25_qs)
-  );
-
-
-  // F[out26]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out26_we & regen_qs),
-    .wd     (mio_outsel5_out26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[26].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out26_qs)
-  );
-
-
-  // F[out27]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out27_we & regen_qs),
-    .wd     (mio_outsel5_out27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[27].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out27_qs)
-  );
-
-
-  // F[out28]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out28_we & regen_qs),
-    .wd     (mio_outsel5_out28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[28].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out28_qs)
-  );
-
-
-  // F[out29]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out29_we & regen_qs),
-    .wd     (mio_outsel5_out29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[29].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out29_qs)
-  );
-
-
-  // Subregister 30 of Multireg mio_outsel
-  // R[mio_outsel6]: V(False)
-
-  // F[out30]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel6_out30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel6_out30_we & regen_qs),
-    .wd     (mio_outsel6_out30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[30].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel6_out30_qs)
-  );
-
-
-  // F[out31]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel6_out31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel6_out31_we & regen_qs),
-    .wd     (mio_outsel6_out31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[31].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel6_out31_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg mio_out_sleep_val
-  // R[mio_out_sleep_val0]: V(False)
-
-  // F[out0]: 1:0
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out0_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[0].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out0_qs)
-  );
-
-
-  // F[out1]: 3:2
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out1_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[1].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out1_qs)
-  );
-
-
-  // F[out2]: 5:4
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out2_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[2].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out2_qs)
-  );
-
-
-  // F[out3]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out3_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[3].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out3_qs)
-  );
-
-
-  // F[out4]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out4_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[4].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out4_qs)
-  );
-
-
-  // F[out5]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out5_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[5].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out5_qs)
-  );
-
-
-  // F[out6]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out6_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[6].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out6_qs)
-  );
-
-
-  // F[out7]: 15:14
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out7_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[7].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out7_qs)
-  );
-
-
-  // F[out8]: 17:16
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out8_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[8].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out8_qs)
-  );
-
-
-  // F[out9]: 19:18
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out9_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[9].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out9_qs)
-  );
-
-
-  // F[out10]: 21:20
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out10_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[10].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out10_qs)
-  );
-
-
-  // F[out11]: 23:22
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out11_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[11].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out11_qs)
-  );
-
-
-  // F[out12]: 25:24
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out12_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[12].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out12_qs)
-  );
-
-
-  // F[out13]: 27:26
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out13_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[13].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out13_qs)
-  );
-
-
-  // F[out14]: 29:28
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out14_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[14].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out14_qs)
-  );
-
-
-  // F[out15]: 31:30
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out15_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[15].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out15_qs)
-  );
-
-
-  // Subregister 16 of Multireg mio_out_sleep_val
-  // R[mio_out_sleep_val1]: V(False)
-
-  // F[out16]: 1:0
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out16_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[16].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out16_qs)
-  );
-
-
-  // F[out17]: 3:2
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out17_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[17].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out17_qs)
-  );
-
-
-  // F[out18]: 5:4
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out18_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[18].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out18_qs)
-  );
-
-
-  // F[out19]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out19_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[19].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out19_qs)
-  );
-
-
-  // F[out20]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out20_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[20].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out20_qs)
-  );
-
-
-  // F[out21]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out21_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[21].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out21_qs)
-  );
-
-
-  // F[out22]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out22_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[22].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out22_qs)
-  );
-
-
-  // F[out23]: 15:14
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out23_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[23].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out23_qs)
-  );
-
-
-  // F[out24]: 17:16
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out24_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[24].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out24_qs)
-  );
-
-
-  // F[out25]: 19:18
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out25_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[25].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out25_qs)
-  );
-
-
-  // F[out26]: 21:20
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out26_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[26].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out26_qs)
-  );
-
-
-  // F[out27]: 23:22
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out27_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[27].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out27_qs)
-  );
-
-
-  // F[out28]: 25:24
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out28_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[28].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out28_qs)
-  );
-
-
-  // F[out29]: 27:26
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out29_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[29].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out29_qs)
-  );
-
-
-  // F[out30]: 29:28
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out30_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[30].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out30_qs)
-  );
-
-
-  // F[out31]: 31:30
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out31_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[31].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out31_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg dio_out_sleep_val
-  // R[dio_out_sleep_val]: V(True)
-
-  // F[out0]: 1:0
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out0 (
-    .re     (dio_out_sleep_val_out0_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out0_we & regen_qs),
-    .wd     (dio_out_sleep_val_out0_wd),
-    .d      (hw2reg.dio_out_sleep_val[0].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[0].qe),
-    .q      (reg2hw.dio_out_sleep_val[0].q ),
-    .qs     (dio_out_sleep_val_out0_qs)
-  );
-
-
-  // F[out1]: 3:2
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out1 (
-    .re     (dio_out_sleep_val_out1_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out1_we & regen_qs),
-    .wd     (dio_out_sleep_val_out1_wd),
-    .d      (hw2reg.dio_out_sleep_val[1].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[1].qe),
-    .q      (reg2hw.dio_out_sleep_val[1].q ),
-    .qs     (dio_out_sleep_val_out1_qs)
-  );
-
-
-  // F[out2]: 5:4
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out2 (
-    .re     (dio_out_sleep_val_out2_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out2_we & regen_qs),
-    .wd     (dio_out_sleep_val_out2_wd),
-    .d      (hw2reg.dio_out_sleep_val[2].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[2].qe),
-    .q      (reg2hw.dio_out_sleep_val[2].q ),
-    .qs     (dio_out_sleep_val_out2_qs)
-  );
-
-
-  // F[out3]: 7:6
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out3 (
-    .re     (dio_out_sleep_val_out3_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out3_we & regen_qs),
-    .wd     (dio_out_sleep_val_out3_wd),
-    .d      (hw2reg.dio_out_sleep_val[3].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[3].qe),
-    .q      (reg2hw.dio_out_sleep_val[3].q ),
-    .qs     (dio_out_sleep_val_out3_qs)
-  );
-
-
-  // F[out4]: 9:8
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out4 (
-    .re     (dio_out_sleep_val_out4_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out4_we & regen_qs),
-    .wd     (dio_out_sleep_val_out4_wd),
-    .d      (hw2reg.dio_out_sleep_val[4].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[4].qe),
-    .q      (reg2hw.dio_out_sleep_val[4].q ),
-    .qs     (dio_out_sleep_val_out4_qs)
-  );
-
-
-  // F[out5]: 11:10
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out5 (
-    .re     (dio_out_sleep_val_out5_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out5_we & regen_qs),
-    .wd     (dio_out_sleep_val_out5_wd),
-    .d      (hw2reg.dio_out_sleep_val[5].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[5].qe),
-    .q      (reg2hw.dio_out_sleep_val[5].q ),
-    .qs     (dio_out_sleep_val_out5_qs)
-  );
-
-
-  // F[out6]: 13:12
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out6 (
-    .re     (dio_out_sleep_val_out6_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out6_we & regen_qs),
-    .wd     (dio_out_sleep_val_out6_wd),
-    .d      (hw2reg.dio_out_sleep_val[6].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[6].qe),
-    .q      (reg2hw.dio_out_sleep_val[6].q ),
-    .qs     (dio_out_sleep_val_out6_qs)
-  );
-
-
-  // F[out7]: 15:14
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out7 (
-    .re     (dio_out_sleep_val_out7_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out7_we & regen_qs),
-    .wd     (dio_out_sleep_val_out7_wd),
-    .d      (hw2reg.dio_out_sleep_val[7].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[7].qe),
-    .q      (reg2hw.dio_out_sleep_val[7].q ),
-    .qs     (dio_out_sleep_val_out7_qs)
-  );
-
-
-  // F[out8]: 17:16
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out8 (
-    .re     (dio_out_sleep_val_out8_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out8_we & regen_qs),
-    .wd     (dio_out_sleep_val_out8_wd),
-    .d      (hw2reg.dio_out_sleep_val[8].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[8].qe),
-    .q      (reg2hw.dio_out_sleep_val[8].q ),
-    .qs     (dio_out_sleep_val_out8_qs)
-  );
-
-
-  // F[out9]: 19:18
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out9 (
-    .re     (dio_out_sleep_val_out9_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out9_we & regen_qs),
-    .wd     (dio_out_sleep_val_out9_wd),
-    .d      (hw2reg.dio_out_sleep_val[9].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[9].qe),
-    .q      (reg2hw.dio_out_sleep_val[9].q ),
-    .qs     (dio_out_sleep_val_out9_qs)
-  );
-
-
-  // F[out10]: 21:20
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out10 (
-    .re     (dio_out_sleep_val_out10_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out10_we & regen_qs),
-    .wd     (dio_out_sleep_val_out10_wd),
-    .d      (hw2reg.dio_out_sleep_val[10].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[10].qe),
-    .q      (reg2hw.dio_out_sleep_val[10].q ),
-    .qs     (dio_out_sleep_val_out10_qs)
-  );
-
-
-  // F[out11]: 23:22
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out11 (
-    .re     (dio_out_sleep_val_out11_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out11_we & regen_qs),
-    .wd     (dio_out_sleep_val_out11_wd),
-    .d      (hw2reg.dio_out_sleep_val[11].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[11].qe),
-    .q      (reg2hw.dio_out_sleep_val[11].q ),
-    .qs     (dio_out_sleep_val_out11_qs)
-  );
-
-
-  // F[out12]: 25:24
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out12 (
-    .re     (dio_out_sleep_val_out12_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out12_we & regen_qs),
-    .wd     (dio_out_sleep_val_out12_wd),
-    .d      (hw2reg.dio_out_sleep_val[12].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[12].qe),
-    .q      (reg2hw.dio_out_sleep_val[12].q ),
-    .qs     (dio_out_sleep_val_out12_qs)
-  );
-
-
-  // F[out13]: 27:26
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out13 (
-    .re     (dio_out_sleep_val_out13_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out13_we & regen_qs),
-    .wd     (dio_out_sleep_val_out13_wd),
-    .d      (hw2reg.dio_out_sleep_val[13].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[13].qe),
-    .q      (reg2hw.dio_out_sleep_val[13].q ),
-    .qs     (dio_out_sleep_val_out13_qs)
-  );
-
-
-  // F[out14]: 29:28
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out14 (
-    .re     (dio_out_sleep_val_out14_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out14_we & regen_qs),
-    .wd     (dio_out_sleep_val_out14_wd),
-    .d      (hw2reg.dio_out_sleep_val[14].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[14].qe),
-    .q      (reg2hw.dio_out_sleep_val[14].q ),
-    .qs     (dio_out_sleep_val_out14_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector_en
-  // R[wkup_detector_en]: V(False)
-
-  // F[en0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en0_we & regen_qs),
-    .wd     (wkup_detector_en_en0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[0].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en0_qs)
-  );
-
-
-  // F[en1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en1_we & regen_qs),
-    .wd     (wkup_detector_en_en1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[1].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en1_qs)
-  );
-
-
-  // F[en2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en2_we & regen_qs),
-    .wd     (wkup_detector_en_en2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[2].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en2_qs)
-  );
-
-
-  // F[en3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en3_we & regen_qs),
-    .wd     (wkup_detector_en_en3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[3].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en3_qs)
-  );
-
-
-  // F[en4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en4_we & regen_qs),
-    .wd     (wkup_detector_en_en4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[4].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en4_qs)
-  );
-
-
-  // F[en5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en5_we & regen_qs),
-    .wd     (wkup_detector_en_en5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[5].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en5_qs)
-  );
-
-
-  // F[en6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en6_we & regen_qs),
-    .wd     (wkup_detector_en_en6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[6].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en6_qs)
-  );
-
-
-  // F[en7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en7_we & regen_qs),
-    .wd     (wkup_detector_en_en7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[7].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector
-  // R[wkup_detector0]: V(False)
-
-  // F[mode0]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector0_mode0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector0_mode0_we & regen_qs),
-    .wd     (wkup_detector0_mode0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[0].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector0_mode0_qs)
-  );
-
-
-  // F[filter0]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector0_filter0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector0_filter0_we & regen_qs),
-    .wd     (wkup_detector0_filter0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[0].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector0_filter0_qs)
-  );
-
-
-  // F[miodio0]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector0_miodio0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector0_miodio0_we & regen_qs),
-    .wd     (wkup_detector0_miodio0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[0].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector0_miodio0_qs)
-  );
-
-
-  // Subregister 1 of Multireg wkup_detector
-  // R[wkup_detector1]: V(False)
-
-  // F[mode1]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector1_mode1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector1_mode1_we & regen_qs),
-    .wd     (wkup_detector1_mode1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[1].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector1_mode1_qs)
-  );
-
-
-  // F[filter1]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector1_filter1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector1_filter1_we & regen_qs),
-    .wd     (wkup_detector1_filter1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[1].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector1_filter1_qs)
-  );
-
-
-  // F[miodio1]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector1_miodio1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector1_miodio1_we & regen_qs),
-    .wd     (wkup_detector1_miodio1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[1].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector1_miodio1_qs)
-  );
-
-
-  // Subregister 2 of Multireg wkup_detector
-  // R[wkup_detector2]: V(False)
-
-  // F[mode2]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector2_mode2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector2_mode2_we & regen_qs),
-    .wd     (wkup_detector2_mode2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[2].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector2_mode2_qs)
-  );
-
-
-  // F[filter2]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector2_filter2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector2_filter2_we & regen_qs),
-    .wd     (wkup_detector2_filter2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[2].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector2_filter2_qs)
-  );
-
-
-  // F[miodio2]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector2_miodio2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector2_miodio2_we & regen_qs),
-    .wd     (wkup_detector2_miodio2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[2].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector2_miodio2_qs)
-  );
-
-
-  // Subregister 3 of Multireg wkup_detector
-  // R[wkup_detector3]: V(False)
-
-  // F[mode3]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector3_mode3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector3_mode3_we & regen_qs),
-    .wd     (wkup_detector3_mode3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[3].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector3_mode3_qs)
-  );
-
-
-  // F[filter3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector3_filter3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector3_filter3_we & regen_qs),
-    .wd     (wkup_detector3_filter3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[3].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector3_filter3_qs)
-  );
-
-
-  // F[miodio3]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector3_miodio3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector3_miodio3_we & regen_qs),
-    .wd     (wkup_detector3_miodio3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[3].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector3_miodio3_qs)
-  );
-
-
-  // Subregister 4 of Multireg wkup_detector
-  // R[wkup_detector4]: V(False)
-
-  // F[mode4]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector4_mode4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector4_mode4_we & regen_qs),
-    .wd     (wkup_detector4_mode4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[4].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector4_mode4_qs)
-  );
-
-
-  // F[filter4]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector4_filter4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector4_filter4_we & regen_qs),
-    .wd     (wkup_detector4_filter4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[4].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector4_filter4_qs)
-  );
-
-
-  // F[miodio4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector4_miodio4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector4_miodio4_we & regen_qs),
-    .wd     (wkup_detector4_miodio4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[4].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector4_miodio4_qs)
-  );
-
-
-  // Subregister 5 of Multireg wkup_detector
-  // R[wkup_detector5]: V(False)
-
-  // F[mode5]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector5_mode5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector5_mode5_we & regen_qs),
-    .wd     (wkup_detector5_mode5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[5].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector5_mode5_qs)
-  );
-
-
-  // F[filter5]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector5_filter5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector5_filter5_we & regen_qs),
-    .wd     (wkup_detector5_filter5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[5].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector5_filter5_qs)
-  );
-
-
-  // F[miodio5]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector5_miodio5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector5_miodio5_we & regen_qs),
-    .wd     (wkup_detector5_miodio5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[5].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector5_miodio5_qs)
-  );
-
-
-  // Subregister 6 of Multireg wkup_detector
-  // R[wkup_detector6]: V(False)
-
-  // F[mode6]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector6_mode6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector6_mode6_we & regen_qs),
-    .wd     (wkup_detector6_mode6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[6].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector6_mode6_qs)
-  );
-
-
-  // F[filter6]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector6_filter6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector6_filter6_we & regen_qs),
-    .wd     (wkup_detector6_filter6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[6].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector6_filter6_qs)
-  );
-
-
-  // F[miodio6]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector6_miodio6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector6_miodio6_we & regen_qs),
-    .wd     (wkup_detector6_miodio6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[6].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector6_miodio6_qs)
-  );
-
-
-  // Subregister 7 of Multireg wkup_detector
-  // R[wkup_detector7]: V(False)
-
-  // F[mode7]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector7_mode7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector7_mode7_we & regen_qs),
-    .wd     (wkup_detector7_mode7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[7].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector7_mode7_qs)
-  );
-
-
-  // F[filter7]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector7_filter7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector7_filter7_we & regen_qs),
-    .wd     (wkup_detector7_filter7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[7].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector7_filter7_qs)
-  );
-
-
-  // F[miodio7]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector7_miodio7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector7_miodio7_we & regen_qs),
-    .wd     (wkup_detector7_miodio7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[7].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector7_miodio7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector_cnt_th
-  // R[wkup_detector_cnt_th0]: V(False)
-
-  // F[th0]: 7:0
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th0_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[0].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th0_qs)
-  );
-
-
-  // F[th1]: 15:8
   prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th1_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[1].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th1_qs)
-  );
-
-
-  // F[th2]: 23:16
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th2_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[2].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th2_qs)
-  );
-
-
-  // F[th3]: 31:24
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th3_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[3].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th3_qs)
-  );
-
-
-  // Subregister 4 of Multireg wkup_detector_cnt_th
-  // R[wkup_detector_cnt_th1]: V(False)
-
-  // F[th4]: 7:0
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th4_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[4].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th4_qs)
-  );
-
-
-  // F[th5]: 15:8
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th5_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[5].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th5_qs)
-  );
-
-
-  // F[th6]: 23:16
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th6_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[6].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th6_qs)
-  );
-
-
-  // F[th7]: 31:24
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th7_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[7].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector_padsel
-  // R[wkup_detector_padsel0]: V(False)
-
-  // F[sel0]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel0_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[0].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel0_qs)
-  );
-
-
-  // F[sel1]: 9:5
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel1_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[1].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel1_qs)
-  );
-
-
-  // F[sel2]: 14:10
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel2_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[2].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel2_qs)
-  );
-
-
-  // F[sel3]: 19:15
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel3_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[3].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel3_qs)
-  );
-
-
-  // F[sel4]: 24:20
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel4_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[4].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel4_qs)
-  );
-
-
-  // F[sel5]: 29:25
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel5_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[5].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel5_qs)
-  );
-
-
-  // Subregister 6 of Multireg wkup_detector_padsel
-  // R[wkup_detector_padsel1]: V(False)
-
-  // F[sel6]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel1_sel6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel1_sel6_we & regen_qs),
-    .wd     (wkup_detector_padsel1_sel6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[6].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel1_sel6_qs)
-  );
-
-
-  // F[sel7]: 9:5
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel1_sel7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel1_sel7_we & regen_qs),
-    .wd     (wkup_detector_padsel1_sel7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[7].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel1_sel7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_cause
-  // R[wkup_cause]: V(True)
-
-  // F[cause0]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause0 (
-    .re     (wkup_cause_cause0_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause0_we & regen_qs),
-    .wd     (wkup_cause_cause0_wd),
-    .d      (hw2reg.wkup_cause[0].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[0].qe),
-    .q      (reg2hw.wkup_cause[0].q ),
-    .qs     (wkup_cause_cause0_qs)
-  );
-
-
-  // F[cause1]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause1 (
-    .re     (wkup_cause_cause1_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause1_we & regen_qs),
-    .wd     (wkup_cause_cause1_wd),
-    .d      (hw2reg.wkup_cause[1].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[1].qe),
-    .q      (reg2hw.wkup_cause[1].q ),
-    .qs     (wkup_cause_cause1_qs)
-  );
-
-
-  // F[cause2]: 2:2
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause2 (
-    .re     (wkup_cause_cause2_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause2_we & regen_qs),
-    .wd     (wkup_cause_cause2_wd),
-    .d      (hw2reg.wkup_cause[2].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[2].qe),
-    .q      (reg2hw.wkup_cause[2].q ),
-    .qs     (wkup_cause_cause2_qs)
-  );
-
-
-  // F[cause3]: 3:3
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause3 (
-    .re     (wkup_cause_cause3_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause3_we & regen_qs),
-    .wd     (wkup_cause_cause3_wd),
-    .d      (hw2reg.wkup_cause[3].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[3].qe),
-    .q      (reg2hw.wkup_cause[3].q ),
-    .qs     (wkup_cause_cause3_qs)
-  );
-
-
-  // F[cause4]: 4:4
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause4 (
-    .re     (wkup_cause_cause4_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause4_we & regen_qs),
-    .wd     (wkup_cause_cause4_wd),
-    .d      (hw2reg.wkup_cause[4].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[4].qe),
-    .q      (reg2hw.wkup_cause[4].q ),
-    .qs     (wkup_cause_cause4_qs)
-  );
-
-
-  // F[cause5]: 5:5
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause5 (
-    .re     (wkup_cause_cause5_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause5_we & regen_qs),
-    .wd     (wkup_cause_cause5_wd),
-    .d      (hw2reg.wkup_cause[5].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[5].qe),
-    .q      (reg2hw.wkup_cause[5].q ),
-    .qs     (wkup_cause_cause5_qs)
-  );
-
-
-  // F[cause6]: 6:6
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause6 (
-    .re     (wkup_cause_cause6_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause6_we & regen_qs),
-    .wd     (wkup_cause_cause6_wd),
-    .d      (hw2reg.wkup_cause[6].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[6].qe),
-    .q      (reg2hw.wkup_cause[6].q ),
-    .qs     (wkup_cause_cause6_qs)
-  );
-
-
-  // F[cause7]: 7:7
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause7 (
-    .re     (wkup_cause_cause7_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause7_we & regen_qs),
-    .wd     (wkup_cause_cause7_wd),
-    .d      (hw2reg.wkup_cause[7].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[7].qe),
-    .q      (reg2hw.wkup_cause[7].q ),
-    .qs     (wkup_cause_cause7_qs)
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in0_we & regen_qs),
+    .wd(periph_insel0_in0_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[474-:6]),
+    .qs(periph_insel0_in0_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in1_we & regen_qs),
+    .wd(periph_insel0_in1_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[480-:6]),
+    .qs(periph_insel0_in1_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in2_we & regen_qs),
+    .wd(periph_insel0_in2_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[486-:6]),
+    .qs(periph_insel0_in2_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in3_we & regen_qs),
+    .wd(periph_insel0_in3_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[492-:6]),
+    .qs(periph_insel0_in3_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in4_we & regen_qs),
+    .wd(periph_insel0_in4_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[498-:6]),
+    .qs(periph_insel0_in4_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in5_we & regen_qs),
+    .wd(periph_insel1_in5_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[504-:6]),
+    .qs(periph_insel1_in5_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in6_we & regen_qs),
+    .wd(periph_insel1_in6_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[510-:6]),
+    .qs(periph_insel1_in6_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in7_we & regen_qs),
+    .wd(periph_insel1_in7_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[516-:6]),
+    .qs(periph_insel1_in7_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in8(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in8_we & regen_qs),
+    .wd(periph_insel1_in8_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[522-:6]),
+    .qs(periph_insel1_in8_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in9(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in9_we & regen_qs),
+    .wd(periph_insel1_in9_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[528-:6]),
+    .qs(periph_insel1_in9_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in10(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in10_we & regen_qs),
+    .wd(periph_insel2_in10_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[534-:6]),
+    .qs(periph_insel2_in10_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in11(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in11_we & regen_qs),
+    .wd(periph_insel2_in11_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[540-:6]),
+    .qs(periph_insel2_in11_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in12(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in12_we & regen_qs),
+    .wd(periph_insel2_in12_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[546-:6]),
+    .qs(periph_insel2_in12_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in13(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in13_we & regen_qs),
+    .wd(periph_insel2_in13_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[552-:6]),
+    .qs(periph_insel2_in13_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in14(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in14_we & regen_qs),
+    .wd(periph_insel2_in14_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[558-:6]),
+    .qs(periph_insel2_in14_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in15(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in15_we & regen_qs),
+    .wd(periph_insel3_in15_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[564-:6]),
+    .qs(periph_insel3_in15_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in16(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in16_we & regen_qs),
+    .wd(periph_insel3_in16_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[570-:6]),
+    .qs(periph_insel3_in16_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in17(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in17_we & regen_qs),
+    .wd(periph_insel3_in17_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[576-:6]),
+    .qs(periph_insel3_in17_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in18(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in18_we & regen_qs),
+    .wd(periph_insel3_in18_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[582-:6]),
+    .qs(periph_insel3_in18_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in19(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in19_we & regen_qs),
+    .wd(periph_insel3_in19_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[588-:6]),
+    .qs(periph_insel3_in19_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in20(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in20_we & regen_qs),
+    .wd(periph_insel4_in20_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[594-:6]),
+    .qs(periph_insel4_in20_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in21(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in21_we & regen_qs),
+    .wd(periph_insel4_in21_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[600-:6]),
+    .qs(periph_insel4_in21_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in22(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in22_we & regen_qs),
+    .wd(periph_insel4_in22_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[606-:6]),
+    .qs(periph_insel4_in22_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in23(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in23_we & regen_qs),
+    .wd(periph_insel4_in23_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[612-:6]),
+    .qs(periph_insel4_in23_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in24(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in24_we & regen_qs),
+    .wd(periph_insel4_in24_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[618-:6]),
+    .qs(periph_insel4_in24_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in25(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in25_we & regen_qs),
+    .wd(periph_insel5_in25_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[624-:6]),
+    .qs(periph_insel5_in25_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in26(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in26_we & regen_qs),
+    .wd(periph_insel5_in26_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[630-:6]),
+    .qs(periph_insel5_in26_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in27(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in27_we & regen_qs),
+    .wd(periph_insel5_in27_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[636-:6]),
+    .qs(periph_insel5_in27_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in28(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in28_we & regen_qs),
+    .wd(periph_insel5_in28_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[642-:6]),
+    .qs(periph_insel5_in28_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in29(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in29_we & regen_qs),
+    .wd(periph_insel5_in29_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[648-:6]),
+    .qs(periph_insel5_in29_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel6_in30(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel6_in30_we & regen_qs),
+    .wd(periph_insel6_in30_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[654-:6]),
+    .qs(periph_insel6_in30_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel6_in31(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel6_in31_we & regen_qs),
+    .wd(periph_insel6_in31_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[660-:6]),
+    .qs(periph_insel6_in31_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out0_we & regen_qs),
+    .wd(mio_outsel0_out0_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[282-:6]),
+    .qs(mio_outsel0_out0_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out1_we & regen_qs),
+    .wd(mio_outsel0_out1_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[288-:6]),
+    .qs(mio_outsel0_out1_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out2_we & regen_qs),
+    .wd(mio_outsel0_out2_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[294-:6]),
+    .qs(mio_outsel0_out2_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out3_we & regen_qs),
+    .wd(mio_outsel0_out3_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[300-:6]),
+    .qs(mio_outsel0_out3_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out4_we & regen_qs),
+    .wd(mio_outsel0_out4_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[306-:6]),
+    .qs(mio_outsel0_out4_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out5_we & regen_qs),
+    .wd(mio_outsel1_out5_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[312-:6]),
+    .qs(mio_outsel1_out5_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out6_we & regen_qs),
+    .wd(mio_outsel1_out6_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[318-:6]),
+    .qs(mio_outsel1_out6_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out7_we & regen_qs),
+    .wd(mio_outsel1_out7_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[324-:6]),
+    .qs(mio_outsel1_out7_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out8(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out8_we & regen_qs),
+    .wd(mio_outsel1_out8_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[330-:6]),
+    .qs(mio_outsel1_out8_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out9(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out9_we & regen_qs),
+    .wd(mio_outsel1_out9_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[336-:6]),
+    .qs(mio_outsel1_out9_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out10(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out10_we & regen_qs),
+    .wd(mio_outsel2_out10_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[342-:6]),
+    .qs(mio_outsel2_out10_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out11(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out11_we & regen_qs),
+    .wd(mio_outsel2_out11_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[348-:6]),
+    .qs(mio_outsel2_out11_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out12(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out12_we & regen_qs),
+    .wd(mio_outsel2_out12_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[354-:6]),
+    .qs(mio_outsel2_out12_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out13(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out13_we & regen_qs),
+    .wd(mio_outsel2_out13_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[360-:6]),
+    .qs(mio_outsel2_out13_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out14(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out14_we & regen_qs),
+    .wd(mio_outsel2_out14_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[366-:6]),
+    .qs(mio_outsel2_out14_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out15(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out15_we & regen_qs),
+    .wd(mio_outsel3_out15_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[372-:6]),
+    .qs(mio_outsel3_out15_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out16(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out16_we & regen_qs),
+    .wd(mio_outsel3_out16_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[378-:6]),
+    .qs(mio_outsel3_out16_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out17(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out17_we & regen_qs),
+    .wd(mio_outsel3_out17_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[384-:6]),
+    .qs(mio_outsel3_out17_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out18(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out18_we & regen_qs),
+    .wd(mio_outsel3_out18_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[390-:6]),
+    .qs(mio_outsel3_out18_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out19(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out19_we & regen_qs),
+    .wd(mio_outsel3_out19_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[396-:6]),
+    .qs(mio_outsel3_out19_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out20(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out20_we & regen_qs),
+    .wd(mio_outsel4_out20_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[402-:6]),
+    .qs(mio_outsel4_out20_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out21(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out21_we & regen_qs),
+    .wd(mio_outsel4_out21_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[408-:6]),
+    .qs(mio_outsel4_out21_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out22(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out22_we & regen_qs),
+    .wd(mio_outsel4_out22_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[414-:6]),
+    .qs(mio_outsel4_out22_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out23(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out23_we & regen_qs),
+    .wd(mio_outsel4_out23_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[420-:6]),
+    .qs(mio_outsel4_out23_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out24(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out24_we & regen_qs),
+    .wd(mio_outsel4_out24_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[426-:6]),
+    .qs(mio_outsel4_out24_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out25(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out25_we & regen_qs),
+    .wd(mio_outsel5_out25_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[432-:6]),
+    .qs(mio_outsel5_out25_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out26(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out26_we & regen_qs),
+    .wd(mio_outsel5_out26_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[438-:6]),
+    .qs(mio_outsel5_out26_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out27(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out27_we & regen_qs),
+    .wd(mio_outsel5_out27_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[444-:6]),
+    .qs(mio_outsel5_out27_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out28(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out28_we & regen_qs),
+    .wd(mio_outsel5_out28_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[450-:6]),
+    .qs(mio_outsel5_out28_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out29(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out29_we & regen_qs),
+    .wd(mio_outsel5_out29_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[456-:6]),
+    .qs(mio_outsel5_out29_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel6_out30(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel6_out30_we & regen_qs),
+    .wd(mio_outsel6_out30_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[462-:6]),
+    .qs(mio_outsel6_out30_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel6_out31(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel6_out31_we & regen_qs),
+    .wd(mio_outsel6_out31_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[468-:6]),
+    .qs(mio_outsel6_out31_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out0_we & regen_qs),
+    .wd(mio_out_sleep_val0_out0_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[214-:2]),
+    .qs(mio_out_sleep_val0_out0_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out1_we & regen_qs),
+    .wd(mio_out_sleep_val0_out1_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[216-:2]),
+    .qs(mio_out_sleep_val0_out1_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out2_we & regen_qs),
+    .wd(mio_out_sleep_val0_out2_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[218-:2]),
+    .qs(mio_out_sleep_val0_out2_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out3_we & regen_qs),
+    .wd(mio_out_sleep_val0_out3_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[220-:2]),
+    .qs(mio_out_sleep_val0_out3_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out4_we & regen_qs),
+    .wd(mio_out_sleep_val0_out4_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[222-:2]),
+    .qs(mio_out_sleep_val0_out4_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out5_we & regen_qs),
+    .wd(mio_out_sleep_val0_out5_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[224-:2]),
+    .qs(mio_out_sleep_val0_out5_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out6_we & regen_qs),
+    .wd(mio_out_sleep_val0_out6_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[226-:2]),
+    .qs(mio_out_sleep_val0_out6_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out7_we & regen_qs),
+    .wd(mio_out_sleep_val0_out7_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[228-:2]),
+    .qs(mio_out_sleep_val0_out7_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out8(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out8_we & regen_qs),
+    .wd(mio_out_sleep_val0_out8_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[230-:2]),
+    .qs(mio_out_sleep_val0_out8_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out9(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out9_we & regen_qs),
+    .wd(mio_out_sleep_val0_out9_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[232-:2]),
+    .qs(mio_out_sleep_val0_out9_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out10(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out10_we & regen_qs),
+    .wd(mio_out_sleep_val0_out10_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[234-:2]),
+    .qs(mio_out_sleep_val0_out10_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out11(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out11_we & regen_qs),
+    .wd(mio_out_sleep_val0_out11_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[236-:2]),
+    .qs(mio_out_sleep_val0_out11_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out12(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out12_we & regen_qs),
+    .wd(mio_out_sleep_val0_out12_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[238-:2]),
+    .qs(mio_out_sleep_val0_out12_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out13(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out13_we & regen_qs),
+    .wd(mio_out_sleep_val0_out13_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[240-:2]),
+    .qs(mio_out_sleep_val0_out13_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out14(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out14_we & regen_qs),
+    .wd(mio_out_sleep_val0_out14_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[242-:2]),
+    .qs(mio_out_sleep_val0_out14_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out15(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out15_we & regen_qs),
+    .wd(mio_out_sleep_val0_out15_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[244-:2]),
+    .qs(mio_out_sleep_val0_out15_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out16(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out16_we & regen_qs),
+    .wd(mio_out_sleep_val1_out16_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[246-:2]),
+    .qs(mio_out_sleep_val1_out16_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out17(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out17_we & regen_qs),
+    .wd(mio_out_sleep_val1_out17_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[248-:2]),
+    .qs(mio_out_sleep_val1_out17_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out18(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out18_we & regen_qs),
+    .wd(mio_out_sleep_val1_out18_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[250-:2]),
+    .qs(mio_out_sleep_val1_out18_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out19(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out19_we & regen_qs),
+    .wd(mio_out_sleep_val1_out19_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[252-:2]),
+    .qs(mio_out_sleep_val1_out19_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out20(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out20_we & regen_qs),
+    .wd(mio_out_sleep_val1_out20_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[254-:2]),
+    .qs(mio_out_sleep_val1_out20_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out21(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out21_we & regen_qs),
+    .wd(mio_out_sleep_val1_out21_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[256-:2]),
+    .qs(mio_out_sleep_val1_out21_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out22(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out22_we & regen_qs),
+    .wd(mio_out_sleep_val1_out22_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[258-:2]),
+    .qs(mio_out_sleep_val1_out22_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out23(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out23_we & regen_qs),
+    .wd(mio_out_sleep_val1_out23_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[260-:2]),
+    .qs(mio_out_sleep_val1_out23_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out24(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out24_we & regen_qs),
+    .wd(mio_out_sleep_val1_out24_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[262-:2]),
+    .qs(mio_out_sleep_val1_out24_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out25(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out25_we & regen_qs),
+    .wd(mio_out_sleep_val1_out25_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[264-:2]),
+    .qs(mio_out_sleep_val1_out25_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out26(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out26_we & regen_qs),
+    .wd(mio_out_sleep_val1_out26_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[266-:2]),
+    .qs(mio_out_sleep_val1_out26_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out27(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out27_we & regen_qs),
+    .wd(mio_out_sleep_val1_out27_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[268-:2]),
+    .qs(mio_out_sleep_val1_out27_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out28(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out28_we & regen_qs),
+    .wd(mio_out_sleep_val1_out28_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[270-:2]),
+    .qs(mio_out_sleep_val1_out28_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out29(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out29_we & regen_qs),
+    .wd(mio_out_sleep_val1_out29_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[272-:2]),
+    .qs(mio_out_sleep_val1_out29_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out30(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out30_we & regen_qs),
+    .wd(mio_out_sleep_val1_out30_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[274-:2]),
+    .qs(mio_out_sleep_val1_out30_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out31(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out31_we & regen_qs),
+    .wd(mio_out_sleep_val1_out31_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[276-:2]),
+    .qs(mio_out_sleep_val1_out31_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out0(
+    .re(dio_out_sleep_val_out0_re),
+    .we(dio_out_sleep_val_out0_we & regen_qs),
+    .wd(dio_out_sleep_val_out0_wd),
+    .d(hw2reg[9-:2]),
+    .qre(),
+    .qe(reg2hw[168]),
+    .q(reg2hw[170-:2]),
+    .qs(dio_out_sleep_val_out0_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out1(
+    .re(dio_out_sleep_val_out1_re),
+    .we(dio_out_sleep_val_out1_we & regen_qs),
+    .wd(dio_out_sleep_val_out1_wd),
+    .d(hw2reg[11-:2]),
+    .qre(),
+    .qe(reg2hw[171]),
+    .q(reg2hw[173-:2]),
+    .qs(dio_out_sleep_val_out1_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out2(
+    .re(dio_out_sleep_val_out2_re),
+    .we(dio_out_sleep_val_out2_we & regen_qs),
+    .wd(dio_out_sleep_val_out2_wd),
+    .d(hw2reg[13-:2]),
+    .qre(),
+    .qe(reg2hw[174]),
+    .q(reg2hw[176-:2]),
+    .qs(dio_out_sleep_val_out2_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out3(
+    .re(dio_out_sleep_val_out3_re),
+    .we(dio_out_sleep_val_out3_we & regen_qs),
+    .wd(dio_out_sleep_val_out3_wd),
+    .d(hw2reg[15-:2]),
+    .qre(),
+    .qe(reg2hw[177]),
+    .q(reg2hw[179-:2]),
+    .qs(dio_out_sleep_val_out3_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out4(
+    .re(dio_out_sleep_val_out4_re),
+    .we(dio_out_sleep_val_out4_we & regen_qs),
+    .wd(dio_out_sleep_val_out4_wd),
+    .d(hw2reg[17-:2]),
+    .qre(),
+    .qe(reg2hw[180]),
+    .q(reg2hw[182-:2]),
+    .qs(dio_out_sleep_val_out4_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out5(
+    .re(dio_out_sleep_val_out5_re),
+    .we(dio_out_sleep_val_out5_we & regen_qs),
+    .wd(dio_out_sleep_val_out5_wd),
+    .d(hw2reg[19-:2]),
+    .qre(),
+    .qe(reg2hw[183]),
+    .q(reg2hw[185-:2]),
+    .qs(dio_out_sleep_val_out5_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out6(
+    .re(dio_out_sleep_val_out6_re),
+    .we(dio_out_sleep_val_out6_we & regen_qs),
+    .wd(dio_out_sleep_val_out6_wd),
+    .d(hw2reg[21-:2]),
+    .qre(),
+    .qe(reg2hw[186]),
+    .q(reg2hw[188-:2]),
+    .qs(dio_out_sleep_val_out6_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out7(
+    .re(dio_out_sleep_val_out7_re),
+    .we(dio_out_sleep_val_out7_we & regen_qs),
+    .wd(dio_out_sleep_val_out7_wd),
+    .d(hw2reg[23-:2]),
+    .qre(),
+    .qe(reg2hw[189]),
+    .q(reg2hw[191-:2]),
+    .qs(dio_out_sleep_val_out7_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out8(
+    .re(dio_out_sleep_val_out8_re),
+    .we(dio_out_sleep_val_out8_we & regen_qs),
+    .wd(dio_out_sleep_val_out8_wd),
+    .d(hw2reg[25-:2]),
+    .qre(),
+    .qe(reg2hw[192]),
+    .q(reg2hw[194-:2]),
+    .qs(dio_out_sleep_val_out8_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out9(
+    .re(dio_out_sleep_val_out9_re),
+    .we(dio_out_sleep_val_out9_we & regen_qs),
+    .wd(dio_out_sleep_val_out9_wd),
+    .d(hw2reg[27-:2]),
+    .qre(),
+    .qe(reg2hw[195]),
+    .q(reg2hw[197-:2]),
+    .qs(dio_out_sleep_val_out9_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out10(
+    .re(dio_out_sleep_val_out10_re),
+    .we(dio_out_sleep_val_out10_we & regen_qs),
+    .wd(dio_out_sleep_val_out10_wd),
+    .d(hw2reg[29-:2]),
+    .qre(),
+    .qe(reg2hw[198]),
+    .q(reg2hw[200-:2]),
+    .qs(dio_out_sleep_val_out10_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out11(
+    .re(dio_out_sleep_val_out11_re),
+    .we(dio_out_sleep_val_out11_we & regen_qs),
+    .wd(dio_out_sleep_val_out11_wd),
+    .d(hw2reg[31-:2]),
+    .qre(),
+    .qe(reg2hw[201]),
+    .q(reg2hw[203-:2]),
+    .qs(dio_out_sleep_val_out11_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out12(
+    .re(dio_out_sleep_val_out12_re),
+    .we(dio_out_sleep_val_out12_we & regen_qs),
+    .wd(dio_out_sleep_val_out12_wd),
+    .d(hw2reg[33-:2]),
+    .qre(),
+    .qe(reg2hw[204]),
+    .q(reg2hw[206-:2]),
+    .qs(dio_out_sleep_val_out12_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out13(
+    .re(dio_out_sleep_val_out13_re),
+    .we(dio_out_sleep_val_out13_we & regen_qs),
+    .wd(dio_out_sleep_val_out13_wd),
+    .d(hw2reg[35-:2]),
+    .qre(),
+    .qe(reg2hw[207]),
+    .q(reg2hw[209-:2]),
+    .qs(dio_out_sleep_val_out13_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out14(
+    .re(dio_out_sleep_val_out14_re),
+    .we(dio_out_sleep_val_out14_we & regen_qs),
+    .wd(dio_out_sleep_val_out14_wd),
+    .d(hw2reg[37-:2]),
+    .qre(),
+    .qe(reg2hw[210]),
+    .q(reg2hw[212-:2]),
+    .qs(dio_out_sleep_val_out14_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en0_we & regen_qs),
+    .wd(wkup_detector_en_en0_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[160]),
+    .qs(wkup_detector_en_en0_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en1_we & regen_qs),
+    .wd(wkup_detector_en_en1_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[161]),
+    .qs(wkup_detector_en_en1_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en2_we & regen_qs),
+    .wd(wkup_detector_en_en2_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[162]),
+    .qs(wkup_detector_en_en2_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en3_we & regen_qs),
+    .wd(wkup_detector_en_en3_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[163]),
+    .qs(wkup_detector_en_en3_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en4_we & regen_qs),
+    .wd(wkup_detector_en_en4_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[164]),
+    .qs(wkup_detector_en_en4_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en5_we & regen_qs),
+    .wd(wkup_detector_en_en5_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[165]),
+    .qs(wkup_detector_en_en5_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en6_we & regen_qs),
+    .wd(wkup_detector_en_en6_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[166]),
+    .qs(wkup_detector_en_en6_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en7_we & regen_qs),
+    .wd(wkup_detector_en_en7_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[167]),
+    .qs(wkup_detector_en_en7_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector0_mode0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector0_mode0_we & regen_qs),
+    .wd(wkup_detector0_mode0_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[124-:3]),
+    .qs(wkup_detector0_mode0_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector0_filter0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector0_filter0_we & regen_qs),
+    .wd(wkup_detector0_filter0_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[121]),
+    .qs(wkup_detector0_filter0_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector0_miodio0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector0_miodio0_we & regen_qs),
+    .wd(wkup_detector0_miodio0_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[120]),
+    .qs(wkup_detector0_miodio0_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector1_mode1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector1_mode1_we & regen_qs),
+    .wd(wkup_detector1_mode1_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[129-:3]),
+    .qs(wkup_detector1_mode1_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector1_filter1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector1_filter1_we & regen_qs),
+    .wd(wkup_detector1_filter1_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[126]),
+    .qs(wkup_detector1_filter1_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector1_miodio1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector1_miodio1_we & regen_qs),
+    .wd(wkup_detector1_miodio1_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[125]),
+    .qs(wkup_detector1_miodio1_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector2_mode2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector2_mode2_we & regen_qs),
+    .wd(wkup_detector2_mode2_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[134-:3]),
+    .qs(wkup_detector2_mode2_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector2_filter2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector2_filter2_we & regen_qs),
+    .wd(wkup_detector2_filter2_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[131]),
+    .qs(wkup_detector2_filter2_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector2_miodio2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector2_miodio2_we & regen_qs),
+    .wd(wkup_detector2_miodio2_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[130]),
+    .qs(wkup_detector2_miodio2_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector3_mode3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector3_mode3_we & regen_qs),
+    .wd(wkup_detector3_mode3_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[139-:3]),
+    .qs(wkup_detector3_mode3_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector3_filter3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector3_filter3_we & regen_qs),
+    .wd(wkup_detector3_filter3_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[136]),
+    .qs(wkup_detector3_filter3_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector3_miodio3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector3_miodio3_we & regen_qs),
+    .wd(wkup_detector3_miodio3_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[135]),
+    .qs(wkup_detector3_miodio3_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector4_mode4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector4_mode4_we & regen_qs),
+    .wd(wkup_detector4_mode4_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[144-:3]),
+    .qs(wkup_detector4_mode4_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector4_filter4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector4_filter4_we & regen_qs),
+    .wd(wkup_detector4_filter4_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[141]),
+    .qs(wkup_detector4_filter4_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector4_miodio4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector4_miodio4_we & regen_qs),
+    .wd(wkup_detector4_miodio4_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[140]),
+    .qs(wkup_detector4_miodio4_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector5_mode5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector5_mode5_we & regen_qs),
+    .wd(wkup_detector5_mode5_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[149-:3]),
+    .qs(wkup_detector5_mode5_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector5_filter5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector5_filter5_we & regen_qs),
+    .wd(wkup_detector5_filter5_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[146]),
+    .qs(wkup_detector5_filter5_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector5_miodio5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector5_miodio5_we & regen_qs),
+    .wd(wkup_detector5_miodio5_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[145]),
+    .qs(wkup_detector5_miodio5_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector6_mode6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector6_mode6_we & regen_qs),
+    .wd(wkup_detector6_mode6_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[154-:3]),
+    .qs(wkup_detector6_mode6_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector6_filter6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector6_filter6_we & regen_qs),
+    .wd(wkup_detector6_filter6_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[151]),
+    .qs(wkup_detector6_filter6_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector6_miodio6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector6_miodio6_we & regen_qs),
+    .wd(wkup_detector6_miodio6_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[150]),
+    .qs(wkup_detector6_miodio6_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector7_mode7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector7_mode7_we & regen_qs),
+    .wd(wkup_detector7_mode7_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[159-:3]),
+    .qs(wkup_detector7_mode7_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector7_filter7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector7_filter7_we & regen_qs),
+    .wd(wkup_detector7_filter7_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[156]),
+    .qs(wkup_detector7_filter7_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector7_miodio7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector7_miodio7_we & regen_qs),
+    .wd(wkup_detector7_miodio7_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[155]),
+    .qs(wkup_detector7_miodio7_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th0_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th0_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[63-:8]),
+    .qs(wkup_detector_cnt_th0_th0_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th1_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th1_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[71-:8]),
+    .qs(wkup_detector_cnt_th0_th1_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th2_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th2_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[79-:8]),
+    .qs(wkup_detector_cnt_th0_th2_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th3_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th3_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[87-:8]),
+    .qs(wkup_detector_cnt_th0_th3_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th4_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th4_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[95-:8]),
+    .qs(wkup_detector_cnt_th1_th4_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th5_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th5_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[103-:8]),
+    .qs(wkup_detector_cnt_th1_th5_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th6_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th6_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[111-:8]),
+    .qs(wkup_detector_cnt_th1_th6_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th7_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th7_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[119-:8]),
+    .qs(wkup_detector_cnt_th1_th7_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel0_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel0_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[20-:5]),
+    .qs(wkup_detector_padsel0_sel0_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel1_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel1_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[25-:5]),
+    .qs(wkup_detector_padsel0_sel1_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel2_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel2_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[30-:5]),
+    .qs(wkup_detector_padsel0_sel2_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel3_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel3_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[35-:5]),
+    .qs(wkup_detector_padsel0_sel3_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel4_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel4_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[40-:5]),
+    .qs(wkup_detector_padsel0_sel4_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel5_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel5_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[45-:5]),
+    .qs(wkup_detector_padsel0_sel5_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel1_sel6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel1_sel6_we & regen_qs),
+    .wd(wkup_detector_padsel1_sel6_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[50-:5]),
+    .qs(wkup_detector_padsel1_sel6_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel1_sel7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel1_sel7_we & regen_qs),
+    .wd(wkup_detector_padsel1_sel7_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[55-:5]),
+    .qs(wkup_detector_padsel1_sel7_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause0(
+    .re(wkup_cause_cause0_re),
+    .we(wkup_cause_cause0_we & regen_qs),
+    .wd(wkup_cause_cause0_wd),
+    .d(hw2reg[0]),
+    .qre(),
+    .qe(reg2hw[0]),
+    .q(reg2hw[1]),
+    .qs(wkup_cause_cause0_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause1(
+    .re(wkup_cause_cause1_re),
+    .we(wkup_cause_cause1_we & regen_qs),
+    .wd(wkup_cause_cause1_wd),
+    .d(hw2reg[1]),
+    .qre(),
+    .qe(reg2hw[2]),
+    .q(reg2hw[3]),
+    .qs(wkup_cause_cause1_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause2(
+    .re(wkup_cause_cause2_re),
+    .we(wkup_cause_cause2_we & regen_qs),
+    .wd(wkup_cause_cause2_wd),
+    .d(hw2reg[2]),
+    .qre(),
+    .qe(reg2hw[4]),
+    .q(reg2hw[5]),
+    .qs(wkup_cause_cause2_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause3(
+    .re(wkup_cause_cause3_re),
+    .we(wkup_cause_cause3_we & regen_qs),
+    .wd(wkup_cause_cause3_wd),
+    .d(hw2reg[3]),
+    .qre(),
+    .qe(reg2hw[6]),
+    .q(reg2hw[7]),
+    .qs(wkup_cause_cause3_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause4(
+    .re(wkup_cause_cause4_re),
+    .we(wkup_cause_cause4_we & regen_qs),
+    .wd(wkup_cause_cause4_wd),
+    .d(hw2reg[4]),
+    .qre(),
+    .qe(reg2hw[8]),
+    .q(reg2hw[9]),
+    .qs(wkup_cause_cause4_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause5(
+    .re(wkup_cause_cause5_re),
+    .we(wkup_cause_cause5_we & regen_qs),
+    .wd(wkup_cause_cause5_wd),
+    .d(hw2reg[5]),
+    .qre(),
+    .qe(reg2hw[10]),
+    .q(reg2hw[11]),
+    .qs(wkup_cause_cause5_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause6(
+    .re(wkup_cause_cause6_re),
+    .we(wkup_cause_cause6_we & regen_qs),
+    .wd(wkup_cause_cause6_wd),
+    .d(hw2reg[6]),
+    .qre(),
+    .qe(reg2hw[12]),
+    .q(reg2hw[13]),
+    .qs(wkup_cause_cause6_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause7(
+    .re(wkup_cause_cause7_re),
+    .we(wkup_cause_cause7_we & regen_qs),
+    .wd(wkup_cause_cause7_wd),
+    .d(hw2reg[7]),
+    .qre(),
+    .qe(reg2hw[14]),
+    .q(reg2hw[15]),
+    .qs(wkup_cause_cause7_qs)
   );
 
 
diff --git a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv
index f771dd35a..61c74e42d 100644
--- a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv
+++ b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv
@@ -116,7 +116,7 @@ package pwrmgr_reg_pkg;
     pwrmgr_reg2hw_intr_test_reg_t intr_test; // [17:16]
     pwrmgr_reg2hw_control_reg_t control; // [15:12]
     pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [11:10]
-    pwrmgr_reg2hw_wakeup_en_mreg_t [0:0] wakeup_en; // [9:9]
+    pwrmgr_reg2hw_wakeup_en_mreg_t wakeup_en; // [9:9]
     pwrmgr_reg2hw_reset_en_reg_t reset_en; // [8:7]
     pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [6:6]
     pwrmgr_reg2hw_wake_info_reg_t wake_info; // [5:0]
diff --git a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv
index 2365da52c..6a335c778 100644
--- a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv
+++ b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv
@@ -395,7 +395,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[0].q ),
+    .q      (reg2hw.wakeup_en.q ),
 
     // to register interface (read)
     .qs     (wakeup_en_qs)
diff --git a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv
index c516c01ca..69bb99caa 100644
--- a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv
+++ b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv
@@ -38,13 +38,13 @@ module rv_plic import rv_plic_reg_pkg::*; #(
 
   // Interrupt notification to targets
   output [NumTarget-1:0] irq_o,
-  output [SRCW-1:0]      irq_id_o [NumTarget],
+  output [SRCW-1:0]      irq_id_o,
 
   output logic [NumTarget-1:0] msip_o
 );
 
-  rv_plic_reg2hw_t reg2hw;
-  rv_plic_hw2reg_t hw2reg;
+  wire [343:0] reg2hw;
+  wire [172:0] hw2reg;
 
   localparam int MAX_PRIO    = 3;
   localparam int PRIOW = $clog2(MAX_PRIO+1);
@@ -52,21 +52,21 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   logic [NumSrc-1:0] le; // 0:level 1:edge
   logic [NumSrc-1:0] ip;
 
-  logic [NumSrc-1:0] ie [NumTarget];
+  logic [NumSrc-1:0] ie;
 
   logic [NumTarget-1:0] claim_re; // Target read indicator
-  logic [SRCW-1:0]      claim_id [NumTarget];
+  logic [SRCW-1:0]      claim_id;
   logic [NumSrc-1:0]    claim; // Converted from claim_re/claim_id
 
   logic [NumTarget-1:0] complete_we; // Target write indicator
-  logic [SRCW-1:0]      complete_id [NumTarget];
+  logic [SRCW-1:0]      complete_id;
   logic [NumSrc-1:0]    complete; // Converted from complete_re/complete_id
 
-  logic [SRCW-1:0]      cc_id [NumTarget]; // Write ID
+  logic [SRCW-1:0]      cc_id; // Write ID
 
   logic [PRIOW-1:0] prio [NumSrc];
 
-  logic [PRIOW-1:0] threshold [NumTarget];
+  logic [PRIOW-1:0] threshold;
 
   // Glue logic between rv_plic_reg_top and others
   assign cc_id = irq_id_o;
@@ -74,13 +74,13 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   always_comb begin
     claim = '0;
     for (int i = 0 ; i < NumTarget ; i++) begin
-      if (claim_re[i]) claim[claim_id[i]] = 1'b1;
+      if (claim_re[i]) claim[claim_id] = 1'b1;
     end
   end
   always_comb begin
     complete = '0;
     for (int i = 0 ; i < NumTarget ; i++) begin
-      if (complete_we[i]) complete[complete_id[i]] = 1'b1;
+      if (complete_we[i]) complete[complete_id] = 1'b1;
     end
   end
 
@@ -94,129 +94,129 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   //////////////
   // Priority //
   //////////////
-  assign prio[0] = reg2hw.prio0.q;
-  assign prio[1] = reg2hw.prio1.q;
-  assign prio[2] = reg2hw.prio2.q;
-  assign prio[3] = reg2hw.prio3.q;
-  assign prio[4] = reg2hw.prio4.q;
-  assign prio[5] = reg2hw.prio5.q;
-  assign prio[6] = reg2hw.prio6.q;
-  assign prio[7] = reg2hw.prio7.q;
-  assign prio[8] = reg2hw.prio8.q;
-  assign prio[9] = reg2hw.prio9.q;
-  assign prio[10] = reg2hw.prio10.q;
-  assign prio[11] = reg2hw.prio11.q;
-  assign prio[12] = reg2hw.prio12.q;
-  assign prio[13] = reg2hw.prio13.q;
-  assign prio[14] = reg2hw.prio14.q;
-  assign prio[15] = reg2hw.prio15.q;
-  assign prio[16] = reg2hw.prio16.q;
-  assign prio[17] = reg2hw.prio17.q;
-  assign prio[18] = reg2hw.prio18.q;
-  assign prio[19] = reg2hw.prio19.q;
-  assign prio[20] = reg2hw.prio20.q;
-  assign prio[21] = reg2hw.prio21.q;
-  assign prio[22] = reg2hw.prio22.q;
-  assign prio[23] = reg2hw.prio23.q;
-  assign prio[24] = reg2hw.prio24.q;
-  assign prio[25] = reg2hw.prio25.q;
-  assign prio[26] = reg2hw.prio26.q;
-  assign prio[27] = reg2hw.prio27.q;
-  assign prio[28] = reg2hw.prio28.q;
-  assign prio[29] = reg2hw.prio29.q;
-  assign prio[30] = reg2hw.prio30.q;
-  assign prio[31] = reg2hw.prio31.q;
-  assign prio[32] = reg2hw.prio32.q;
-  assign prio[33] = reg2hw.prio33.q;
-  assign prio[34] = reg2hw.prio34.q;
-  assign prio[35] = reg2hw.prio35.q;
-  assign prio[36] = reg2hw.prio36.q;
-  assign prio[37] = reg2hw.prio37.q;
-  assign prio[38] = reg2hw.prio38.q;
-  assign prio[39] = reg2hw.prio39.q;
-  assign prio[40] = reg2hw.prio40.q;
-  assign prio[41] = reg2hw.prio41.q;
-  assign prio[42] = reg2hw.prio42.q;
-  assign prio[43] = reg2hw.prio43.q;
-  assign prio[44] = reg2hw.prio44.q;
-  assign prio[45] = reg2hw.prio45.q;
-  assign prio[46] = reg2hw.prio46.q;
-  assign prio[47] = reg2hw.prio47.q;
-  assign prio[48] = reg2hw.prio48.q;
-  assign prio[49] = reg2hw.prio49.q;
-  assign prio[50] = reg2hw.prio50.q;
-  assign prio[51] = reg2hw.prio51.q;
-  assign prio[52] = reg2hw.prio52.q;
-  assign prio[53] = reg2hw.prio53.q;
-  assign prio[54] = reg2hw.prio54.q;
-  assign prio[55] = reg2hw.prio55.q;
-  assign prio[56] = reg2hw.prio56.q;
-  assign prio[57] = reg2hw.prio57.q;
-  assign prio[58] = reg2hw.prio58.q;
-  assign prio[59] = reg2hw.prio59.q;
-  assign prio[60] = reg2hw.prio60.q;
-  assign prio[61] = reg2hw.prio61.q;
-  assign prio[62] = reg2hw.prio62.q;
-  assign prio[63] = reg2hw.prio63.q;
-  assign prio[64] = reg2hw.prio64.q;
-  assign prio[65] = reg2hw.prio65.q;
-  assign prio[66] = reg2hw.prio66.q;
-  assign prio[67] = reg2hw.prio67.q;
-  assign prio[68] = reg2hw.prio68.q;
-  assign prio[69] = reg2hw.prio69.q;
-  assign prio[70] = reg2hw.prio70.q;
-  assign prio[71] = reg2hw.prio71.q;
-  assign prio[72] = reg2hw.prio72.q;
-  assign prio[73] = reg2hw.prio73.q;
-  assign prio[74] = reg2hw.prio74.q;
-  assign prio[75] = reg2hw.prio75.q;
-  assign prio[76] = reg2hw.prio76.q;
-  assign prio[77] = reg2hw.prio77.q;
-  assign prio[78] = reg2hw.prio78.q;
-  assign prio[79] = reg2hw.prio79.q;
-  assign prio[80] = reg2hw.prio80.q;
-  assign prio[81] = reg2hw.prio81.q;
-  assign prio[82] = reg2hw.prio82.q;
+  assign prio[0] = reg2hw[260-:2];
+  assign prio[1] = reg2hw[258-:2];
+  assign prio[2] = reg2hw[256-:2];
+  assign prio[3] = reg2hw[254-:2];
+  assign prio[4] = reg2hw[252-:2];
+  assign prio[5] = reg2hw[250-:2];
+  assign prio[6] = reg2hw[248-:2];
+  assign prio[7] = reg2hw[246-:2];
+  assign prio[8] = reg2hw[244-:2];
+  assign prio[9] = reg2hw[242-:2];
+  assign prio[10] = reg2hw[240-:2];
+  assign prio[11] = reg2hw[238-:2];
+  assign prio[12] = reg2hw[236-:2];
+  assign prio[13] = reg2hw[234-:2];
+  assign prio[14] = reg2hw[232-:2];
+  assign prio[15] = reg2hw[230-:2];
+  assign prio[16] = reg2hw[228-:2];
+  assign prio[17] = reg2hw[226-:2];
+  assign prio[18] = reg2hw[224-:2];
+  assign prio[19] = reg2hw[222-:2];
+  assign prio[20] = reg2hw[220-:2];
+  assign prio[21] = reg2hw[218-:2];
+  assign prio[22] = reg2hw[216-:2];
+  assign prio[23] = reg2hw[214-:2];
+  assign prio[24] = reg2hw[212-:2];
+  assign prio[25] = reg2hw[210-:2];
+  assign prio[26] = reg2hw[208-:2];
+  assign prio[27] = reg2hw[206-:2];
+  assign prio[28] = reg2hw[204-:2];
+  assign prio[29] = reg2hw[202-:2];
+  assign prio[30] = reg2hw[200-:2];
+  assign prio[31] = reg2hw[198-:2];
+  assign prio[32] = reg2hw[196-:2];
+  assign prio[33] = reg2hw[194-:2];
+  assign prio[34] = reg2hw[192-:2];
+  assign prio[35] = reg2hw[190-:2];
+  assign prio[36] = reg2hw[188-:2];
+  assign prio[37] = reg2hw[186-:2];
+  assign prio[38] = reg2hw[184-:2];
+  assign prio[39] = reg2hw[182-:2];
+  assign prio[40] = reg2hw[180-:2];
+  assign prio[41] = reg2hw[178-:2];
+  assign prio[42] = reg2hw[176-:2];
+  assign prio[43] = reg2hw[174-:2];
+  assign prio[44] = reg2hw[172-:2];
+  assign prio[45] = reg2hw[170-:2];
+  assign prio[46] = reg2hw[168-:2];
+  assign prio[47] = reg2hw[166-:2];
+  assign prio[48] = reg2hw[164-:2];
+  assign prio[49] = reg2hw[162-:2];
+  assign prio[50] = reg2hw[160-:2];
+  assign prio[51] = reg2hw[158-:2];
+  assign prio[52] = reg2hw[156-:2];
+  assign prio[53] = reg2hw[154-:2];
+  assign prio[54] = reg2hw[152-:2];
+  assign prio[55] = reg2hw[150-:2];
+  assign prio[56] = reg2hw[148-:2];
+  assign prio[57] = reg2hw[146-:2];
+  assign prio[58] = reg2hw[144-:2];
+  assign prio[59] = reg2hw[142-:2];
+  assign prio[60] = reg2hw[140-:2];
+  assign prio[61] = reg2hw[138-:2];
+  assign prio[62] = reg2hw[136-:2];
+  assign prio[63] = reg2hw[134-:2];
+  assign prio[64] = reg2hw[132-:2];
+  assign prio[65] = reg2hw[130-:2];
+  assign prio[66] = reg2hw[128-:2];
+  assign prio[67] = reg2hw[126-:2];
+  assign prio[68] = reg2hw[124-:2];
+  assign prio[69] = reg2hw[122-:2];
+  assign prio[70] = reg2hw[120-:2];
+  assign prio[71] = reg2hw[118-:2];
+  assign prio[72] = reg2hw[116-:2];
+  assign prio[73] = reg2hw[114-:2];
+  assign prio[74] = reg2hw[112-:2];
+  assign prio[75] = reg2hw[110-:2];
+  assign prio[76] = reg2hw[108-:2];
+  assign prio[77] = reg2hw[106-:2];
+  assign prio[78] = reg2hw[104-:2];
+  assign prio[79] = reg2hw[102-:2];
+  assign prio[80] = reg2hw[100-:2];
+  assign prio[81] = reg2hw[98-:2];
+  assign prio[82] = reg2hw[96-:2];
 
   //////////////////////
   // Interrupt Enable //
   //////////////////////
   for (genvar s = 0; s < 83; s++) begin : gen_ie0
-    assign ie[0][s] = reg2hw.ie0[s].q;
+    assign ie[s] = reg2hw[12 + s];
   end
 
   ////////////////////////
   // THRESHOLD register //
   ////////////////////////
-  assign threshold[0] = reg2hw.threshold0.q;
+  assign threshold = reg2hw[11-:2];
 
   /////////////////
   // CC register //
   /////////////////
-  assign claim_re[0]    = reg2hw.cc0.re;
-  assign claim_id[0]    = irq_id_o[0];
-  assign complete_we[0] = reg2hw.cc0.qe;
-  assign complete_id[0] = reg2hw.cc0.q;
-  assign hw2reg.cc0.d   = cc_id[0];
+  assign claim_re[0]    = reg2hw[1];
+  assign claim_id    = irq_id_o;
+  assign complete_we[0] = reg2hw[2];
+  assign complete_id = reg2hw[9-:7];
+  assign hw2reg[6-:7]   = cc_id;
 
   ///////////////////
   // MSIP register //
   ///////////////////
-  assign msip_o[0] = reg2hw.msip0.q;
+  assign msip_o[0] = reg2hw[-0];
 
   ////////
   // IP //
   ////////
   for (genvar s = 0; s < 83; s++) begin : gen_ip
-    assign hw2reg.ip[s].de = 1'b1; // Always write
-    assign hw2reg.ip[s].d  = ip[s];
+    assign hw2reg[7 + (s * 2)] = 1'b1; // Always write
+    assign hw2reg[7 + ((s * 2) + 1)] = ip[s];
   end
 
   ///////////////////////////////////
   // Detection:: 0: Level, 1: Edge //
   ///////////////////////////////////
   for (genvar s = 0; s < 83; s++) begin : gen_le
-    assign le[s] = reg2hw.le[s].q;
+    assign le[s] = reg2hw[261 + s];
   end
 
   //////////////
@@ -249,13 +249,13 @@ module rv_plic import rv_plic_reg_pkg::*; #(
       .rst_ni,
 
       .ip_i        (ip),
-      .ie_i        (ie[i]),
+      .ie_i        (ie),
 
       .prio_i      (prio),
-      .threshold_i (threshold[i]),
+      .threshold_i (threshold),
 
       .irq_o       (irq_o[i]),
-      .irq_id_o    (irq_id_o[i])
+      .irq_id_o    (irq_id_o)
 
     );
   end
diff --git a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv
index 72339602f..7c0140e62 100644
--- a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv
+++ b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv
@@ -382,7 +382,7 @@ package rv_plic_reg_pkg;
   // Register to internal design logic //
   ///////////////////////////////////////
   typedef struct packed {
-    rv_plic_reg2hw_le_mreg_t [82:0] le; // [343:261]
+    logic [82:0] le; // [343:261]
     rv_plic_reg2hw_prio0_reg_t prio0; // [260:259]
     rv_plic_reg2hw_prio1_reg_t prio1; // [258:257]
     rv_plic_reg2hw_prio2_reg_t prio2; // [256:255]
@@ -466,7 +466,7 @@ package rv_plic_reg_pkg;
     rv_plic_reg2hw_prio80_reg_t prio80; // [100:99]
     rv_plic_reg2hw_prio81_reg_t prio81; // [98:97]
     rv_plic_reg2hw_prio82_reg_t prio82; // [96:95]
-    rv_plic_reg2hw_ie0_mreg_t [82:0] ie0; // [94:12]
+    logic [82:0] ie0; // [94:12]
     rv_plic_reg2hw_threshold0_reg_t threshold0; // [11:10]
     rv_plic_reg2hw_cc0_reg_t cc0; // [9:1]
     rv_plic_reg2hw_msip0_reg_t msip0; // [0:0]
@@ -476,7 +476,7 @@ package rv_plic_reg_pkg;
   // Internal design logic to register //
   ///////////////////////////////////////
   typedef struct packed {
-    rv_plic_hw2reg_ip_mreg_t [82:0] ip; // [172:7]
+    logic [82:0] ip [2]; // [172:7]
     rv_plic_hw2reg_cc0_reg_t cc0; // [6:-2]
   } rv_plic_hw2reg_t;
 
diff --git a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv
index 64b285761..4bb7cc6a1 100644
--- a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv
+++ b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv
@@ -14,8 +14,8 @@ module rv_plic_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
-  input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read
+  output wire [343:0] reg2hw,
+  input wire [172:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -917,8739 +917,5027 @@ module rv_plic_reg_top (
   // Subregister 0 of Multireg ip
   // R[ip0]: V(False)
 
-  // F[p0]: 0:0
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[0].de),
-    .d      (hw2reg.ip[0].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p0_qs)
-  );
-
-
-  // F[p1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[1].de),
-    .d      (hw2reg.ip[1].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p1_qs)
-  );
-
-
-  // F[p2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[2].de),
-    .d      (hw2reg.ip[2].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p2_qs)
-  );
-
-
-  // F[p3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[3].de),
-    .d      (hw2reg.ip[3].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p3_qs)
-  );
-
-
-  // F[p4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[4].de),
-    .d      (hw2reg.ip[4].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p4_qs)
-  );
-
-
-  // F[p5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[5].de),
-    .d      (hw2reg.ip[5].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p5_qs)
-  );
-
-
-  // F[p6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[6].de),
-    .d      (hw2reg.ip[6].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p6_qs)
-  );
-
-
-  // F[p7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[7].de),
-    .d      (hw2reg.ip[7].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p7_qs)
-  );
-
-
-  // F[p8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[8].de),
-    .d      (hw2reg.ip[8].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p8_qs)
-  );
-
-
-  // F[p9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[9].de),
-    .d      (hw2reg.ip[9].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p9_qs)
-  );
-
-
-  // F[p10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[10].de),
-    .d      (hw2reg.ip[10].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p10_qs)
-  );
-
-
-  // F[p11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[11].de),
-    .d      (hw2reg.ip[11].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p11_qs)
-  );
-
-
-  // F[p12]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[12].de),
-    .d      (hw2reg.ip[12].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p12_qs)
-  );
-
-
-  // F[p13]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[13].de),
-    .d      (hw2reg.ip[13].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p13_qs)
-  );
-
-
-  // F[p14]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[14].de),
-    .d      (hw2reg.ip[14].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p14_qs)
-  );
-
-
-  // F[p15]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[15].de),
-    .d      (hw2reg.ip[15].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p15_qs)
-  );
-
-
-  // F[p16]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[16].de),
-    .d      (hw2reg.ip[16].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p16_qs)
-  );
-
-
-  // F[p17]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[17].de),
-    .d      (hw2reg.ip[17].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p17_qs)
-  );
-
-
-  // F[p18]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[18].de),
-    .d      (hw2reg.ip[18].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p18_qs)
-  );
-
-
-  // F[p19]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[19].de),
-    .d      (hw2reg.ip[19].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p19_qs)
-  );
-
-
-  // F[p20]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[20].de),
-    .d      (hw2reg.ip[20].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p20_qs)
-  );
-
-
-  // F[p21]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[21].de),
-    .d      (hw2reg.ip[21].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p21_qs)
-  );
-
-
-  // F[p22]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[22].de),
-    .d      (hw2reg.ip[22].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p22_qs)
-  );
-
-
-  // F[p23]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[23].de),
-    .d      (hw2reg.ip[23].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p23_qs)
-  );
-
-
-  // F[p24]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[24].de),
-    .d      (hw2reg.ip[24].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p24_qs)
-  );
-
-
-  // F[p25]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[25].de),
-    .d      (hw2reg.ip[25].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p25_qs)
-  );
-
-
-  // F[p26]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[26].de),
-    .d      (hw2reg.ip[26].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p26_qs)
-  );
-
-
-  // F[p27]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[27].de),
-    .d      (hw2reg.ip[27].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p27_qs)
-  );
-
-
-  // F[p28]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[28].de),
-    .d      (hw2reg.ip[28].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p28_qs)
-  );
-
-
-  // F[p29]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[29].de),
-    .d      (hw2reg.ip[29].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p29_qs)
-  );
-
-
-  // F[p30]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[30].de),
-    .d      (hw2reg.ip[30].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p30_qs)
-  );
-
-
-  // F[p31]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[31].de),
-    .d      (hw2reg.ip[31].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p31_qs)
-  );
-
-
-  // Subregister 32 of Multireg ip
-  // R[ip1]: V(False)
-
-  // F[p32]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[32].de),
-    .d      (hw2reg.ip[32].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p32_qs)
-  );
-
-
-  // F[p33]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[33].de),
-    .d      (hw2reg.ip[33].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p33_qs)
-  );
-
-
-  // F[p34]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[34].de),
-    .d      (hw2reg.ip[34].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p34_qs)
-  );
-
-
-  // F[p35]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[35].de),
-    .d      (hw2reg.ip[35].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p35_qs)
-  );
-
-
-  // F[p36]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[36].de),
-    .d      (hw2reg.ip[36].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p36_qs)
-  );
-
-
-  // F[p37]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[37].de),
-    .d      (hw2reg.ip[37].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p37_qs)
-  );
-
-
-  // F[p38]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[38].de),
-    .d      (hw2reg.ip[38].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p38_qs)
-  );
-
-
-  // F[p39]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[39].de),
-    .d      (hw2reg.ip[39].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p39_qs)
-  );
-
-
-  // F[p40]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[40].de),
-    .d      (hw2reg.ip[40].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p40_qs)
-  );
-
-
-  // F[p41]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[41].de),
-    .d      (hw2reg.ip[41].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p41_qs)
-  );
-
-
-  // F[p42]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[42].de),
-    .d      (hw2reg.ip[42].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p42_qs)
-  );
-
-
-  // F[p43]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[43].de),
-    .d      (hw2reg.ip[43].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p43_qs)
-  );
-
-
-  // F[p44]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[44].de),
-    .d      (hw2reg.ip[44].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p44_qs)
-  );
-
-
-  // F[p45]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[45].de),
-    .d      (hw2reg.ip[45].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p45_qs)
-  );
-
-
-  // F[p46]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[46].de),
-    .d      (hw2reg.ip[46].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p46_qs)
-  );
-
-
-  // F[p47]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[47].de),
-    .d      (hw2reg.ip[47].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p47_qs)
-  );
-
-
-  // F[p48]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[48].de),
-    .d      (hw2reg.ip[48].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p48_qs)
-  );
-
-
-  // F[p49]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[49].de),
-    .d      (hw2reg.ip[49].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p49_qs)
-  );
-
-
-  // F[p50]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[50].de),
-    .d      (hw2reg.ip[50].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p50_qs)
-  );
-
-
-  // F[p51]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[51].de),
-    .d      (hw2reg.ip[51].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p51_qs)
-  );
-
-
-  // F[p52]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[52].de),
-    .d      (hw2reg.ip[52].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p52_qs)
-  );
-
-
-  // F[p53]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[53].de),
-    .d      (hw2reg.ip[53].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p53_qs)
-  );
-
-
-  // F[p54]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[54].de),
-    .d      (hw2reg.ip[54].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p54_qs)
-  );
-
-
-  // F[p55]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[55].de),
-    .d      (hw2reg.ip[55].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p55_qs)
-  );
-
-
-  // F[p56]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[56].de),
-    .d      (hw2reg.ip[56].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p56_qs)
-  );
-
-
-  // F[p57]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[57].de),
-    .d      (hw2reg.ip[57].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p57_qs)
-  );
-
-
-  // F[p58]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[58].de),
-    .d      (hw2reg.ip[58].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p58_qs)
-  );
-
-
-  // F[p59]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[59].de),
-    .d      (hw2reg.ip[59].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p59_qs)
-  );
-
-
-  // F[p60]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[60].de),
-    .d      (hw2reg.ip[60].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p60_qs)
-  );
-
-
-  // F[p61]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[61].de),
-    .d      (hw2reg.ip[61].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p61_qs)
-  );
-
-
-  // F[p62]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[62].de),
-    .d      (hw2reg.ip[62].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p62_qs)
-  );
-
-
-  // F[p63]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[63].de),
-    .d      (hw2reg.ip[63].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p63_qs)
-  );
-
-
-  // Subregister 64 of Multireg ip
-  // R[ip2]: V(False)
-
-  // F[p64]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[64].de),
-    .d      (hw2reg.ip[64].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p64_qs)
-  );
-
-
-  // F[p65]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[65].de),
-    .d      (hw2reg.ip[65].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p65_qs)
-  );
-
-
-  // F[p66]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[66].de),
-    .d      (hw2reg.ip[66].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p66_qs)
-  );
-
-
-  // F[p67]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[67].de),
-    .d      (hw2reg.ip[67].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p67_qs)
-  );
-
-
-  // F[p68]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[68].de),
-    .d      (hw2reg.ip[68].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p68_qs)
-  );
-
-
-  // F[p69]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[69].de),
-    .d      (hw2reg.ip[69].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p69_qs)
-  );
-
-
-  // F[p70]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[70].de),
-    .d      (hw2reg.ip[70].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p70_qs)
-  );
-
-
-  // F[p71]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[71].de),
-    .d      (hw2reg.ip[71].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p71_qs)
-  );
-
-
-  // F[p72]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[72].de),
-    .d      (hw2reg.ip[72].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p72_qs)
-  );
-
-
-  // F[p73]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[73].de),
-    .d      (hw2reg.ip[73].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p73_qs)
-  );
-
-
-  // F[p74]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[74].de),
-    .d      (hw2reg.ip[74].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p74_qs)
-  );
-
-
-  // F[p75]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[75].de),
-    .d      (hw2reg.ip[75].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p75_qs)
-  );
-
-
-  // F[p76]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[76].de),
-    .d      (hw2reg.ip[76].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p76_qs)
-  );
-
-
-  // F[p77]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[77].de),
-    .d      (hw2reg.ip[77].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p77_qs)
-  );
-
-
-  // F[p78]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[78].de),
-    .d      (hw2reg.ip[78].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p78_qs)
-  );
-
-
-  // F[p79]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[79].de),
-    .d      (hw2reg.ip[79].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p79_qs)
-  );
-
-
-  // F[p80]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[80].de),
-    .d      (hw2reg.ip[80].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p80_qs)
-  );
-
-
-  // F[p81]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[81].de),
-    .d      (hw2reg.ip[81].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p81_qs)
-  );
-
-
-  // F[p82]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[82].de),
-    .d      (hw2reg.ip[82].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p82_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg le
-  // R[le0]: V(False)
-
-  // F[le0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le0_we),
-    .wd     (le0_le0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[0].q ),
-
-    // to register interface (read)
-    .qs     (le0_le0_qs)
-  );
-
-
-  // F[le1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le1_we),
-    .wd     (le0_le1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[1].q ),
-
-    // to register interface (read)
-    .qs     (le0_le1_qs)
-  );
-
-
-  // F[le2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le2_we),
-    .wd     (le0_le2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[2].q ),
-
-    // to register interface (read)
-    .qs     (le0_le2_qs)
-  );
-
-
-  // F[le3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le3_we),
-    .wd     (le0_le3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[3].q ),
-
-    // to register interface (read)
-    .qs     (le0_le3_qs)
-  );
-
-
-  // F[le4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le4_we),
-    .wd     (le0_le4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[4].q ),
-
-    // to register interface (read)
-    .qs     (le0_le4_qs)
-  );
-
-
-  // F[le5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le5_we),
-    .wd     (le0_le5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[5].q ),
-
-    // to register interface (read)
-    .qs     (le0_le5_qs)
-  );
-
-
-  // F[le6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le6_we),
-    .wd     (le0_le6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[6].q ),
-
-    // to register interface (read)
-    .qs     (le0_le6_qs)
-  );
-
-
-  // F[le7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le7_we),
-    .wd     (le0_le7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[7].q ),
-
-    // to register interface (read)
-    .qs     (le0_le7_qs)
-  );
-
-
-  // F[le8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le8_we),
-    .wd     (le0_le8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[8].q ),
-
-    // to register interface (read)
-    .qs     (le0_le8_qs)
-  );
-
-
-  // F[le9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le9_we),
-    .wd     (le0_le9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[9].q ),
-
-    // to register interface (read)
-    .qs     (le0_le9_qs)
-  );
-
-
-  // F[le10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le10_we),
-    .wd     (le0_le10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[10].q ),
-
-    // to register interface (read)
-    .qs     (le0_le10_qs)
-  );
-
-
-  // F[le11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le11_we),
-    .wd     (le0_le11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[11].q ),
-
-    // to register interface (read)
-    .qs     (le0_le11_qs)
-  );
-
-
-  // F[le12]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le12_we),
-    .wd     (le0_le12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[12].q ),
-
-    // to register interface (read)
-    .qs     (le0_le12_qs)
-  );
-
-
-  // F[le13]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le13_we),
-    .wd     (le0_le13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[13].q ),
-
-    // to register interface (read)
-    .qs     (le0_le13_qs)
-  );
-
-
-  // F[le14]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le14_we),
-    .wd     (le0_le14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[14].q ),
-
-    // to register interface (read)
-    .qs     (le0_le14_qs)
-  );
-
-
-  // F[le15]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le15_we),
-    .wd     (le0_le15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[15].q ),
-
-    // to register interface (read)
-    .qs     (le0_le15_qs)
-  );
-
-
-  // F[le16]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le16_we),
-    .wd     (le0_le16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[16].q ),
-
-    // to register interface (read)
-    .qs     (le0_le16_qs)
-  );
-
-
-  // F[le17]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le17_we),
-    .wd     (le0_le17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[17].q ),
-
-    // to register interface (read)
-    .qs     (le0_le17_qs)
-  );
-
-
-  // F[le18]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le18_we),
-    .wd     (le0_le18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[18].q ),
-
-    // to register interface (read)
-    .qs     (le0_le18_qs)
-  );
-
-
-  // F[le19]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le19_we),
-    .wd     (le0_le19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[19].q ),
-
-    // to register interface (read)
-    .qs     (le0_le19_qs)
-  );
-
-
-  // F[le20]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le20_we),
-    .wd     (le0_le20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[20].q ),
-
-    // to register interface (read)
-    .qs     (le0_le20_qs)
-  );
-
-
-  // F[le21]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le21_we),
-    .wd     (le0_le21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[21].q ),
-
-    // to register interface (read)
-    .qs     (le0_le21_qs)
-  );
-
-
-  // F[le22]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le22_we),
-    .wd     (le0_le22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[22].q ),
-
-    // to register interface (read)
-    .qs     (le0_le22_qs)
-  );
-
-
-  // F[le23]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le23_we),
-    .wd     (le0_le23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[23].q ),
-
-    // to register interface (read)
-    .qs     (le0_le23_qs)
-  );
-
-
-  // F[le24]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le24_we),
-    .wd     (le0_le24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[24].q ),
-
-    // to register interface (read)
-    .qs     (le0_le24_qs)
-  );
-
-
-  // F[le25]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le25_we),
-    .wd     (le0_le25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[25].q ),
-
-    // to register interface (read)
-    .qs     (le0_le25_qs)
-  );
-
-
-  // F[le26]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le26_we),
-    .wd     (le0_le26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[26].q ),
-
-    // to register interface (read)
-    .qs     (le0_le26_qs)
-  );
-
-
-  // F[le27]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le27_we),
-    .wd     (le0_le27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[27].q ),
-
-    // to register interface (read)
-    .qs     (le0_le27_qs)
-  );
-
-
-  // F[le28]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le28_we),
-    .wd     (le0_le28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[28].q ),
-
-    // to register interface (read)
-    .qs     (le0_le28_qs)
-  );
-
-
-  // F[le29]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le29_we),
-    .wd     (le0_le29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[29].q ),
-
-    // to register interface (read)
-    .qs     (le0_le29_qs)
-  );
-
-
-  // F[le30]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le30_we),
-    .wd     (le0_le30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[30].q ),
-
-    // to register interface (read)
-    .qs     (le0_le30_qs)
-  );
-
-
-  // F[le31]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le31_we),
-    .wd     (le0_le31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[31].q ),
-
-    // to register interface (read)
-    .qs     (le0_le31_qs)
-  );
-
-
-  // Subregister 32 of Multireg le
-  // R[le1]: V(False)
-
-  // F[le32]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le32_we),
-    .wd     (le1_le32_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[32].q ),
-
-    // to register interface (read)
-    .qs     (le1_le32_qs)
-  );
-
-
-  // F[le33]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le33_we),
-    .wd     (le1_le33_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[33].q ),
-
-    // to register interface (read)
-    .qs     (le1_le33_qs)
-  );
-
-
-  // F[le34]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le34_we),
-    .wd     (le1_le34_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[34].q ),
-
-    // to register interface (read)
-    .qs     (le1_le34_qs)
-  );
-
-
-  // F[le35]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le35_we),
-    .wd     (le1_le35_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[35].q ),
-
-    // to register interface (read)
-    .qs     (le1_le35_qs)
-  );
-
-
-  // F[le36]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le36_we),
-    .wd     (le1_le36_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[36].q ),
-
-    // to register interface (read)
-    .qs     (le1_le36_qs)
-  );
-
-
-  // F[le37]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le37_we),
-    .wd     (le1_le37_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[37].q ),
-
-    // to register interface (read)
-    .qs     (le1_le37_qs)
-  );
-
-
-  // F[le38]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le38_we),
-    .wd     (le1_le38_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[38].q ),
-
-    // to register interface (read)
-    .qs     (le1_le38_qs)
-  );
-
-
-  // F[le39]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le39_we),
-    .wd     (le1_le39_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[39].q ),
-
-    // to register interface (read)
-    .qs     (le1_le39_qs)
-  );
-
-
-  // F[le40]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le40_we),
-    .wd     (le1_le40_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[40].q ),
-
-    // to register interface (read)
-    .qs     (le1_le40_qs)
-  );
-
-
-  // F[le41]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le41_we),
-    .wd     (le1_le41_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[41].q ),
-
-    // to register interface (read)
-    .qs     (le1_le41_qs)
-  );
-
-
-  // F[le42]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le42_we),
-    .wd     (le1_le42_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[42].q ),
-
-    // to register interface (read)
-    .qs     (le1_le42_qs)
-  );
-
-
-  // F[le43]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le43_we),
-    .wd     (le1_le43_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[43].q ),
-
-    // to register interface (read)
-    .qs     (le1_le43_qs)
-  );
-
-
-  // F[le44]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le44_we),
-    .wd     (le1_le44_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[44].q ),
-
-    // to register interface (read)
-    .qs     (le1_le44_qs)
-  );
-
-
-  // F[le45]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le45_we),
-    .wd     (le1_le45_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[45].q ),
-
-    // to register interface (read)
-    .qs     (le1_le45_qs)
-  );
-
-
-  // F[le46]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le46_we),
-    .wd     (le1_le46_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[46].q ),
-
-    // to register interface (read)
-    .qs     (le1_le46_qs)
-  );
-
-
-  // F[le47]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le47_we),
-    .wd     (le1_le47_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[47].q ),
-
-    // to register interface (read)
-    .qs     (le1_le47_qs)
-  );
-
-
-  // F[le48]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le48_we),
-    .wd     (le1_le48_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[48].q ),
-
-    // to register interface (read)
-    .qs     (le1_le48_qs)
-  );
-
-
-  // F[le49]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le49_we),
-    .wd     (le1_le49_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[49].q ),
-
-    // to register interface (read)
-    .qs     (le1_le49_qs)
-  );
-
-
-  // F[le50]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le50_we),
-    .wd     (le1_le50_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[50].q ),
-
-    // to register interface (read)
-    .qs     (le1_le50_qs)
-  );
-
-
-  // F[le51]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le51_we),
-    .wd     (le1_le51_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[51].q ),
-
-    // to register interface (read)
-    .qs     (le1_le51_qs)
-  );
-
-
-  // F[le52]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le52_we),
-    .wd     (le1_le52_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[52].q ),
-
-    // to register interface (read)
-    .qs     (le1_le52_qs)
-  );
-
-
-  // F[le53]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le53_we),
-    .wd     (le1_le53_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[53].q ),
-
-    // to register interface (read)
-    .qs     (le1_le53_qs)
-  );
-
-
-  // F[le54]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le54_we),
-    .wd     (le1_le54_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[54].q ),
-
-    // to register interface (read)
-    .qs     (le1_le54_qs)
-  );
-
-
-  // F[le55]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le55_we),
-    .wd     (le1_le55_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[55].q ),
-
-    // to register interface (read)
-    .qs     (le1_le55_qs)
-  );
-
-
-  // F[le56]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le56_we),
-    .wd     (le1_le56_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[56].q ),
-
-    // to register interface (read)
-    .qs     (le1_le56_qs)
-  );
-
-
-  // F[le57]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le57_we),
-    .wd     (le1_le57_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[57].q ),
-
-    // to register interface (read)
-    .qs     (le1_le57_qs)
-  );
-
-
-  // F[le58]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le58_we),
-    .wd     (le1_le58_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[58].q ),
-
-    // to register interface (read)
-    .qs     (le1_le58_qs)
-  );
-
-
-  // F[le59]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le59_we),
-    .wd     (le1_le59_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[59].q ),
-
-    // to register interface (read)
-    .qs     (le1_le59_qs)
-  );
-
-
-  // F[le60]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le60_we),
-    .wd     (le1_le60_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[60].q ),
-
-    // to register interface (read)
-    .qs     (le1_le60_qs)
-  );
-
-
-  // F[le61]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le61_we),
-    .wd     (le1_le61_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[61].q ),
-
-    // to register interface (read)
-    .qs     (le1_le61_qs)
-  );
-
-
-  // F[le62]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le62_we),
-    .wd     (le1_le62_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[62].q ),
-
-    // to register interface (read)
-    .qs     (le1_le62_qs)
-  );
-
-
-  // F[le63]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le63_we),
-    .wd     (le1_le63_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[63].q ),
-
-    // to register interface (read)
-    .qs     (le1_le63_qs)
-  );
-
-
-  // Subregister 64 of Multireg le
-  // R[le2]: V(False)
-
-  // F[le64]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le64_we),
-    .wd     (le2_le64_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[64].q ),
-
-    // to register interface (read)
-    .qs     (le2_le64_qs)
-  );
-
-
-  // F[le65]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le65_we),
-    .wd     (le2_le65_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[65].q ),
-
-    // to register interface (read)
-    .qs     (le2_le65_qs)
-  );
-
-
-  // F[le66]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le66_we),
-    .wd     (le2_le66_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[66].q ),
-
-    // to register interface (read)
-    .qs     (le2_le66_qs)
-  );
-
-
-  // F[le67]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le67_we),
-    .wd     (le2_le67_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[67].q ),
-
-    // to register interface (read)
-    .qs     (le2_le67_qs)
-  );
-
-
-  // F[le68]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le68_we),
-    .wd     (le2_le68_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[68].q ),
-
-    // to register interface (read)
-    .qs     (le2_le68_qs)
-  );
-
-
-  // F[le69]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le69_we),
-    .wd     (le2_le69_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[69].q ),
-
-    // to register interface (read)
-    .qs     (le2_le69_qs)
-  );
-
-
-  // F[le70]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le70_we),
-    .wd     (le2_le70_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[70].q ),
-
-    // to register interface (read)
-    .qs     (le2_le70_qs)
-  );
-
-
-  // F[le71]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le71_we),
-    .wd     (le2_le71_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[71].q ),
-
-    // to register interface (read)
-    .qs     (le2_le71_qs)
-  );
-
-
-  // F[le72]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le72_we),
-    .wd     (le2_le72_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[72].q ),
-
-    // to register interface (read)
-    .qs     (le2_le72_qs)
-  );
-
-
-  // F[le73]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le73_we),
-    .wd     (le2_le73_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[73].q ),
-
-    // to register interface (read)
-    .qs     (le2_le73_qs)
-  );
-
-
-  // F[le74]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le74_we),
-    .wd     (le2_le74_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[74].q ),
-
-    // to register interface (read)
-    .qs     (le2_le74_qs)
-  );
-
-
-  // F[le75]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le75_we),
-    .wd     (le2_le75_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[75].q ),
-
-    // to register interface (read)
-    .qs     (le2_le75_qs)
-  );
-
-
-  // F[le76]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le76_we),
-    .wd     (le2_le76_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[76].q ),
-
-    // to register interface (read)
-    .qs     (le2_le76_qs)
-  );
-
-
-  // F[le77]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le77_we),
-    .wd     (le2_le77_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[77].q ),
-
-    // to register interface (read)
-    .qs     (le2_le77_qs)
-  );
-
-
-  // F[le78]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le78_we),
-    .wd     (le2_le78_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[78].q ),
-
-    // to register interface (read)
-    .qs     (le2_le78_qs)
-  );
-
-
-  // F[le79]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le79_we),
-    .wd     (le2_le79_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[79].q ),
-
-    // to register interface (read)
-    .qs     (le2_le79_qs)
-  );
-
-
-  // F[le80]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le80_we),
-    .wd     (le2_le80_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[80].q ),
-
-    // to register interface (read)
-    .qs     (le2_le80_qs)
-  );
-
-
-  // F[le81]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le81_we),
-    .wd     (le2_le81_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[81].q ),
-
-    // to register interface (read)
-    .qs     (le2_le81_qs)
-  );
-
-
-  // F[le82]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le82_we),
-    .wd     (le2_le82_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[82].q ),
-
-    // to register interface (read)
-    .qs     (le2_le82_qs)
-  );
-
-
-
-  // R[prio0]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio0_we),
-    .wd     (prio0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio0.q ),
-
-    // to register interface (read)
-    .qs     (prio0_qs)
-  );
-
-
-  // R[prio1]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio1_we),
-    .wd     (prio1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio1.q ),
-
-    // to register interface (read)
-    .qs     (prio1_qs)
-  );
-
-
-  // R[prio2]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio2_we),
-    .wd     (prio2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio2.q ),
-
-    // to register interface (read)
-    .qs     (prio2_qs)
-  );
-
-
-  // R[prio3]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio3_we),
-    .wd     (prio3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio3.q ),
-
-    // to register interface (read)
-    .qs     (prio3_qs)
-  );
-
-
-  // R[prio4]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio4_we),
-    .wd     (prio4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio4.q ),
-
-    // to register interface (read)
-    .qs     (prio4_qs)
-  );
-
-
-  // R[prio5]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio5_we),
-    .wd     (prio5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio5.q ),
-
-    // to register interface (read)
-    .qs     (prio5_qs)
-  );
-
-
-  // R[prio6]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio6_we),
-    .wd     (prio6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio6.q ),
-
-    // to register interface (read)
-    .qs     (prio6_qs)
-  );
-
-
-  // R[prio7]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio7_we),
-    .wd     (prio7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio7.q ),
-
-    // to register interface (read)
-    .qs     (prio7_qs)
-  );
-
-
-  // R[prio8]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio8_we),
-    .wd     (prio8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio8.q ),
-
-    // to register interface (read)
-    .qs     (prio8_qs)
-  );
-
-
-  // R[prio9]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio9_we),
-    .wd     (prio9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio9.q ),
-
-    // to register interface (read)
-    .qs     (prio9_qs)
-  );
-
-
-  // R[prio10]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio10_we),
-    .wd     (prio10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio10.q ),
-
-    // to register interface (read)
-    .qs     (prio10_qs)
-  );
-
-
-  // R[prio11]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio11_we),
-    .wd     (prio11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio11.q ),
-
-    // to register interface (read)
-    .qs     (prio11_qs)
-  );
-
-
-  // R[prio12]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio12_we),
-    .wd     (prio12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio12.q ),
-
-    // to register interface (read)
-    .qs     (prio12_qs)
-  );
-
-
-  // R[prio13]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio13_we),
-    .wd     (prio13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio13.q ),
-
-    // to register interface (read)
-    .qs     (prio13_qs)
-  );
-
-
-  // R[prio14]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio14_we),
-    .wd     (prio14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio14.q ),
-
-    // to register interface (read)
-    .qs     (prio14_qs)
-  );
-
-
-  // R[prio15]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio15_we),
-    .wd     (prio15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio15.q ),
-
-    // to register interface (read)
-    .qs     (prio15_qs)
-  );
-
-
-  // R[prio16]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio16_we),
-    .wd     (prio16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio16.q ),
-
-    // to register interface (read)
-    .qs     (prio16_qs)
-  );
-
-
-  // R[prio17]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio17_we),
-    .wd     (prio17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio17.q ),
-
-    // to register interface (read)
-    .qs     (prio17_qs)
-  );
-
-
-  // R[prio18]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio18_we),
-    .wd     (prio18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio18.q ),
-
-    // to register interface (read)
-    .qs     (prio18_qs)
-  );
-
-
-  // R[prio19]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio19_we),
-    .wd     (prio19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio19.q ),
-
-    // to register interface (read)
-    .qs     (prio19_qs)
-  );
-
-
-  // R[prio20]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio20_we),
-    .wd     (prio20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio20.q ),
-
-    // to register interface (read)
-    .qs     (prio20_qs)
-  );
-
-
-  // R[prio21]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio21_we),
-    .wd     (prio21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio21.q ),
-
-    // to register interface (read)
-    .qs     (prio21_qs)
-  );
-
-
-  // R[prio22]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio22_we),
-    .wd     (prio22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio22.q ),
-
-    // to register interface (read)
-    .qs     (prio22_qs)
-  );
-
-
-  // R[prio23]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio23_we),
-    .wd     (prio23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio23.q ),
-
-    // to register interface (read)
-    .qs     (prio23_qs)
-  );
-
-
-  // R[prio24]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio24_we),
-    .wd     (prio24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio24.q ),
-
-    // to register interface (read)
-    .qs     (prio24_qs)
-  );
-
-
-  // R[prio25]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio25_we),
-    .wd     (prio25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio25.q ),
-
-    // to register interface (read)
-    .qs     (prio25_qs)
-  );
-
-
-  // R[prio26]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio26_we),
-    .wd     (prio26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio26.q ),
-
-    // to register interface (read)
-    .qs     (prio26_qs)
-  );
-
-
-  // R[prio27]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio27_we),
-    .wd     (prio27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio27.q ),
-
-    // to register interface (read)
-    .qs     (prio27_qs)
-  );
-
-
-  // R[prio28]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio28_we),
-    .wd     (prio28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio28.q ),
-
-    // to register interface (read)
-    .qs     (prio28_qs)
-  );
-
-
-  // R[prio29]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio29_we),
-    .wd     (prio29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio29.q ),
-
-    // to register interface (read)
-    .qs     (prio29_qs)
-  );
-
-
-  // R[prio30]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio30_we),
-    .wd     (prio30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio30.q ),
-
-    // to register interface (read)
-    .qs     (prio30_qs)
-  );
-
-
-  // R[prio31]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio31_we),
-    .wd     (prio31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio31.q ),
-
-    // to register interface (read)
-    .qs     (prio31_qs)
-  );
-
-
-  // R[prio32]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio32_we),
-    .wd     (prio32_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio32.q ),
-
-    // to register interface (read)
-    .qs     (prio32_qs)
-  );
-
-
-  // R[prio33]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio33_we),
-    .wd     (prio33_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio33.q ),
-
-    // to register interface (read)
-    .qs     (prio33_qs)
-  );
-
-
-  // R[prio34]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio34_we),
-    .wd     (prio34_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio34.q ),
-
-    // to register interface (read)
-    .qs     (prio34_qs)
-  );
-
-
-  // R[prio35]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio35_we),
-    .wd     (prio35_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio35.q ),
-
-    // to register interface (read)
-    .qs     (prio35_qs)
-  );
-
-
-  // R[prio36]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio36_we),
-    .wd     (prio36_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio36.q ),
-
-    // to register interface (read)
-    .qs     (prio36_qs)
-  );
-
-
-  // R[prio37]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio37_we),
-    .wd     (prio37_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio37.q ),
-
-    // to register interface (read)
-    .qs     (prio37_qs)
-  );
-
-
-  // R[prio38]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio38_we),
-    .wd     (prio38_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio38.q ),
-
-    // to register interface (read)
-    .qs     (prio38_qs)
-  );
-
-
-  // R[prio39]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio39_we),
-    .wd     (prio39_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio39.q ),
-
-    // to register interface (read)
-    .qs     (prio39_qs)
-  );
-
-
-  // R[prio40]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio40_we),
-    .wd     (prio40_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio40.q ),
-
-    // to register interface (read)
-    .qs     (prio40_qs)
-  );
-
-
-  // R[prio41]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio41_we),
-    .wd     (prio41_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio41.q ),
-
-    // to register interface (read)
-    .qs     (prio41_qs)
-  );
-
-
-  // R[prio42]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio42_we),
-    .wd     (prio42_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio42.q ),
-
-    // to register interface (read)
-    .qs     (prio42_qs)
-  );
-
-
-  // R[prio43]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio43_we),
-    .wd     (prio43_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio43.q ),
-
-    // to register interface (read)
-    .qs     (prio43_qs)
-  );
-
-
-  // R[prio44]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio44_we),
-    .wd     (prio44_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio44.q ),
-
-    // to register interface (read)
-    .qs     (prio44_qs)
-  );
-
-
-  // R[prio45]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio45_we),
-    .wd     (prio45_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio45.q ),
-
-    // to register interface (read)
-    .qs     (prio45_qs)
-  );
-
-
-  // R[prio46]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio46_we),
-    .wd     (prio46_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio46.q ),
-
-    // to register interface (read)
-    .qs     (prio46_qs)
-  );
-
-
-  // R[prio47]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio47_we),
-    .wd     (prio47_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio47.q ),
-
-    // to register interface (read)
-    .qs     (prio47_qs)
-  );
-
-
-  // R[prio48]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio48_we),
-    .wd     (prio48_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio48.q ),
-
-    // to register interface (read)
-    .qs     (prio48_qs)
-  );
-
-
-  // R[prio49]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio49_we),
-    .wd     (prio49_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio49.q ),
-
-    // to register interface (read)
-    .qs     (prio49_qs)
-  );
-
-
-  // R[prio50]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio50_we),
-    .wd     (prio50_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio50.q ),
-
-    // to register interface (read)
-    .qs     (prio50_qs)
-  );
-
-
-  // R[prio51]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio51_we),
-    .wd     (prio51_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio51.q ),
-
-    // to register interface (read)
-    .qs     (prio51_qs)
-  );
-
-
-  // R[prio52]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio52_we),
-    .wd     (prio52_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio52.q ),
-
-    // to register interface (read)
-    .qs     (prio52_qs)
-  );
-
-
-  // R[prio53]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio53_we),
-    .wd     (prio53_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio53.q ),
-
-    // to register interface (read)
-    .qs     (prio53_qs)
-  );
-
-
-  // R[prio54]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio54_we),
-    .wd     (prio54_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio54.q ),
-
-    // to register interface (read)
-    .qs     (prio54_qs)
-  );
-
-
-  // R[prio55]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio55_we),
-    .wd     (prio55_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio55.q ),
-
-    // to register interface (read)
-    .qs     (prio55_qs)
-  );
-
-
-  // R[prio56]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio56_we),
-    .wd     (prio56_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio56.q ),
-
-    // to register interface (read)
-    .qs     (prio56_qs)
-  );
-
-
-  // R[prio57]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio57_we),
-    .wd     (prio57_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio57.q ),
-
-    // to register interface (read)
-    .qs     (prio57_qs)
-  );
-
-
-  // R[prio58]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio58_we),
-    .wd     (prio58_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio58.q ),
-
-    // to register interface (read)
-    .qs     (prio58_qs)
-  );
-
-
-  // R[prio59]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio59_we),
-    .wd     (prio59_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio59.q ),
-
-    // to register interface (read)
-    .qs     (prio59_qs)
-  );
-
-
-  // R[prio60]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio60_we),
-    .wd     (prio60_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio60.q ),
-
-    // to register interface (read)
-    .qs     (prio60_qs)
-  );
-
-
-  // R[prio61]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio61_we),
-    .wd     (prio61_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio61.q ),
-
-    // to register interface (read)
-    .qs     (prio61_qs)
-  );
-
-
-  // R[prio62]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio62_we),
-    .wd     (prio62_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio62.q ),
-
-    // to register interface (read)
-    .qs     (prio62_qs)
-  );
-
-
-  // R[prio63]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio63_we),
-    .wd     (prio63_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio63.q ),
-
-    // to register interface (read)
-    .qs     (prio63_qs)
-  );
-
-
-  // R[prio64]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio64_we),
-    .wd     (prio64_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio64.q ),
-
-    // to register interface (read)
-    .qs     (prio64_qs)
-  );
-
-
-  // R[prio65]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio65_we),
-    .wd     (prio65_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio65.q ),
-
-    // to register interface (read)
-    .qs     (prio65_qs)
-  );
-
-
-  // R[prio66]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio66_we),
-    .wd     (prio66_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio66.q ),
-
-    // to register interface (read)
-    .qs     (prio66_qs)
-  );
-
-
-  // R[prio67]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio67_we),
-    .wd     (prio67_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio67.q ),
-
-    // to register interface (read)
-    .qs     (prio67_qs)
-  );
-
-
-  // R[prio68]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio68_we),
-    .wd     (prio68_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio68.q ),
-
-    // to register interface (read)
-    .qs     (prio68_qs)
-  );
-
-
-  // R[prio69]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio69_we),
-    .wd     (prio69_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio69.q ),
-
-    // to register interface (read)
-    .qs     (prio69_qs)
-  );
-
-
-  // R[prio70]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio70_we),
-    .wd     (prio70_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio70.q ),
-
-    // to register interface (read)
-    .qs     (prio70_qs)
-  );
-
-
-  // R[prio71]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio71_we),
-    .wd     (prio71_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio71.q ),
-
-    // to register interface (read)
-    .qs     (prio71_qs)
-  );
-
-
-  // R[prio72]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio72_we),
-    .wd     (prio72_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio72.q ),
-
-    // to register interface (read)
-    .qs     (prio72_qs)
-  );
-
-
-  // R[prio73]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio73_we),
-    .wd     (prio73_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio73.q ),
-
-    // to register interface (read)
-    .qs     (prio73_qs)
-  );
-
-
-  // R[prio74]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio74_we),
-    .wd     (prio74_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio74.q ),
-
-    // to register interface (read)
-    .qs     (prio74_qs)
-  );
-
-
-  // R[prio75]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio75_we),
-    .wd     (prio75_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio75.q ),
-
-    // to register interface (read)
-    .qs     (prio75_qs)
-  );
-
-
-  // R[prio76]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio76_we),
-    .wd     (prio76_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio76.q ),
-
-    // to register interface (read)
-    .qs     (prio76_qs)
-  );
-
-
-  // R[prio77]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio77_we),
-    .wd     (prio77_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio77.q ),
-
-    // to register interface (read)
-    .qs     (prio77_qs)
-  );
-
-
-  // R[prio78]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio78_we),
-    .wd     (prio78_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio78.q ),
-
-    // to register interface (read)
-    .qs     (prio78_qs)
-  );
-
-
-  // R[prio79]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio79_we),
-    .wd     (prio79_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio79.q ),
-
-    // to register interface (read)
-    .qs     (prio79_qs)
-  );
-
-
-  // R[prio80]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio80_we),
-    .wd     (prio80_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio80.q ),
-
-    // to register interface (read)
-    .qs     (prio80_qs)
-  );
-
-
-  // R[prio81]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio81_we),
-    .wd     (prio81_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio81.q ),
-
-    // to register interface (read)
-    .qs     (prio81_qs)
-  );
-
-
-  // R[prio82]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio82_we),
-    .wd     (prio82_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio82.q ),
-
-    // to register interface (read)
-    .qs     (prio82_qs)
-  );
-
-
-
-  // Subregister 0 of Multireg ie0
-  // R[ie00]: V(False)
-
-  // F[e0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e0_we),
-    .wd     (ie00_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[0].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e0_qs)
-  );
-
-
-  // F[e1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e1_we),
-    .wd     (ie00_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[1].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e1_qs)
-  );
-
-
-  // F[e2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e2_we),
-    .wd     (ie00_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[2].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e2_qs)
-  );
-
-
-  // F[e3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e3_we),
-    .wd     (ie00_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[3].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e3_qs)
-  );
-
-
-  // F[e4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e4_we),
-    .wd     (ie00_e4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[4].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e4_qs)
-  );
-
-
-  // F[e5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e5_we),
-    .wd     (ie00_e5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[5].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e5_qs)
-  );
-
-
-  // F[e6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e6_we),
-    .wd     (ie00_e6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[6].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e6_qs)
-  );
-
-
-  // F[e7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e7_we),
-    .wd     (ie00_e7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[7].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e7_qs)
-  );
-
-
-  // F[e8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e8_we),
-    .wd     (ie00_e8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[8].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e8_qs)
-  );
-
-
-  // F[e9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e9_we),
-    .wd     (ie00_e9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[9].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e9_qs)
-  );
-
-
-  // F[e10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e10_we),
-    .wd     (ie00_e10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[10].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e10_qs)
-  );
-
-
-  // F[e11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e11_we),
-    .wd     (ie00_e11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[11].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e11_qs)
-  );
-
-
-  // F[e12]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e12_we),
-    .wd     (ie00_e12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[12].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e12_qs)
-  );
-
-
-  // F[e13]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e13_we),
-    .wd     (ie00_e13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[13].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e13_qs)
-  );
-
-
-  // F[e14]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e14_we),
-    .wd     (ie00_e14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[14].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e14_qs)
-  );
-
-
-  // F[e15]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e15_we),
-    .wd     (ie00_e15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[15].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e15_qs)
-  );
-
-
-  // F[e16]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e16_we),
-    .wd     (ie00_e16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[16].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e16_qs)
-  );
-
-
-  // F[e17]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e17_we),
-    .wd     (ie00_e17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[17].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e17_qs)
-  );
-
-
-  // F[e18]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e18_we),
-    .wd     (ie00_e18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[18].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e18_qs)
-  );
-
-
-  // F[e19]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e19_we),
-    .wd     (ie00_e19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[19].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e19_qs)
-  );
-
-
-  // F[e20]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e20_we),
-    .wd     (ie00_e20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[20].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e20_qs)
-  );
-
-
-  // F[e21]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e21_we),
-    .wd     (ie00_e21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[21].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e21_qs)
-  );
-
-
-  // F[e22]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e22_we),
-    .wd     (ie00_e22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[22].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e22_qs)
-  );
-
-
-  // F[e23]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e23_we),
-    .wd     (ie00_e23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[23].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e23_qs)
-  );
-
-
-  // F[e24]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e24_we),
-    .wd     (ie00_e24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[24].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e24_qs)
-  );
-
-
-  // F[e25]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e25_we),
-    .wd     (ie00_e25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[25].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e25_qs)
-  );
-
-
-  // F[e26]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e26_we),
-    .wd     (ie00_e26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[26].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e26_qs)
-  );
-
-
-  // F[e27]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e27_we),
-    .wd     (ie00_e27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[27].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e27_qs)
-  );
-
-
-  // F[e28]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e28_we),
-    .wd     (ie00_e28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[28].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e28_qs)
-  );
-
-
-  // F[e29]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e29_we),
-    .wd     (ie00_e29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[29].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e29_qs)
-  );
-
-
-  // F[e30]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e30_we),
-    .wd     (ie00_e30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[30].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e30_qs)
-  );
-
-
-  // F[e31]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e31_we),
-    .wd     (ie00_e31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[31].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e31_qs)
-  );
-
-
-  // Subregister 32 of Multireg ie0
-  // R[ie01]: V(False)
-
-  // F[e32]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e32_we),
-    .wd     (ie01_e32_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[32].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e32_qs)
-  );
-
-
-  // F[e33]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e33_we),
-    .wd     (ie01_e33_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[33].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e33_qs)
-  );
-
-
-  // F[e34]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e34_we),
-    .wd     (ie01_e34_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[34].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e34_qs)
-  );
-
-
-  // F[e35]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e35_we),
-    .wd     (ie01_e35_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[35].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e35_qs)
-  );
-
-
-  // F[e36]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e36_we),
-    .wd     (ie01_e36_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[36].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e36_qs)
-  );
-
-
-  // F[e37]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e37_we),
-    .wd     (ie01_e37_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[37].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e37_qs)
-  );
-
-
-  // F[e38]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e38_we),
-    .wd     (ie01_e38_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[38].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e38_qs)
-  );
-
-
-  // F[e39]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e39_we),
-    .wd     (ie01_e39_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[39].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e39_qs)
-  );
-
-
-  // F[e40]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e40_we),
-    .wd     (ie01_e40_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[40].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e40_qs)
-  );
-
-
-  // F[e41]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e41_we),
-    .wd     (ie01_e41_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[41].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e41_qs)
-  );
-
-
-  // F[e42]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e42_we),
-    .wd     (ie01_e42_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[42].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e42_qs)
-  );
-
-
-  // F[e43]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e43_we),
-    .wd     (ie01_e43_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[43].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e43_qs)
-  );
-
-
-  // F[e44]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e44_we),
-    .wd     (ie01_e44_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[44].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e44_qs)
-  );
-
-
-  // F[e45]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e45_we),
-    .wd     (ie01_e45_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[45].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e45_qs)
-  );
-
-
-  // F[e46]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e46_we),
-    .wd     (ie01_e46_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[46].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e46_qs)
-  );
-
-
-  // F[e47]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e47_we),
-    .wd     (ie01_e47_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[47].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e47_qs)
-  );
-
-
-  // F[e48]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e48_we),
-    .wd     (ie01_e48_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[48].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e48_qs)
-  );
-
-
-  // F[e49]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e49_we),
-    .wd     (ie01_e49_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[49].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e49_qs)
-  );
-
-
-  // F[e50]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e50_we),
-    .wd     (ie01_e50_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[50].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e50_qs)
-  );
-
-
-  // F[e51]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e51_we),
-    .wd     (ie01_e51_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[51].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e51_qs)
-  );
-
-
-  // F[e52]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e52_we),
-    .wd     (ie01_e52_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[52].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e52_qs)
-  );
-
-
-  // F[e53]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e53_we),
-    .wd     (ie01_e53_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[53].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e53_qs)
-  );
-
-
-  // F[e54]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e54_we),
-    .wd     (ie01_e54_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[54].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e54_qs)
-  );
-
-
-  // F[e55]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e55_we),
-    .wd     (ie01_e55_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[55].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e55_qs)
-  );
-
-
-  // F[e56]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e56_we),
-    .wd     (ie01_e56_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[56].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e56_qs)
-  );
-
-
-  // F[e57]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e57_we),
-    .wd     (ie01_e57_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[57].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e57_qs)
-  );
-
-
-  // F[e58]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e58_we),
-    .wd     (ie01_e58_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[58].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e58_qs)
-  );
-
-
-  // F[e59]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e59_we),
-    .wd     (ie01_e59_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[59].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e59_qs)
-  );
-
-
-  // F[e60]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e60_we),
-    .wd     (ie01_e60_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[60].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e60_qs)
-  );
-
-
-  // F[e61]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e61_we),
-    .wd     (ie01_e61_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[61].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e61_qs)
-  );
-
-
-  // F[e62]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e62_we),
-    .wd     (ie01_e62_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[62].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e62_qs)
-  );
-
-
-  // F[e63]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e63_we),
-    .wd     (ie01_e63_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[63].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e63_qs)
-  );
-
-
-  // Subregister 64 of Multireg ie0
-  // R[ie02]: V(False)
-
-  // F[e64]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e64_we),
-    .wd     (ie02_e64_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[64].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e64_qs)
-  );
-
-
-  // F[e65]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e65_we),
-    .wd     (ie02_e65_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[65].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e65_qs)
-  );
-
-
-  // F[e66]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e66_we),
-    .wd     (ie02_e66_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[66].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e66_qs)
-  );
-
-
-  // F[e67]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e67_we),
-    .wd     (ie02_e67_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[67].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e67_qs)
-  );
-
-
-  // F[e68]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e68_we),
-    .wd     (ie02_e68_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[68].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e68_qs)
-  );
-
-
-  // F[e69]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e69_we),
-    .wd     (ie02_e69_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[69].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e69_qs)
-  );
-
-
-  // F[e70]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e70_we),
-    .wd     (ie02_e70_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[70].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e70_qs)
-  );
-
-
-  // F[e71]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e71_we),
-    .wd     (ie02_e71_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[71].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e71_qs)
-  );
-
-
-  // F[e72]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e72_we),
-    .wd     (ie02_e72_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[72].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e72_qs)
-  );
-
-
-  // F[e73]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e73_we),
-    .wd     (ie02_e73_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[73].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e73_qs)
-  );
-
-
-  // F[e74]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e74_we),
-    .wd     (ie02_e74_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[74].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e74_qs)
-  );
-
-
-  // F[e75]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e75_we),
-    .wd     (ie02_e75_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[75].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e75_qs)
-  );
-
-
-  // F[e76]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e76_we),
-    .wd     (ie02_e76_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[76].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e76_qs)
-  );
-
-
-  // F[e77]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e77_we),
-    .wd     (ie02_e77_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[77].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e77_qs)
-  );
-
-
-  // F[e78]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e78_we),
-    .wd     (ie02_e78_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[78].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e78_qs)
-  );
-
-
-  // F[e79]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e79_we),
-    .wd     (ie02_e79_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[79].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e79_qs)
-  );
-
-
-  // F[e80]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e80_we),
-    .wd     (ie02_e80_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[80].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e80_qs)
-  );
-
-
-  // F[e81]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e81_we),
-    .wd     (ie02_e81_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[81].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e81_qs)
-  );
-
-
-  // F[e82]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e82_we),
-    .wd     (ie02_e82_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[82].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e82_qs)
-  );
-
-
-
-  // R[threshold0]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_threshold0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (threshold0_we),
-    .wd     (threshold0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.threshold0.q ),
-
-    // to register interface (read)
-    .qs     (threshold0_qs)
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[7]),
+          .d(hw2reg[8]),
+          .qe(),
+          .q(),
+          .qs(ip0_p0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[9]),
+          .d(hw2reg[10]),
+          .qe(),
+          .q(),
+          .qs(ip0_p1_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[11]),
+          .d(hw2reg[12]),
+          .qe(),
+          .q(),
+          .qs(ip0_p2_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[13]),
+          .d(hw2reg[14]),
+          .qe(),
+          .q(),
+          .qs(ip0_p3_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[15]),
+          .d(hw2reg[16]),
+          .qe(),
+          .q(),
+          .qs(ip0_p4_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[17]),
+          .d(hw2reg[18]),
+          .qe(),
+          .q(),
+          .qs(ip0_p5_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[19]),
+          .d(hw2reg[20]),
+          .qe(),
+          .q(),
+          .qs(ip0_p6_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[21]),
+          .d(hw2reg[22]),
+          .qe(),
+          .q(),
+          .qs(ip0_p7_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[23]),
+          .d(hw2reg[24]),
+          .qe(),
+          .q(),
+          .qs(ip0_p8_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[25]),
+          .d(hw2reg[26]),
+          .qe(),
+          .q(),
+          .qs(ip0_p9_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[27]),
+          .d(hw2reg[28]),
+          .qe(),
+          .q(),
+          .qs(ip0_p10_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[29]),
+          .d(hw2reg[30]),
+          .qe(),
+          .q(),
+          .qs(ip0_p11_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[31]),
+          .d(hw2reg[32]),
+          .qe(),
+          .q(),
+          .qs(ip0_p12_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[33]),
+          .d(hw2reg[34]),
+          .qe(),
+          .q(),
+          .qs(ip0_p13_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[35]),
+          .d(hw2reg[36]),
+          .qe(),
+          .q(),
+          .qs(ip0_p14_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[37]),
+          .d(hw2reg[38]),
+          .qe(),
+          .q(),
+          .qs(ip0_p15_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[39]),
+          .d(hw2reg[40]),
+          .qe(),
+          .q(),
+          .qs(ip0_p16_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[41]),
+          .d(hw2reg[42]),
+          .qe(),
+          .q(),
+          .qs(ip0_p17_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[43]),
+          .d(hw2reg[44]),
+          .qe(),
+          .q(),
+          .qs(ip0_p18_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[45]),
+          .d(hw2reg[46]),
+          .qe(),
+          .q(),
+          .qs(ip0_p19_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[47]),
+          .d(hw2reg[48]),
+          .qe(),
+          .q(),
+          .qs(ip0_p20_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[49]),
+          .d(hw2reg[50]),
+          .qe(),
+          .q(),
+          .qs(ip0_p21_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[51]),
+          .d(hw2reg[52]),
+          .qe(),
+          .q(),
+          .qs(ip0_p22_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[53]),
+          .d(hw2reg[54]),
+          .qe(),
+          .q(),
+          .qs(ip0_p23_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[55]),
+          .d(hw2reg[56]),
+          .qe(),
+          .q(),
+          .qs(ip0_p24_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[57]),
+          .d(hw2reg[58]),
+          .qe(),
+          .q(),
+          .qs(ip0_p25_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[59]),
+          .d(hw2reg[60]),
+          .qe(),
+          .q(),
+          .qs(ip0_p26_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[61]),
+          .d(hw2reg[62]),
+          .qe(),
+          .q(),
+          .qs(ip0_p27_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[63]),
+          .d(hw2reg[64]),
+          .qe(),
+          .q(),
+          .qs(ip0_p28_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[65]),
+          .d(hw2reg[66]),
+          .qe(),
+          .q(),
+          .qs(ip0_p29_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[67]),
+          .d(hw2reg[68]),
+          .qe(),
+          .q(),
+          .qs(ip0_p30_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[69]),
+          .d(hw2reg[70]),
+          .qe(),
+          .q(),
+          .qs(ip0_p31_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[71]),
+          .d(hw2reg[72]),
+          .qe(),
+          .q(),
+          .qs(ip1_p32_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[73]),
+          .d(hw2reg[74]),
+          .qe(),
+          .q(),
+          .qs(ip1_p33_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[75]),
+          .d(hw2reg[76]),
+          .qe(),
+          .q(),
+          .qs(ip1_p34_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[77]),
+          .d(hw2reg[78]),
+          .qe(),
+          .q(),
+          .qs(ip1_p35_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[79]),
+          .d(hw2reg[80]),
+          .qe(),
+          .q(),
+          .qs(ip1_p36_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[81]),
+          .d(hw2reg[82]),
+          .qe(),
+          .q(),
+          .qs(ip1_p37_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[83]),
+          .d(hw2reg[84]),
+          .qe(),
+          .q(),
+          .qs(ip1_p38_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[85]),
+          .d(hw2reg[86]),
+          .qe(),
+          .q(),
+          .qs(ip1_p39_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[87]),
+          .d(hw2reg[88]),
+          .qe(),
+          .q(),
+          .qs(ip1_p40_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[89]),
+          .d(hw2reg[90]),
+          .qe(),
+          .q(),
+          .qs(ip1_p41_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[91]),
+          .d(hw2reg[92]),
+          .qe(),
+          .q(),
+          .qs(ip1_p42_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[93]),
+          .d(hw2reg[94]),
+          .qe(),
+          .q(),
+          .qs(ip1_p43_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[95]),
+          .d(hw2reg[96]),
+          .qe(),
+          .q(),
+          .qs(ip1_p44_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[97]),
+          .d(hw2reg[98]),
+          .qe(),
+          .q(),
+          .qs(ip1_p45_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[99]),
+          .d(hw2reg[100]),
+          .qe(),
+          .q(),
+          .qs(ip1_p46_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[101]),
+          .d(hw2reg[102]),
+          .qe(),
+          .q(),
+          .qs(ip1_p47_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[103]),
+          .d(hw2reg[104]),
+          .qe(),
+          .q(),
+          .qs(ip1_p48_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[105]),
+          .d(hw2reg[106]),
+          .qe(),
+          .q(),
+          .qs(ip1_p49_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[107]),
+          .d(hw2reg[108]),
+          .qe(),
+          .q(),
+          .qs(ip1_p50_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[109]),
+          .d(hw2reg[110]),
+          .qe(),
+          .q(),
+          .qs(ip1_p51_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[111]),
+          .d(hw2reg[112]),
+          .qe(),
+          .q(),
+          .qs(ip1_p52_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[113]),
+          .d(hw2reg[114]),
+          .qe(),
+          .q(),
+          .qs(ip1_p53_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[115]),
+          .d(hw2reg[116]),
+          .qe(),
+          .q(),
+          .qs(ip1_p54_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[117]),
+          .d(hw2reg[118]),
+          .qe(),
+          .q(),
+          .qs(ip1_p55_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[119]),
+          .d(hw2reg[120]),
+          .qe(),
+          .q(),
+          .qs(ip1_p56_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[121]),
+          .d(hw2reg[122]),
+          .qe(),
+          .q(),
+          .qs(ip1_p57_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[123]),
+          .d(hw2reg[124]),
+          .qe(),
+          .q(),
+          .qs(ip1_p58_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[125]),
+          .d(hw2reg[126]),
+          .qe(),
+          .q(),
+          .qs(ip1_p59_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[127]),
+          .d(hw2reg[128]),
+          .qe(),
+          .q(),
+          .qs(ip1_p60_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[129]),
+          .d(hw2reg[130]),
+          .qe(),
+          .q(),
+          .qs(ip1_p61_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[131]),
+          .d(hw2reg[132]),
+          .qe(),
+          .q(),
+          .qs(ip1_p62_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[133]),
+          .d(hw2reg[134]),
+          .qe(),
+          .q(),
+          .qs(ip1_p63_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[135]),
+          .d(hw2reg[136]),
+          .qe(),
+          .q(),
+          .qs(ip2_p64_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[137]),
+          .d(hw2reg[138]),
+          .qe(),
+          .q(),
+          .qs(ip2_p65_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[139]),
+          .d(hw2reg[140]),
+          .qe(),
+          .q(),
+          .qs(ip2_p66_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[141]),
+          .d(hw2reg[142]),
+          .qe(),
+          .q(),
+          .qs(ip2_p67_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[143]),
+          .d(hw2reg[144]),
+          .qe(),
+          .q(),
+          .qs(ip2_p68_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[145]),
+          .d(hw2reg[146]),
+          .qe(),
+          .q(),
+          .qs(ip2_p69_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[147]),
+          .d(hw2reg[148]),
+          .qe(),
+          .q(),
+          .qs(ip2_p70_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[149]),
+          .d(hw2reg[150]),
+          .qe(),
+          .q(),
+          .qs(ip2_p71_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[151]),
+          .d(hw2reg[152]),
+          .qe(),
+          .q(),
+          .qs(ip2_p72_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[153]),
+          .d(hw2reg[154]),
+          .qe(),
+          .q(),
+          .qs(ip2_p73_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[155]),
+          .d(hw2reg[156]),
+          .qe(),
+          .q(),
+          .qs(ip2_p74_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[157]),
+          .d(hw2reg[158]),
+          .qe(),
+          .q(),
+          .qs(ip2_p75_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[159]),
+          .d(hw2reg[160]),
+          .qe(),
+          .q(),
+          .qs(ip2_p76_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[161]),
+          .d(hw2reg[162]),
+          .qe(),
+          .q(),
+          .qs(ip2_p77_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[163]),
+          .d(hw2reg[164]),
+          .qe(),
+          .q(),
+          .qs(ip2_p78_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[165]),
+          .d(hw2reg[166]),
+          .qe(),
+          .q(),
+          .qs(ip2_p79_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[167]),
+          .d(hw2reg[168]),
+          .qe(),
+          .q(),
+          .qs(ip2_p80_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[169]),
+          .d(hw2reg[170]),
+          .qe(),
+          .q(),
+          .qs(ip2_p81_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[171]),
+          .d(hw2reg[172]),
+          .qe(),
+          .q(),
+          .qs(ip2_p82_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le0_we),
+          .wd(le0_le0_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[261]),
+          .qs(le0_le0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le1_we),
+          .wd(le0_le1_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[262]),
+          .qs(le0_le1_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le2_we),
+          .wd(le0_le2_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[263]),
+          .qs(le0_le2_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le3_we),
+          .wd(le0_le3_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[264]),
+          .qs(le0_le3_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le4_we),
+          .wd(le0_le4_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[265]),
+          .qs(le0_le4_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le5_we),
+          .wd(le0_le5_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[266]),
+          .qs(le0_le5_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le6_we),
+          .wd(le0_le6_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[267]),
+          .qs(le0_le6_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le7_we),
+          .wd(le0_le7_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[268]),
+          .qs(le0_le7_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le8_we),
+          .wd(le0_le8_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[269]),
+          .qs(le0_le8_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le9_we),
+          .wd(le0_le9_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[270]),
+          .qs(le0_le9_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le10_we),
+          .wd(le0_le10_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[271]),
+          .qs(le0_le10_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le11_we),
+          .wd(le0_le11_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[272]),
+          .qs(le0_le11_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le12_we),
+          .wd(le0_le12_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[273]),
+          .qs(le0_le12_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le13_we),
+          .wd(le0_le13_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[274]),
+          .qs(le0_le13_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le14_we),
+          .wd(le0_le14_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[275]),
+          .qs(le0_le14_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le15_we),
+          .wd(le0_le15_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[276]),
+          .qs(le0_le15_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le16_we),
+          .wd(le0_le16_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[277]),
+          .qs(le0_le16_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le17_we),
+          .wd(le0_le17_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[278]),
+          .qs(le0_le17_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le18_we),
+          .wd(le0_le18_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[279]),
+          .qs(le0_le18_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le19_we),
+          .wd(le0_le19_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[280]),
+          .qs(le0_le19_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le20_we),
+          .wd(le0_le20_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[281]),
+          .qs(le0_le20_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le21_we),
+          .wd(le0_le21_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[282]),
+          .qs(le0_le21_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le22_we),
+          .wd(le0_le22_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[283]),
+          .qs(le0_le22_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le23_we),
+          .wd(le0_le23_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[284]),
+          .qs(le0_le23_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le24_we),
+          .wd(le0_le24_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[285]),
+          .qs(le0_le24_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le25_we),
+          .wd(le0_le25_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[286]),
+          .qs(le0_le25_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le26_we),
+          .wd(le0_le26_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[287]),
+          .qs(le0_le26_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le27_we),
+          .wd(le0_le27_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[288]),
+          .qs(le0_le27_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le28_we),
+          .wd(le0_le28_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[289]),
+          .qs(le0_le28_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le29_we),
+          .wd(le0_le29_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[290]),
+          .qs(le0_le29_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le30_we),
+          .wd(le0_le30_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[291]),
+          .qs(le0_le30_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le31_we),
+          .wd(le0_le31_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[292]),
+          .qs(le0_le31_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le32_we),
+          .wd(le1_le32_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[293]),
+          .qs(le1_le32_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le33_we),
+          .wd(le1_le33_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[294]),
+          .qs(le1_le33_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le34_we),
+          .wd(le1_le34_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[295]),
+          .qs(le1_le34_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le35_we),
+          .wd(le1_le35_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[296]),
+          .qs(le1_le35_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le36_we),
+          .wd(le1_le36_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[297]),
+          .qs(le1_le36_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le37_we),
+          .wd(le1_le37_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[298]),
+          .qs(le1_le37_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le38_we),
+          .wd(le1_le38_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[299]),
+          .qs(le1_le38_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le39_we),
+          .wd(le1_le39_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[300]),
+          .qs(le1_le39_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le40_we),
+          .wd(le1_le40_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[301]),
+          .qs(le1_le40_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le41_we),
+          .wd(le1_le41_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[302]),
+          .qs(le1_le41_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le42_we),
+          .wd(le1_le42_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[303]),
+          .qs(le1_le42_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le43_we),
+          .wd(le1_le43_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[304]),
+          .qs(le1_le43_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le44_we),
+          .wd(le1_le44_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[305]),
+          .qs(le1_le44_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le45_we),
+          .wd(le1_le45_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[306]),
+          .qs(le1_le45_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le46_we),
+          .wd(le1_le46_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[307]),
+          .qs(le1_le46_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le47_we),
+          .wd(le1_le47_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[308]),
+          .qs(le1_le47_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le48_we),
+          .wd(le1_le48_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[309]),
+          .qs(le1_le48_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le49_we),
+          .wd(le1_le49_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[310]),
+          .qs(le1_le49_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le50_we),
+          .wd(le1_le50_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[311]),
+          .qs(le1_le50_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le51_we),
+          .wd(le1_le51_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[312]),
+          .qs(le1_le51_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le52_we),
+          .wd(le1_le52_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[313]),
+          .qs(le1_le52_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le53_we),
+          .wd(le1_le53_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[314]),
+          .qs(le1_le53_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le54_we),
+          .wd(le1_le54_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[315]),
+          .qs(le1_le54_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le55_we),
+          .wd(le1_le55_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[316]),
+          .qs(le1_le55_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le56_we),
+          .wd(le1_le56_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[317]),
+          .qs(le1_le56_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le57_we),
+          .wd(le1_le57_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[318]),
+          .qs(le1_le57_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le58_we),
+          .wd(le1_le58_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[319]),
+          .qs(le1_le58_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le59_we),
+          .wd(le1_le59_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[320]),
+          .qs(le1_le59_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le60_we),
+          .wd(le1_le60_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[321]),
+          .qs(le1_le60_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le61_we),
+          .wd(le1_le61_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[322]),
+          .qs(le1_le61_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le62_we),
+          .wd(le1_le62_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[323]),
+          .qs(le1_le62_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le63_we),
+          .wd(le1_le63_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[324]),
+          .qs(le1_le63_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le64_we),
+          .wd(le2_le64_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[325]),
+          .qs(le2_le64_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le65_we),
+          .wd(le2_le65_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[326]),
+          .qs(le2_le65_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le66_we),
+          .wd(le2_le66_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[327]),
+          .qs(le2_le66_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le67_we),
+          .wd(le2_le67_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[328]),
+          .qs(le2_le67_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le68_we),
+          .wd(le2_le68_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[329]),
+          .qs(le2_le68_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le69_we),
+          .wd(le2_le69_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[330]),
+          .qs(le2_le69_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le70_we),
+          .wd(le2_le70_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[331]),
+          .qs(le2_le70_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le71_we),
+          .wd(le2_le71_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[332]),
+          .qs(le2_le71_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le72_we),
+          .wd(le2_le72_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[333]),
+          .qs(le2_le72_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le73_we),
+          .wd(le2_le73_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[334]),
+          .qs(le2_le73_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le74_we),
+          .wd(le2_le74_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[335]),
+          .qs(le2_le74_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le75_we),
+          .wd(le2_le75_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[336]),
+          .qs(le2_le75_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le76_we),
+          .wd(le2_le76_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[337]),
+          .qs(le2_le76_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le77_we),
+          .wd(le2_le77_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[338]),
+          .qs(le2_le77_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le78_we),
+          .wd(le2_le78_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[339]),
+          .qs(le2_le78_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le79_we),
+          .wd(le2_le79_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[340]),
+          .qs(le2_le79_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le80_we),
+          .wd(le2_le80_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[341]),
+          .qs(le2_le80_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le81_we),
+          .wd(le2_le81_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[342]),
+          .qs(le2_le81_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le82_we),
+          .wd(le2_le82_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[343]),
+          .qs(le2_le82_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio0_we),
+          .wd(prio0_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[260-:2]),
+          .qs(prio0_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio1_we),
+          .wd(prio1_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[258-:2]),
+          .qs(prio1_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio2_we),
+          .wd(prio2_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[256-:2]),
+          .qs(prio2_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio3_we),
+          .wd(prio3_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[254-:2]),
+          .qs(prio3_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio4_we),
+          .wd(prio4_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[252-:2]),
+          .qs(prio4_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio5_we),
+          .wd(prio5_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[250-:2]),
+          .qs(prio5_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio6_we),
+          .wd(prio6_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[248-:2]),
+          .qs(prio6_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio7_we),
+          .wd(prio7_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[246-:2]),
+          .qs(prio7_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio8_we),
+          .wd(prio8_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[244-:2]),
+          .qs(prio8_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio9_we),
+          .wd(prio9_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[242-:2]),
+          .qs(prio9_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio10_we),
+          .wd(prio10_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[240-:2]),
+          .qs(prio10_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio11_we),
+          .wd(prio11_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[238-:2]),
+          .qs(prio11_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio12_we),
+          .wd(prio12_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[236-:2]),
+          .qs(prio12_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio13_we),
+          .wd(prio13_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[234-:2]),
+          .qs(prio13_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio14_we),
+          .wd(prio14_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[232-:2]),
+          .qs(prio14_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio15_we),
+          .wd(prio15_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[230-:2]),
+          .qs(prio15_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio16_we),
+          .wd(prio16_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[228-:2]),
+          .qs(prio16_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio17_we),
+          .wd(prio17_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[226-:2]),
+          .qs(prio17_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio18_we),
+          .wd(prio18_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[224-:2]),
+          .qs(prio18_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio19_we),
+          .wd(prio19_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[222-:2]),
+          .qs(prio19_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio20_we),
+          .wd(prio20_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[220-:2]),
+          .qs(prio20_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio21_we),
+          .wd(prio21_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[218-:2]),
+          .qs(prio21_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio22_we),
+          .wd(prio22_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[216-:2]),
+          .qs(prio22_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio23_we),
+          .wd(prio23_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[214-:2]),
+          .qs(prio23_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio24_we),
+          .wd(prio24_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[212-:2]),
+          .qs(prio24_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio25_we),
+          .wd(prio25_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[210-:2]),
+          .qs(prio25_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio26_we),
+          .wd(prio26_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[208-:2]),
+          .qs(prio26_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio27_we),
+          .wd(prio27_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[206-:2]),
+          .qs(prio27_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio28_we),
+          .wd(prio28_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[204-:2]),
+          .qs(prio28_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio29_we),
+          .wd(prio29_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[202-:2]),
+          .qs(prio29_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio30_we),
+          .wd(prio30_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[200-:2]),
+          .qs(prio30_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio31_we),
+          .wd(prio31_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[198-:2]),
+          .qs(prio31_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio32_we),
+          .wd(prio32_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[196-:2]),
+          .qs(prio32_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio33_we),
+          .wd(prio33_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[194-:2]),
+          .qs(prio33_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio34_we),
+          .wd(prio34_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[192-:2]),
+          .qs(prio34_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio35_we),
+          .wd(prio35_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[190-:2]),
+          .qs(prio35_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio36_we),
+          .wd(prio36_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[188-:2]),
+          .qs(prio36_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio37_we),
+          .wd(prio37_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[186-:2]),
+          .qs(prio37_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio38_we),
+          .wd(prio38_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[184-:2]),
+          .qs(prio38_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio39_we),
+          .wd(prio39_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[182-:2]),
+          .qs(prio39_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio40_we),
+          .wd(prio40_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[180-:2]),
+          .qs(prio40_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio41_we),
+          .wd(prio41_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[178-:2]),
+          .qs(prio41_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio42_we),
+          .wd(prio42_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[176-:2]),
+          .qs(prio42_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio43_we),
+          .wd(prio43_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[174-:2]),
+          .qs(prio43_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio44_we),
+          .wd(prio44_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[172-:2]),
+          .qs(prio44_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio45_we),
+          .wd(prio45_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[170-:2]),
+          .qs(prio45_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio46_we),
+          .wd(prio46_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[168-:2]),
+          .qs(prio46_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio47_we),
+          .wd(prio47_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[166-:2]),
+          .qs(prio47_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio48_we),
+          .wd(prio48_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[164-:2]),
+          .qs(prio48_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio49_we),
+          .wd(prio49_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[162-:2]),
+          .qs(prio49_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio50_we),
+          .wd(prio50_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[160-:2]),
+          .qs(prio50_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio51_we),
+          .wd(prio51_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[158-:2]),
+          .qs(prio51_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio52_we),
+          .wd(prio52_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[156-:2]),
+          .qs(prio52_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio53_we),
+          .wd(prio53_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[154-:2]),
+          .qs(prio53_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio54_we),
+          .wd(prio54_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[152-:2]),
+          .qs(prio54_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio55_we),
+          .wd(prio55_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[150-:2]),
+          .qs(prio55_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio56_we),
+          .wd(prio56_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[148-:2]),
+          .qs(prio56_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio57_we),
+          .wd(prio57_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[146-:2]),
+          .qs(prio57_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio58_we),
+          .wd(prio58_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[144-:2]),
+          .qs(prio58_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio59_we),
+          .wd(prio59_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[142-:2]),
+          .qs(prio59_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio60_we),
+          .wd(prio60_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[140-:2]),
+          .qs(prio60_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio61_we),
+          .wd(prio61_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[138-:2]),
+          .qs(prio61_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio62_we),
+          .wd(prio62_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[136-:2]),
+          .qs(prio62_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio63_we),
+          .wd(prio63_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[134-:2]),
+          .qs(prio63_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio64_we),
+          .wd(prio64_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[132-:2]),
+          .qs(prio64_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio65_we),
+          .wd(prio65_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[130-:2]),
+          .qs(prio65_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio66_we),
+          .wd(prio66_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[128-:2]),
+          .qs(prio66_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio67_we),
+          .wd(prio67_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[126-:2]),
+          .qs(prio67_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio68_we),
+          .wd(prio68_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[124-:2]),
+          .qs(prio68_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio69_we),
+          .wd(prio69_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[122-:2]),
+          .qs(prio69_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio70_we),
+          .wd(prio70_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[120-:2]),
+          .qs(prio70_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio71_we),
+          .wd(prio71_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[118-:2]),
+          .qs(prio71_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio72_we),
+          .wd(prio72_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[116-:2]),
+          .qs(prio72_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio73_we),
+          .wd(prio73_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[114-:2]),
+          .qs(prio73_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio74_we),
+          .wd(prio74_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[112-:2]),
+          .qs(prio74_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio75_we),
+          .wd(prio75_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[110-:2]),
+          .qs(prio75_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio76_we),
+          .wd(prio76_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[108-:2]),
+          .qs(prio76_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio77_we),
+          .wd(prio77_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[106-:2]),
+          .qs(prio77_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio78_we),
+          .wd(prio78_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[104-:2]),
+          .qs(prio78_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio79_we),
+          .wd(prio79_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[102-:2]),
+          .qs(prio79_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio80_we),
+          .wd(prio80_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[100-:2]),
+          .qs(prio80_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio81_we),
+          .wd(prio81_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[98-:2]),
+          .qs(prio81_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio82_we),
+          .wd(prio82_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[96-:2]),
+          .qs(prio82_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e0_we),
+          .wd(ie00_e0_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[12]),
+          .qs(ie00_e0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e1_we),
+          .wd(ie00_e1_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[13]),
+          .qs(ie00_e1_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e2_we),
+          .wd(ie00_e2_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[14]),
+          .qs(ie00_e2_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e3_we),
+          .wd(ie00_e3_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[15]),
+          .qs(ie00_e3_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e4_we),
+          .wd(ie00_e4_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[16]),
+          .qs(ie00_e4_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e5_we),
+          .wd(ie00_e5_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[17]),
+          .qs(ie00_e5_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e6_we),
+          .wd(ie00_e6_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[18]),
+          .qs(ie00_e6_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e7_we),
+          .wd(ie00_e7_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[19]),
+          .qs(ie00_e7_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e8_we),
+          .wd(ie00_e8_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[20]),
+          .qs(ie00_e8_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e9_we),
+          .wd(ie00_e9_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[21]),
+          .qs(ie00_e9_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e10_we),
+          .wd(ie00_e10_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[22]),
+          .qs(ie00_e10_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e11_we),
+          .wd(ie00_e11_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[23]),
+          .qs(ie00_e11_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e12_we),
+          .wd(ie00_e12_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[24]),
+          .qs(ie00_e12_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e13_we),
+          .wd(ie00_e13_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[25]),
+          .qs(ie00_e13_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e14_we),
+          .wd(ie00_e14_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[26]),
+          .qs(ie00_e14_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e15_we),
+          .wd(ie00_e15_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[27]),
+          .qs(ie00_e15_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e16_we),
+          .wd(ie00_e16_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[28]),
+          .qs(ie00_e16_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e17_we),
+          .wd(ie00_e17_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[29]),
+          .qs(ie00_e17_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e18_we),
+          .wd(ie00_e18_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[30]),
+          .qs(ie00_e18_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e19_we),
+          .wd(ie00_e19_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[31]),
+          .qs(ie00_e19_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e20_we),
+          .wd(ie00_e20_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[32]),
+          .qs(ie00_e20_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e21_we),
+          .wd(ie00_e21_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[33]),
+          .qs(ie00_e21_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e22_we),
+          .wd(ie00_e22_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[34]),
+          .qs(ie00_e22_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e23_we),
+          .wd(ie00_e23_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[35]),
+          .qs(ie00_e23_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e24_we),
+          .wd(ie00_e24_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[36]),
+          .qs(ie00_e24_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e25_we),
+          .wd(ie00_e25_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[37]),
+          .qs(ie00_e25_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e26_we),
+          .wd(ie00_e26_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[38]),
+          .qs(ie00_e26_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e27_we),
+          .wd(ie00_e27_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[39]),
+          .qs(ie00_e27_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e28_we),
+          .wd(ie00_e28_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[40]),
+          .qs(ie00_e28_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e29_we),
+          .wd(ie00_e29_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[41]),
+          .qs(ie00_e29_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e30_we),
+          .wd(ie00_e30_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[42]),
+          .qs(ie00_e30_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e31_we),
+          .wd(ie00_e31_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[43]),
+          .qs(ie00_e31_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e32_we),
+          .wd(ie01_e32_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[44]),
+          .qs(ie01_e32_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e33_we),
+          .wd(ie01_e33_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[45]),
+          .qs(ie01_e33_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e34_we),
+          .wd(ie01_e34_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[46]),
+          .qs(ie01_e34_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e35_we),
+          .wd(ie01_e35_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[47]),
+          .qs(ie01_e35_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e36_we),
+          .wd(ie01_e36_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[48]),
+          .qs(ie01_e36_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e37_we),
+          .wd(ie01_e37_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[49]),
+          .qs(ie01_e37_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e38_we),
+          .wd(ie01_e38_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[50]),
+          .qs(ie01_e38_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e39_we),
+          .wd(ie01_e39_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[51]),
+          .qs(ie01_e39_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e40_we),
+          .wd(ie01_e40_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[52]),
+          .qs(ie01_e40_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e41_we),
+          .wd(ie01_e41_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[53]),
+          .qs(ie01_e41_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e42_we),
+          .wd(ie01_e42_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[54]),
+          .qs(ie01_e42_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e43_we),
+          .wd(ie01_e43_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[55]),
+          .qs(ie01_e43_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e44_we),
+          .wd(ie01_e44_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[56]),
+          .qs(ie01_e44_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e45_we),
+          .wd(ie01_e45_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[57]),
+          .qs(ie01_e45_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e46_we),
+          .wd(ie01_e46_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[58]),
+          .qs(ie01_e46_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e47_we),
+          .wd(ie01_e47_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[59]),
+          .qs(ie01_e47_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e48_we),
+          .wd(ie01_e48_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[60]),
+          .qs(ie01_e48_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e49_we),
+          .wd(ie01_e49_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[61]),
+          .qs(ie01_e49_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e50_we),
+          .wd(ie01_e50_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[62]),
+          .qs(ie01_e50_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e51_we),
+          .wd(ie01_e51_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[63]),
+          .qs(ie01_e51_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e52_we),
+          .wd(ie01_e52_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[64]),
+          .qs(ie01_e52_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e53_we),
+          .wd(ie01_e53_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[65]),
+          .qs(ie01_e53_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e54_we),
+          .wd(ie01_e54_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[66]),
+          .qs(ie01_e54_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e55_we),
+          .wd(ie01_e55_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[67]),
+          .qs(ie01_e55_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e56_we),
+          .wd(ie01_e56_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[68]),
+          .qs(ie01_e56_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e57_we),
+          .wd(ie01_e57_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[69]),
+          .qs(ie01_e57_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e58_we),
+          .wd(ie01_e58_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[70]),
+          .qs(ie01_e58_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e59_we),
+          .wd(ie01_e59_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[71]),
+          .qs(ie01_e59_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e60_we),
+          .wd(ie01_e60_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[72]),
+          .qs(ie01_e60_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e61_we),
+          .wd(ie01_e61_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[73]),
+          .qs(ie01_e61_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e62_we),
+          .wd(ie01_e62_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[74]),
+          .qs(ie01_e62_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e63_we),
+          .wd(ie01_e63_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[75]),
+          .qs(ie01_e63_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e64_we),
+          .wd(ie02_e64_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[76]),
+          .qs(ie02_e64_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e65_we),
+          .wd(ie02_e65_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[77]),
+          .qs(ie02_e65_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e66_we),
+          .wd(ie02_e66_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[78]),
+          .qs(ie02_e66_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e67_we),
+          .wd(ie02_e67_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[79]),
+          .qs(ie02_e67_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e68_we),
+          .wd(ie02_e68_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[80]),
+          .qs(ie02_e68_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e69_we),
+          .wd(ie02_e69_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[81]),
+          .qs(ie02_e69_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e70_we),
+          .wd(ie02_e70_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[82]),
+          .qs(ie02_e70_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e71_we),
+          .wd(ie02_e71_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[83]),
+          .qs(ie02_e71_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e72_we),
+          .wd(ie02_e72_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[84]),
+          .qs(ie02_e72_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e73_we),
+          .wd(ie02_e73_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[85]),
+          .qs(ie02_e73_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e74_we),
+          .wd(ie02_e74_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[86]),
+          .qs(ie02_e74_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e75_we),
+          .wd(ie02_e75_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[87]),
+          .qs(ie02_e75_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e76_we),
+          .wd(ie02_e76_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[88]),
+          .qs(ie02_e76_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e77_we),
+          .wd(ie02_e77_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[89]),
+          .qs(ie02_e77_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e78_we),
+          .wd(ie02_e78_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[90]),
+          .qs(ie02_e78_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e79_we),
+          .wd(ie02_e79_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[91]),
+          .qs(ie02_e79_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e80_we),
+          .wd(ie02_e80_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[92]),
+          .qs(ie02_e80_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e81_we),
+          .wd(ie02_e81_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[93]),
+          .qs(ie02_e81_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e82_we),
+          .wd(ie02_e82_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[94]),
+          .qs(ie02_e82_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_threshold0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(threshold0_we),
+          .wd(threshold0_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[11-:2]),
+          .qs(threshold0_qs)
+  );
+  prim_subreg_ext #(.DW(7)) u_cc0(
+          .re(cc0_re),
+          .we(cc0_we),
+          .wd(cc0_wd),
+          .d(hw2reg[6-:7]),
+          .qre(reg2hw[1]),
+          .qe(reg2hw[2]),
+          .q(reg2hw[9-:7]),
+          .qs(cc0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_msip0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(msip0_we),
+          .wd(msip0_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[-0]),
+          .qs(msip0_qs)
   );
 
-
-  // R[cc0]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (7)
-  ) u_cc0 (
-    .re     (cc0_re),
-    .we     (cc0_we),
-    .wd     (cc0_wd),
-    .d      (hw2reg.cc0.d),
-    .qre    (reg2hw.cc0.re),
-    .qe     (reg2hw.cc0.qe),
-    .q      (reg2hw.cc0.q ),
-    .qs     (cc0_qs)
-  );
-
-
-  // R[msip0]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_msip0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (msip0_we),
-    .wd     (msip0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.msip0.q ),
-
-    // to register interface (read)
-    .qs     (msip0_qs)
-  );
-
-
-
-
   logic [94:0] addr_hit;
   always_comb begin
     addr_hit = '0;
diff --git a/hw/top_earlgrey/rtl/autogen/top_earlgrey.sv b/hw/top_earlgrey/rtl/autogen/top_earlgrey.sv
index 2acc14e86..875a617cd 100644
--- a/hw/top_earlgrey/rtl/autogen/top_earlgrey.sv
+++ b/hw/top_earlgrey/rtl/autogen/top_earlgrey.sv
@@ -239,8 +239,8 @@ module top_earlgrey #(
   assign unused_irq_id = irq_id;
 
   // Alert list
-  prim_alert_pkg::alert_tx_t [alert_pkg::NAlerts-1:0]  alert_tx;
-  prim_alert_pkg::alert_rx_t [alert_pkg::NAlerts-1:0]  alert_rx;
+  wire [9:0] alert_tx;
+  wire [19:0] alert_rx;
   // Escalation outputs
   prim_esc_pkg::esc_tx_t [alert_pkg::N_ESC_SEV-1:0]  esc_tx;
   prim_esc_pkg::esc_rx_t [alert_pkg::N_ESC_SEV-1:0]  esc_rx;
@@ -259,12 +259,12 @@ module top_earlgrey #(
   pwrmgr_pkg::pwr_cpu_t       pwrmgr_pwr_cpu;
   clkmgr_pkg::clkmgr_out_t       clkmgr_clocks;
   logic       aes_idle;
-  clkmgr_pkg::clk_hint_status_t       clkmgr_status;
+  reg [2:0] clkmgr_status;
 
   always_comb begin
     // TODO: So far just aes is connected
-    clkmgr_status.idle    = clkmgr_pkg::CLK_HINT_STATUS_DEFAULT;
-    clkmgr_status.idle[0] = aes_idle;
+    clkmgr_status[2-:3] = clkmgr_pkg::CLK_HINT_STATUS_DEFAULT;
+    clkmgr_status[0] = aes_idle;
   end
 
   // Non-debug module reset == reset for everything except for the debug module
@@ -627,7 +627,7 @@ module top_earlgrey #(
       // Inter-module signals
       .flash_o(flash_ctrl_flash_req),
       .flash_i(flash_ctrl_flash_rsp),
-      .otp_i(flash_ctrl_pkg::OTP_FLASH_DEFAULT),
+      .otp_i(256'hdeadbeefbeeffacedeadbeef5a5aa5a5deadbeef5a5aa5a5deadbeefbeefface),
       .clk_i (clkmgr_clocks.clk_main_infra),
       .rst_ni (rstmgr_resets.rst_lc_n)
   );
@@ -647,8 +647,8 @@ module top_earlgrey #(
       .tl_o (tl_aes_d_d2h),
 
       // [0]: ctrl_err
-      .alert_tx_o  ( alert_tx[0:0] ),
-      .alert_rx_i  ( alert_rx[0:0] ),
+      .alert_tx_o  ( alert_tx[0+:2] ),
+      .alert_rx_i  ( alert_rx[0+:4] ),
 
       // Inter-module signals
       .idle_o(aes_idle),
@@ -666,8 +666,8 @@ module top_earlgrey #(
       .intr_hmac_err_o   (intr_hmac_hmac_err),
 
       // [1]: msg_push_sha_disabled
-      .alert_tx_o  ( alert_tx[1:1] ),
-      .alert_rx_i  ( alert_rx[1:1] ),
+      .alert_tx_o  ( alert_tx[2+:2] ),
+      .alert_rx_i  ( alert_rx[4+:4] ),
       .clk_i (clkmgr_clocks.clk_main_hmac),
       .rst_ni (rstmgr_resets.rst_sys_n)
   );
@@ -904,8 +904,8 @@ module top_earlgrey #(
       // [2]: imem_uncorrectable
       // [3]: dmem_uncorrectable
       // [4]: reg_uncorrectable
-      .alert_tx_o  ( alert_tx[4:2] ),
-      .alert_rx_i  ( alert_rx[4:2] ),
+      .alert_tx_o  ( alert_tx[4+:6] ),
+      .alert_rx_i  ( alert_rx[8+:12] ),
 
       // Inter-module signals
       .idle_o(),
diff --git a/hw/top_earlgrey/top_earlgrey_nexysvideo.core b/hw/top_earlgrey/top_earlgrey_nexysvideo.core
index 8d6cf89b6..1683f0693 100644
--- a/hw/top_earlgrey/top_earlgrey_nexysvideo.core
+++ b/hw/top_earlgrey/top_earlgrey_nexysvideo.core
@@ -56,7 +56,7 @@ targets:
     filesets:
       - files_rtl_nexysvideo
       - files_constraints
-      - files_tcl
+      #- files_tcl
     toplevel: top_earlgrey_nexysvideo
     parameters:
       - BootRomInitFile
@@ -64,6 +64,15 @@ targets:
     tools:
       vivado:
         part: "xc7a200tsbg484-1" # Nexys Video
+        synth: "yosys"
+        yosys_synth_options: ['-iopad', '-family xc7', "frontend=surelog"]
+        yosys_read_options: []
+        surelog_options: ['--disable-feature=parametersubstitution', '-DSYNTHESIS']
+      yosys:
+        arch: "xilinx"
+        yosys_synth_options: ['-iopad', '-family xc7', "frontend=surelog"]
+        yosys_read_options: []
+        surelog_options: ['--disable-feature=parametersubstitution', '-DSYNTHESIS']
 
   lint:
     <<: *default_target
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
index 61469937f..f27e7f097 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
@@ -133,8 +133,8 @@ module ibex_core #(
   logic [31:0] pc_if;                          // Program counter in IF stage
   logic [31:0] pc_id;                          // Program counter in ID stage
   logic [31:0] pc_wb;                          // Program counter in WB stage
-  logic [33:0] imd_val_d_ex[2];                // Intermediate register for multicycle Ops
-  logic [33:0] imd_val_q_ex[2];                // Intermediate register for multicycle Ops
+  logic [1:0][33:0] imd_val_d_ex;                // Intermediate register for multicycle Ops
+  logic [1:0][33:0] imd_val_q_ex;                // Intermediate register for multicycle Ops
   logic [1:0]  imd_val_we_ex;
 
   logic        data_ind_timing;
@@ -254,7 +254,7 @@ module ibex_core #(
   logic [31:0] csr_mepc, csr_depc;
 
   // PMP signals
-  logic [33:0] csr_pmp_addr [PMPNumRegions];
+  logic [PMPNumRegions-1:0][33:0] csr_pmp_addr;
   pmp_cfg_t    csr_pmp_cfg  [PMPNumRegions];
   logic        pmp_req_err  [PMP_NUM_CHAN];
   logic        instr_req_out;
@@ -932,16 +932,16 @@ module ibex_core #(
   `ASSERT_KNOWN_IF(IbexCsrWdataIntKnown, cs_registers_i.csr_wdata_int, csr_op_en)
 
   if (PMPEnable) begin : g_pmp
-    logic [33:0] pmp_req_addr [PMP_NUM_CHAN];
-    pmp_req_e    pmp_req_type [PMP_NUM_CHAN];
-    priv_lvl_e   pmp_priv_lvl [PMP_NUM_CHAN];
-
-    assign pmp_req_addr[PMP_I] = {2'b00,instr_addr_o[31:0]};
-    assign pmp_req_type[PMP_I] = PMP_ACC_EXEC;
-    assign pmp_priv_lvl[PMP_I] = priv_mode_if;
-    assign pmp_req_addr[PMP_D] = {2'b00,data_addr_o[31:0]};
-    assign pmp_req_type[PMP_D] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
-    assign pmp_priv_lvl[PMP_D] = priv_mode_lsu;
+    logic [PMP_NUM_CHAN-1:0][1:0]    pmp_req_type;
+    logic [PMP_NUM_CHAN-1:0][1:0]    pmp_priv_lvl;
+    logic [PMP_NUM_CHAN-1:0][33:0] pmp_req_addr;
+
+    assign pmp_req_addr[PMP_I] = {2'b00,data_addr_o[31:0]};
+    assign pmp_req_type[PMP_I] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
+    assign pmp_priv_lvl[PMP_I] = priv_mode_lsu;
+    assign pmp_req_addr[PMP_D] = {2'b00,instr_addr_o[31:0]};
+    assign pmp_req_type[PMP_D] = PMP_ACC_EXEC;
+    assign pmp_priv_lvl[PMP_D] = priv_mode_if;
 
     ibex_pmp #(
         .PMPGranularity        ( PMPGranularity ),
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
index 6e5eaf4dc..b962fd7c6 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
@@ -64,7 +64,7 @@ module ibex_cs_registers #(
 
     // PMP
     output ibex_pkg::pmp_cfg_t   csr_pmp_cfg_o  [PMPNumRegions],
-    output logic [33:0]          csr_pmp_addr_o [PMPNumRegions],
+    output logic [PMPNumRegions-1:0][33:0]          csr_pmp_addr_o,
 
     // debug
     input  logic                 debug_mode_i,
@@ -196,8 +196,8 @@ module ibex_cs_registers #(
   logic  [5:0] mstack_cause_q, mstack_cause_d;
 
   // PMP Signals
-  logic [31:0]                 pmp_addr_rdata  [PMP_MAX_REGIONS];
-  logic [PMP_CFG_W-1:0]        pmp_cfg_rdata   [PMP_MAX_REGIONS];
+  logic [PMP_MAX_REGIONS-1:0][31:0]                 pmp_addr_rdata;
+  logic [PMP_MAX_REGIONS-1:0][PMP_CFG_W-1:0]        pmp_cfg_rdata;
 
   // Hardware performance monitor signals
   logic [31:0]                 mcountinhibit;
@@ -208,11 +208,11 @@ module ibex_cs_registers #(
   // mhpmcounter flops are elaborated below providing only the precise number that is required based
   // on MHPMCounterNum/MHPMCounterWidth. This signal connects to the Q output of these flops
   // where they exist and is otherwise 0.
-  logic [63:0] mhpmcounter [32];
+  logic [31:0][63:0] mhpmcounter;
   logic [31:0] mhpmcounter_we;
   logic [31:0] mhpmcounterh_we;
   logic [31:0] mhpmcounter_incr;
-  logic [31:0] mhpmevent [32];
+  logic [31:0][31:0] mhpmevent;
   logic  [4:0] mhpmcounter_idx;
 
   // Debug / trigger registers
@@ -739,7 +739,7 @@ module ibex_cs_registers #(
   if (PMPEnable) begin : g_pmp_registers
     pmp_cfg_t                    pmp_cfg         [PMPNumRegions];
     pmp_cfg_t                    pmp_cfg_wdata   [PMPNumRegions];
-    logic [31:0]                 pmp_addr        [PMPNumRegions];
+    logic [PMPNumRegions-1:0][31:0]                 pmp_addr;
     logic [PMPNumRegions-1:0]    pmp_cfg_we;
     logic [PMPNumRegions-1:0]    pmp_addr_we;
 
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
index eccc68e95..06a672e88 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
@@ -42,8 +42,8 @@ module ibex_ex_block #(
 
     // intermediate val reg
     output logic [1:0]            imd_val_we_o,
-    output logic [33:0]           imd_val_d_o[2],
-    input  logic [33:0]           imd_val_q_i[2],
+    output logic [1:0][33:0]           imd_val_d_o,
+    input  logic [1:0][33:0]           imd_val_q_i,
 
     // Outputs
     output logic [31:0]           alu_adder_result_ex_o, // to LSU
@@ -63,10 +63,10 @@ module ibex_ex_block #(
   logic        alu_cmp_result, alu_is_equal_result;
   logic        multdiv_valid;
   logic        multdiv_sel;
-  logic [31:0] alu_imd_val_q[2];
-  logic [31:0] alu_imd_val_d[2];
+  logic [1:0][31:0] alu_imd_val_q;
+  logic [1:0][31:0] alu_imd_val_d;
   logic [ 1:0] alu_imd_val_we;
-  logic [33:0] multdiv_imd_val_d[2];
+  logic [1:0][33:0] multdiv_imd_val_d;
   logic [ 1:0] multdiv_imd_val_we;
 
   /*
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
index bba4c2af8..d527e4d06 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
@@ -69,8 +69,8 @@ module ibex_id_stage #(
 
     // Multicycle Operation Stage Register
     input  logic [1:0]                imd_val_we_ex_i,
-    input  logic [33:0]               imd_val_d_ex_i[2],
-    output logic [33:0]               imd_val_q_ex_o[2],
+    input  logic [1:0][33:0]               imd_val_d_ex_i,
+    output logic [1:0][33:0]               imd_val_q_ex_o,
 
     // Branch target ALU
     output logic [31:0]               bt_a_operand_o,
@@ -247,7 +247,7 @@ module ibex_id_stage #(
   logic        alu_multicycle_dec;
   logic        stall_alu;
 
-  logic [33:0] imd_val_q[2];
+  logic [1:0][33:0] imd_val_q;
 
   op_a_sel_e   bt_a_mux_sel;
   imm_b_sel_e  bt_b_mux_sel;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
index 617bb5162..e1890da38 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
@@ -35,8 +35,8 @@ module ibex_multdiv_fast #(
     output logic [32:0]      alu_operand_a_o,
     output logic [32:0]      alu_operand_b_o,
 
-    input  logic [33:0]      imd_val_q_i[2],
-    output logic [33:0]      imd_val_d_o[2],
+    input  logic [1:0][33:0]      imd_val_q_i,
+    output logic [1:0][33:0]      imd_val_d_o,
     output logic [1:0]       imd_val_we_o,
 
     input  logic             multdiv_ready_id_i,
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
index 1b48693a0..9240ce64a 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
@@ -31,7 +31,7 @@ module ibex_pmp #(
 
   // Access Checking Signals
   logic [33:0]                                region_start_addr [PMPNumRegions];
-  logic [33:PMPGranularity+2]                 region_addr_mask  [PMPNumRegions];
+  logic [33:0]                                region_addr_mask  [PMPNumRegions];
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_gt;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_lt;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_eq;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv
index 4dd429df8..8c95e2492 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv
@@ -42,8 +42,8 @@ module ibex_register_file #(
   localparam int unsigned NUM_WORDS  = 2**ADDR_WIDTH;
 
   logic [NUM_WORDS-1:0][DataWidth-1:0] rf_reg;
-  logic [NUM_WORDS-1:1][DataWidth-1:0] rf_reg_q;
-  logic [NUM_WORDS-1:1]                we_a_dec;
+  logic [NUM_WORDS-1:0][DataWidth-1:0] rf_reg_q;
+  logic [NUM_WORDS-1:0]                we_a_dec;
 
   always_comb begin : we_a_decoder
     for (int unsigned i = 1; i < NUM_WORDS; i++) begin
