diff --git a/hw/ip/padctrl/rtl/padring.sv b/hw/ip/padctrl/rtl/padring.sv
index fc8b3d183..6a5b97985 100644
--- a/hw/ip/padctrl/rtl/padring.sv
+++ b/hw/ip/padctrl/rtl/padring.sv
@@ -151,7 +151,7 @@ module padring import padctrl_reg_pkg::*; #(
     end else begin : gen_mio_tie_off
       logic unused_out, unused_oe, unused_pad;
       logic [AttrDw-1:0] unused_attr;
-      assign mio_pad_io[k] = 1'b0;
+      //assign mio_pad_io[k] = 1'b0;
       assign unused_pad   = mio_pad_io[k];
       assign unused_out   = mio_out_i[k];
       assign unused_oe    = mio_oe_i[k];
@@ -213,7 +213,7 @@ module padring import padctrl_reg_pkg::*; #(
     end else begin : gen_dio_tie_off
       logic unused_out, unused_oe, unused_pad;
       logic [AttrDw-1:0] unused_attr;
-      assign dio_pad_io[k] = 1'b0;
+      //assign dio_pad_io[k] = 1'b0;
       assign unused_pad   = dio_pad_io[k];
       assign unused_out   = dio_out_i[k];
       assign unused_oe    = dio_oe_i[k];
diff --git a/hw/ip/prim/util/primgen.py b/hw/ip/prim/util/primgen.py
index f601d503e..70dd6d438 100755
--- a/hw/ip/prim/util/primgen.py
+++ b/hw/ip/prim/util/primgen.py
@@ -238,6 +238,21 @@ def _generate_prim_pkg(gapi):
     shutil.copyfile(prim_pkg_core_src, prim_pkg_core_dest)
     print("Core file written to %s." % (prim_pkg_core_dest, ))
 
+def _instance_sv_ram(prim_name, techlib, parameters, prim_type):
+    if not parameters:
+        s = "    prim_{techlib}_{prim_name} u_impl_{techlib} (\n"
+    else:
+        s = "    prim_{techlib}_{prim_name} #(\n"
+        s += ",\n".join("      .{p}({p})".format(p=p) for p in parameters)
+        s += "\n    ) u_impl_{techlib}_{prim_type} (\n"
+    s += "      .clk_a_i(clk_{prim_type}_i),\n"
+    s += "      .a_req_i({prim_type}_req_i),\n"
+    s += "      .a_write_i({prim_type}_write_i),\n"
+    s += "      .a_addr_i({prim_type}_addr_i),\n"
+    s += "      .a_wdata_i({prim_type}_wdata_i),\n"
+    s += "      .a_rdata_o({prim_type}_rdata_o)\n"
+    s +=  "    );\n"
+    return s.format(prim_name=prim_name, techlib=techlib, prim_type=prim_type)
 
 def _instance_sv(prim_name, techlib, parameters):
     if not parameters:
@@ -246,8 +261,8 @@ def _instance_sv(prim_name, techlib, parameters):
         s = "    prim_{techlib}_{prim_name} #(\n"
         s += ",\n".join("      .{p}({p})".format(p=p) for p in parameters)
         s += "\n    ) u_impl_{techlib} (\n"
-    s += "      .*\n" \
-         "    );\n"
+    s += "      .*\n"
+    s +=  "    );\n"
     return s.format(prim_name=prim_name, techlib=techlib)
 
 
@@ -258,12 +273,17 @@ def _create_instances(prim_name, techlibs, parameters):
     ]
     techlibs_generic_last = techlibs_wo_generic + ['generic']
 
+
     if not techlibs_wo_generic:
         # Don't output the if/else blocks if there no alternatives exist.
         # We still want the generate block to keep hierarchical path names
         # stable, even if more than one techlib is found.
         s = "  if (1) begin : gen_generic\n"
-        s += _instance_sv(prim_name, "generic", parameters) + "\n"
+        if prim_name == "ram_2p":
+            s += _instance_sv_ram("ram_1p", "generic", parameters, "a") + "\n"
+            s += _instance_sv_ram("ram_1p", "generic", parameters, "b") + "\n"
+        else:
+            s += _instance_sv(prim_name, "generic", parameters) + "\n"
         s += "  end"
         return s
 
@@ -282,8 +302,14 @@ def _create_instances(prim_name, techlibs, parameters):
         # TODO: wildcard port lists are against our style guide, but it's safer
         # to let the synthesis tool figure out the connectivity than us trying
         # to parse the port list into individual signals.
-        s += "begin : gen_{techlib}\n" + _instance_sv(prim_name, techlib,
-                                                      parameters) + "end"
+        s += "begin : gen_{techlib}\n" 
+        if prim_name == "ram_2p":
+            s += _instance_sv_ram("ram_1p", techlib, parameters, "a")
+            s += _instance_sv_ram("ram_1p", techlib, parameters, "b")
+        else:
+            s += _instance_sv(prim_name, techlib, parameters)
+
+        s += "end"
 
         if not is_last:
             s += " "
diff --git a/hw/top_earlgrey/rtl/top_earlgrey_nexysvideo.sv b/hw/top_earlgrey/rtl/top_earlgrey_nexysvideo.sv
index 72329fe75..8e31a6250 100644
--- a/hw/top_earlgrey/rtl/top_earlgrey_nexysvideo.sv
+++ b/hw/top_earlgrey/rtl/top_earlgrey_nexysvideo.sv
@@ -67,15 +67,15 @@ module top_earlgrey_nexysvideo #(
   padring #(
     // MIOs 31:20 are currently not
     // connected to pads and hence tied off
-    .ConnectMioIn  ( 32'h000FFFFF ),
-    .ConnectMioOut ( 32'h000FFFFF ),
+    .ConnectMioIn  ( 32'hFFFFF000 ),
+    .ConnectMioOut ( 32'hFFFFF000 ),
     // Tied off DIOs:
     // 2: usbdev_d
     // 3: usbdev_suspend
     // 4: usbdev_tx_mode
     // 7: usbdev_se
-    .ConnectDioIn  ( 15'h7F63 ),
-    .ConnectDioOut ( 15'h7F63 )
+    .ConnectDioIn  ( 15'b110001101111111 ),
+    .ConnectDioOut ( 15'b110001101111111 )
   ) padring (
     // Clk / Rst
     .clk_pad_i           ( 1'b0 ),
diff --git a/hw/top_earlgrey/top_earlgrey_nexysvideo.core b/hw/top_earlgrey/top_earlgrey_nexysvideo.core
index 8d6cf89b6..276bfceea 100644
--- a/hw/top_earlgrey/top_earlgrey_nexysvideo.core
+++ b/hw/top_earlgrey/top_earlgrey_nexysvideo.core
@@ -56,7 +56,7 @@ targets:
     filesets:
       - files_rtl_nexysvideo
       - files_constraints
-      - files_tcl
+      #- files_tcl
     toplevel: top_earlgrey_nexysvideo
     parameters:
       - BootRomInitFile
@@ -64,6 +64,15 @@ targets:
     tools:
       vivado:
         part: "xc7a200tsbg484-1" # Nexys Video
+        synth: "yosys"
+        yosys_synth_options: ['-flatten', '-iopad', '-noclkbuf', '-family xc7', "frontend=surelog"]
+        yosys_read_options: []
+        surelog_options: ['-DSYNTHESIS']
+      yosys:
+        arch: "xilinx"
+        yosys_synth_options: ['-iopad', '-noclkbuf', '-family xc7', "frontend=surelog"]
+        yosys_read_options: []
+        surelog_options: ['-DSYNTHESIS']
 
   lint:
     <<: *default_target
