From 84c652451d9eb1fa59eca827c985907e08a7be76 Mon Sep 17 00:00:00 2001
From: Kamil Rakoczy <krakoczy@antmicro.com>
Date: Thu, 20 Apr 2023 17:27:06 +0200
Subject: [PATCH] Use typedef instead of anonymous enum

Signed-off-by: Kamil Rakoczy <krakoczy@antmicro.com>
---
 bp_be/src/v/bp_be_calculator/bp_be_ptw.sv        | 3 ++-
 bp_be/src/v/bp_be_checker/bp_be_director.sv      | 3 ++-
 bp_be/src/v/bp_be_dcache/bp_be_dcache.sv         | 3 ++-
 bp_common/src/v/bsg_wormhole_stream_control.v    | 3 ++-
 bp_fe/src/v/bp_fe_bht.sv                         | 3 ++-
 bp_fe/src/v/bp_fe_btb.sv                         | 3 ++-
 bp_fe/src/v/bp_fe_controller.sv                  | 3 ++-
 bp_fe/src/v/bp_fe_icache.sv                      | 3 ++-
 bp_me/src/v/cce/bp_uce.sv                        | 5 +++--
 bp_me/src/v/dev/bp_me_cce_to_cache.sv            | 3 ++-
 bp_me/src/v/lce/bp_lce_cmd.sv                    | 5 +++--
 bp_me/src/v/network/bp_me_burst_gearbox.sv       | 3 ++-
 bp_me/src/v/network/bp_me_stream_fifo.sv         | 3 ++-
 bp_me/src/v/network/bp_me_stream_pump_control.sv | 3 ++-
 bp_me/test/common/bp_me_nonsynth_cfg_loader.sv   | 5 +++--
 bp_top/src/v/bp_cacc_vdp.sv                      | 5 +++--
 bp_top/test/common/bp_nonsynth_nbf_loader.sv     | 3 ++-
 bp_top/test/common/bp_nonsynth_watchdog.sv       | 3 ++-
 18 files changed, 40 insertions(+), 22 deletions(-)

diff --git a/bp_be/src/v/bp_be_calculator/bp_be_ptw.sv b/bp_be/src/v/bp_be_calculator/bp_be_ptw.sv
index 5f643744..a4e5215e 100644
--- a/bp_be/src/v/bp_be_calculator/bp_be_ptw.sv
+++ b/bp_be/src/v/bp_be_calculator/bp_be_ptw.sv
@@ -43,7 +43,8 @@ module bp_be_ptw
   `bp_cast_i(bp_be_ptw_miss_pkt_s, ptw_miss_pkt);
   `bp_cast_o(bp_be_ptw_fill_pkt_s, ptw_fill_pkt);
 
-  enum logic [2:0] {e_idle, e_send_load, e_recv_load, e_check_load, e_writeback} state_n, state_r;
+  typedef enum logic [2:0] {e_idle, e_send_load, e_recv_load, e_check_load, e_writeback} state_t;
+  state_t state_n, state_r;
   wire is_idle  = (state_r == e_idle);
   wire is_send  = (state_r == e_send_load);
   wire is_recv  = (state_r == e_recv_load);
diff --git a/bp_be/src/v/bp_be_checker/bp_be_director.sv b/bp_be/src/v/bp_be_checker/bp_be_director.sv
index 47d95a3d..6efc3727 100644
--- a/bp_be/src/v/bp_be_checker/bp_be_director.sv
+++ b/bp_be/src/v/bp_be_checker/bp_be_director.sv
@@ -69,7 +69,8 @@ module bp_be_director
   logic fe_cmd_v_li;
 
   // Declare intermediate signals
-  enum logic [2:0] {e_freeze, e_run, e_fence, e_wait} state_n, state_r;
+  typedef enum logic [2:0] {e_freeze, e_run, e_fence, e_wait} state_t;
+  state_t state_n, state_r;
   wire is_freeze = (state_r == e_freeze);
   wire is_run    = (state_r == e_run);
   wire is_fence  = (state_r == e_fence);
diff --git a/bp_be/src/v/bp_be_dcache/bp_be_dcache.sv b/bp_be/src/v/bp_be_dcache/bp_be_dcache.sv
index 750c9f11..c4f3e9bc 100644
--- a/bp_be/src/v/bp_be_dcache/bp_be_dcache.sv
+++ b/bp_be/src/v/bp_be_dcache/bp_be_dcache.sv
@@ -190,7 +190,8 @@ module bp_be_dcache
     : byte_offset_width_lp;
 
   // State machine declaration
-  enum logic {e_ready, e_miss} state_n, state_r;
+  typedef enum logic {e_ready, e_miss} state_t;
+  state_t state_n, state_r;
   wire is_ready  = (state_r == e_ready);
   wire is_miss   = (state_r == e_miss);
 
diff --git a/bp_common/src/v/bsg_wormhole_stream_control.v b/bp_common/src/v/bsg_wormhole_stream_control.v
index ed3de6b3..76a595e1 100644
--- a/bp_common/src/v/bsg_wormhole_stream_control.v
+++ b/bp_common/src/v/bsg_wormhole_stream_control.v
@@ -42,7 +42,8 @@ module bsg_wormhole_stream_control
    , output logic            last_data_o
    );
 
-  enum logic {e_hdr, e_data} state_n, state_r;
+  typedef enum logic {e_hdr, e_data} state_t;
+  state_t state_n, state_r;
   wire is_hdr  = (state_r == e_hdr);
   wire is_data = (state_r == e_data);
 
diff --git a/bp_fe/src/v/bp_fe_bht.sv b/bp_fe/src/v/bp_fe_bht.sv
index cd36066e..e70bf803 100644
--- a/bp_fe/src/v/bp_fe_bht.sv
+++ b/bp_fe/src/v/bp_fe_bht.sv
@@ -40,7 +40,8 @@ module bp_fe_bht
    );
 
   // Initialization state machine
-  enum logic [1:0] {e_reset, e_clear, e_run} state_n, state_r;
+  typedef enum logic [1:0] {e_reset, e_clear, e_run} state_t;
+  state_t state_n, state_r;
   wire is_reset = (state_r == e_reset);
   wire is_clear = (state_r == e_clear);
   wire is_run   = (state_r == e_run);
diff --git a/bp_fe/src/v/bp_fe_btb.sv b/bp_fe/src/v/bp_fe_btb.sv
index 858dc398..ec09010d 100644
--- a/bp_fe/src/v/bp_fe_btb.sv
+++ b/bp_fe/src/v/bp_fe_btb.sv
@@ -45,7 +45,8 @@ module bp_fe_btb
 
   ///////////////////////
   // Initialization state machine
-  enum logic [1:0] {e_reset, e_clear, e_run} state_n, state_r;
+  typedef enum logic [1:0] {e_reset, e_clear, e_run} state_t;
+  state_t state_n, state_r;
   wire is_reset = (state_r == e_reset);
   wire is_clear = (state_r == e_clear);
   wire is_run   = (state_r == e_run);
diff --git a/bp_fe/src/v/bp_fe_controller.sv b/bp_fe/src/v/bp_fe_controller.sv
index da9ad7db..4030b52d 100644
--- a/bp_fe/src/v/bp_fe_controller.sv
+++ b/bp_fe/src/v/bp_fe_controller.sv
@@ -71,7 +71,8 @@ module bp_fe_controller
   `bp_cast_o(bp_fe_icache_pkt_s, icache_pkt);
 
   // FSM
-  enum logic [2:0] {e_reset, e_wait, e_run, e_fence, e_resume} state_n, state_r;
+  typedef enum logic [2:0] {e_reset, e_wait, e_run, e_fence, e_resume} state_t;
+  state_t state_n, state_r;
 
   // Decoded state signals
   wire is_reset    = (state_r == e_reset);
diff --git a/bp_fe/src/v/bp_fe_icache.sv b/bp_fe/src/v/bp_fe_icache.sv
index 3a0e37df..2bd1ff8d 100644
--- a/bp_fe/src/v/bp_fe_icache.sv
+++ b/bp_fe/src/v/bp_fe_icache.sv
@@ -148,7 +148,8 @@ module bp_fe_icache
   localparam fill_size_in_bank_lp   = fill_width_p / bank_width_lp;
 
   // State machine declaration
-  enum logic [1:0] {e_ready, e_miss, e_recover} state_n, state_r;
+  typedef enum logic [1:0] {e_ready, e_miss, e_recover} state_t;
+  state_t state_n, state_r;
   wire is_ready   = (state_r == e_ready);
   wire is_miss    = (state_r == e_miss);
   wire is_recover = (state_r == e_recover);
diff --git a/bp_me/src/v/cce/bp_uce.sv b/bp_me/src/v/cce/bp_uce.sv
index 602c5af2..26f522f5 100644
--- a/bp_me/src/v/cce/bp_uce.sv
+++ b/bp_me/src/v/cce/bp_uce.sv
@@ -110,7 +110,7 @@ module bp_uce
   `bp_cast_o(bp_cache_data_mem_pkt_s, data_mem_pkt);
   `bp_cast_o(bp_cache_stat_mem_pkt_s, stat_mem_pkt);
 
-  enum logic [4:0] {
+  typedef enum logic [4:0] {
     e_reset
     ,e_init
     ,e_clear
@@ -128,7 +128,8 @@ module bp_uce
     ,e_write_wait
     ,e_read_wait
     ,e_uc_read_wait
-  } state_n, state_r;
+  } state_t;
+  state_t state_n, state_r;
 
   wire is_reset           = (state_r == e_reset);
   wire is_clear           = (state_r == e_clear);
diff --git a/bp_me/src/v/dev/bp_me_cce_to_cache.sv b/bp_me/src/v/dev/bp_me_cce_to_cache.sv
index 0f03288a..4b5098b3 100644
--- a/bp_me/src/v/dev/bp_me_cce_to_cache.sv
+++ b/bp_me/src/v/dev/bp_me_cce_to_cache.sv
@@ -71,7 +71,8 @@ module bp_me_cce_to_cache
   bsg_cache_pkt_s cache_pkt;
   assign cache_pkt_o = {l2_banks_p{cache_pkt}};
 
-  enum logic [1:0] {e_reset, e_clear_tag, e_ready} state_n, state_r;
+  typedef enum logic [1:0] {e_reset, e_clear_tag, e_ready} state_t;
+  state_t state_n, state_r;
   wire is_reset  = (state_r == e_reset);
   wire is_clear  = (state_r == e_clear_tag);
   wire is_ready  = (state_r == e_ready);
diff --git a/bp_me/src/v/lce/bp_lce_cmd.sv b/bp_me/src/v/lce/bp_lce_cmd.sv
index 8a48a246..cdf08bda 100644
--- a/bp_me/src/v/lce/bp_lce_cmd.sv
+++ b/bp_me/src/v/lce/bp_lce_cmd.sv
@@ -237,7 +237,7 @@ module bp_lce_cmd
   assign fill_index = (assoc_p == 1) ? 'b1 : fill_index_li;
 
   // FSM states
-  enum logic [3:0] {
+  typedef enum logic [3:0] {
     e_reset
     ,e_clear
     ,e_ready
@@ -249,7 +249,8 @@ module bp_lce_cmd
     ,e_wb_dirty_rd
     ,e_wb_dirty_send_data
     ,e_coh_ack
-  } state_n, state_r;
+  } state_t;
+  state_t state_n, state_r;
 
   // sync done register - goes high when all sync command/acks complete
   logic sync_done_en, sync_done_li;
diff --git a/bp_me/src/v/network/bp_me_burst_gearbox.sv b/bp_me/src/v/network/bp_me_burst_gearbox.sv
index 40b34f9a..23ddff17 100644
--- a/bp_me/src/v/network/bp_me_burst_gearbox.sv
+++ b/bp_me/src/v/network/bp_me_burst_gearbox.sv
@@ -78,7 +78,8 @@ module bp_me_burst_gearbox
   assign msg_has_data_o = msg_has_data_i;
 
   // simple 1-bit FSM used by narrow (in > out) conversion
-  enum logic {e_hdr, e_data} state_n, state_r;
+  typedef enum logic {e_hdr, e_data} state_t;
+  state_t state_n, state_r;
   wire is_hdr = (state_r == e_hdr);
   wire is_data = (state_r == e_data);
   wire e_hdr_to_e_data = (msg_header_v_o & msg_header_ready_and_i & msg_has_data_o);
diff --git a/bp_me/src/v/network/bp_me_stream_fifo.sv b/bp_me/src/v/network/bp_me_stream_fifo.sv
index 9a06a51e..8b688dad 100644
--- a/bp_me/src/v/network/bp_me_stream_fifo.sv
+++ b/bp_me/src/v/network/bp_me_stream_fifo.sv
@@ -32,7 +32,8 @@ module bp_me_stream_fifo
    , input                                   msg_yumi_i
    );
 
-  enum logic {e_ready, e_stream} state_n, state_r;
+  typedef enum logic {e_ready, e_stream} state_t;
+  state_t state_n, state_r;
   wire is_ready  = (state_r == e_ready);
   wire is_stream = (state_r == e_stream);
 
diff --git a/bp_me/src/v/network/bp_me_stream_pump_control.sv b/bp_me/src/v/network/bp_me_stream_pump_control.sv
index 6021b9fb..688ee8fc 100644
--- a/bp_me/src/v/network/bp_me_stream_pump_control.sv
+++ b/bp_me/src/v/network/bp_me_stream_pump_control.sv
@@ -57,7 +57,8 @@ module bp_me_stream_pump_control
     end
   else
     begin : nz
-      enum logic {e_ready, e_stream} state_n, state_r;
+      typedef enum logic {e_ready, e_stream} state_t;
+      state_t state_n, state_r;
       wire is_ready = (state_r == e_ready);
       wire is_stream = (state_r == e_stream);
       assign first_o = is_ready;
diff --git a/bp_me/test/common/bp_me_nonsynth_cfg_loader.sv b/bp_me/test/common/bp_me_nonsynth_cfg_loader.sv
index e4b1a16a..3a367083 100644
--- a/bp_me/test/common/bp_me_nonsynth_cfg_loader.sv
+++ b/bp_me/test/common/bp_me_nonsynth_cfg_loader.sv
@@ -85,7 +85,7 @@ module bp_me_nonsynth_cfg_loader
   assign cce_inst_boot_rom_addr = cfg_addr_lo[3+:inst_ram_addr_width_p];
   assign cce_inst_boot_rom_data = cce_inst_boot_rom[cce_inst_boot_rom_addr];
 
-  enum logic [5:0] {
+  typedef enum logic [5:0] {
     RESET
     ,BP_FREEZE_SET
     ,SEND_RAM
@@ -98,7 +98,8 @@ module bp_me_nonsynth_cfg_loader
     ,BP_FREEZE_CLR
     ,WAIT_FOR_CREDITS
     ,DONE
-  } state_n, state_r;
+  } state_t
+  state_t state_n, state_r;
 
   logic [`BSG_WIDTH(io_noc_max_credits_p)-1:0] credit_count_lo;
   bsg_flow_counter
diff --git a/bp_top/src/v/bp_cacc_vdp.sv b/bp_top/src/v/bp_cacc_vdp.sv
index 8d40b5bb..4b9e8f45 100644
--- a/bp_top/src/v/bp_cacc_vdp.sv
+++ b/bp_top/src/v/bp_cacc_vdp.sv
@@ -282,7 +282,7 @@ module bp_cacc_vdp
   logic [2:0] len_a_cnt, len_b_cnt;
   logic load, second_operand;
 
-  enum logic [3:0]
+  typedef enum logic [3:0]
   {
     e_reset
     ,e_wait_start
@@ -295,7 +295,8 @@ module bp_cacc_vdp
     ,e_check_vec2_len
     ,e_wb_result
     ,e_done
-  } state_n, state_r;
+  } state_t;
+  state_t state_n, state_r;
 
   wire done = (state_r inside {e_done});
   wire res_status = (state_r inside {e_wait_start});
diff --git a/bp_top/test/common/bp_nonsynth_nbf_loader.sv b/bp_top/test/common/bp_nonsynth_nbf_loader.sv
index 35ca8876..decfbafc 100644
--- a/bp_top/test/common/bp_nonsynth_nbf_loader.sv
+++ b/bp_top/test/common/bp_nonsynth_nbf_loader.sv
@@ -42,7 +42,8 @@ module bp_nonsynth_nbf_loader
   // all messages are single beat
   wire unused = &{mem_rev_data_i, mem_rev_last_i};
 
-  enum logic [2:0] { e_reset, e_send, e_fence, e_read, e_done} state_n, state_r;
+  typedef enum logic [2:0] { e_reset, e_send, e_fence, e_read, e_done} state_t;
+  state_t state_n, state_r;
   wire is_reset    = (state_r == e_reset);
   wire is_send_nbf = (state_r == e_send);
   wire is_fence    = (state_r == e_fence);
diff --git a/bp_top/test/common/bp_nonsynth_watchdog.sv b/bp_top/test/common/bp_nonsynth_watchdog.sv
index afed3c93..71635ad8 100644
--- a/bp_top/test/common/bp_nonsynth_watchdog.sv
+++ b/bp_top/test/common/bp_nonsynth_watchdog.sv
@@ -28,7 +28,8 @@ module bp_nonsynth_watchdog
     , input [num_core_p-1:0]                  finish_i
     );
 
-  enum logic {e_run, e_halt} state_n, state_r;
+  typedef enum logic {e_run, e_halt} state_t;
+  state_t state_n, state_r;
   wire is_run = (state_r == e_run);
   wire is_halt = (state_r == e_halt);
 
-- 
2.39.0

